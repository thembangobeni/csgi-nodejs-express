
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model csgi_class
 */

export type csgi_class = {
  classid: number
  classname: string
  class_desc: string
  userid: number | null
  gradeid: number | null
  roomid: number | null
  created_date: Date
  created_by: string | null
  updated_date: Date | null
  updated_by: string | null
}

/**
 * Model csgi_grade
 */

export type csgi_grade = {
  gradeid: number
  gradecode: string
  grade: string
  created_date: Date
  created_by: string
  updated_date: Date | null
  updated_by: string | null
}

/**
 * Model csgi_menu
 */

export type csgi_menu = {
  menuid: number
  menuname: string
  created_date: Date
  created_by: string
  updated_date: Date | null
  updated_by: string | null
}

/**
 * Model csgi_menu_item
 */

export type csgi_menu_item = {
  itemid: number
  itemname: string
  menuid: number | null
  created_date: Date
  created_by: string
  updated_date: Date | null
  updated_by: string | null
}

/**
 * Model csgi_menu_role
 */

export type csgi_menu_role = {
  menu_roleid: number
  roleid: number
  itemid: number
  created_date: Date
  created_by: string
  updated_date: Date | null
  updated_by: string | null
}

/**
 * Model csgi_period
 */

export type csgi_period = {
  periodid: number
  periodname: string
  period_desc: string | null
  period_start: Date
  period_end: Date
  created_date: Date
  created_by: string
  updated_date: Date | null
  updated_by: string | null
  period_date: Date | null
}

/**
 * Model csgi_role
 */

export type csgi_role = {
  roleid: number
  role: string
  created_date: Date
  created_by: string
  updated_date: Date | null
  updated_by: string | null
}

/**
 * Model csgi_room
 */

export type csgi_room = {
  roomid: number
  roomcode: string
  room_desc: string | null
  location: string | null
  created_date: Date
  created_by: string
  updated_date: Date | null
  updated_by: string | null
}

/**
 * Model csgi_roster
 */

export type csgi_roster = {
  rosterid: number
  classid: number
  periodid: number
  studentid: number
  attended_yn: string
  created_date: Date
  created_by: string
  updated_date: Date | null
  updated_by: string | null
}

/**
 * Model csgi_student
 */

export type csgi_student = {
  studentid: number
  student_name: string | null
  last_name: string
  date_of_birth: Date | null
  gender: string | null
  created_date: Date
  created_by: string
  updated_date: Date | null
  updated_by: string | null
}

/**
 * Model csgi_user
 */

export type csgi_user = {
  userid: number
  username: string
  email: string
  first_name: string | null
  last_name: string
  password: string
  created_date: Date
  created_by: string | null
  updated_date: Date | null
  updated_by: string | null
}

/**
 * Model csgi_user_role
 */

export type csgi_user_role = {
  user_roleid: number
  userid: number
  roleid: number
  created_date: Date
  created_by: string
  updated_date: Date | null
  updated_by: string | null
}

/**
 * Model csgi_alluser_v
 */

export type csgi_alluser_v = {
  userid: number
  email: string
  role: string
}

/**
 * Model csgi_detailreport_v
 */

export type csgi_detailreport_v = {
  classid: number
  classname: string
  gradeid: number
  gradecode: string
  teacherid: number
  teachername: string
  teacheremail: string
  periodid: number
  periodname: string
  period_date: Date
  quarter: string
  studentid: number
  student_name: string
  attended: number
  notattended: number
}

/**
 * Model csgi_summaryreport_v
 */

export type csgi_summaryreport_v = {
  classname: string
  gradeid: number
  gradecode: string
  teacherid: number
  teacheremail: string
  teachername: string
  student_name: string
  quarter: string
  no_attended: number
  no_missed: number
}

/**
 * Model csgi_teacher_v
 */

export type csgi_teacher_v = {
  teacherid: number
  teacher: string
  teacheremail: string
  teachername: string
  rolename: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Csgi_classes
 * const csgi_classes = await prisma.csgi_class.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Csgi_classes
   * const csgi_classes = await prisma.csgi_class.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.csgi_class`: Exposes CRUD operations for the **csgi_class** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Csgi_classes
    * const csgi_classes = await prisma.csgi_class.findMany()
    * ```
    */
  get csgi_class(): Prisma.csgi_classDelegate<GlobalReject>;

  /**
   * `prisma.csgi_grade`: Exposes CRUD operations for the **csgi_grade** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Csgi_grades
    * const csgi_grades = await prisma.csgi_grade.findMany()
    * ```
    */
  get csgi_grade(): Prisma.csgi_gradeDelegate<GlobalReject>;

  /**
   * `prisma.csgi_menu`: Exposes CRUD operations for the **csgi_menu** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Csgi_menus
    * const csgi_menus = await prisma.csgi_menu.findMany()
    * ```
    */
  get csgi_menu(): Prisma.csgi_menuDelegate<GlobalReject>;

  /**
   * `prisma.csgi_menu_item`: Exposes CRUD operations for the **csgi_menu_item** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Csgi_menu_items
    * const csgi_menu_items = await prisma.csgi_menu_item.findMany()
    * ```
    */
  get csgi_menu_item(): Prisma.csgi_menu_itemDelegate<GlobalReject>;

  /**
   * `prisma.csgi_menu_role`: Exposes CRUD operations for the **csgi_menu_role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Csgi_menu_roles
    * const csgi_menu_roles = await prisma.csgi_menu_role.findMany()
    * ```
    */
  get csgi_menu_role(): Prisma.csgi_menu_roleDelegate<GlobalReject>;

  /**
   * `prisma.csgi_period`: Exposes CRUD operations for the **csgi_period** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Csgi_periods
    * const csgi_periods = await prisma.csgi_period.findMany()
    * ```
    */
  get csgi_period(): Prisma.csgi_periodDelegate<GlobalReject>;

  /**
   * `prisma.csgi_role`: Exposes CRUD operations for the **csgi_role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Csgi_roles
    * const csgi_roles = await prisma.csgi_role.findMany()
    * ```
    */
  get csgi_role(): Prisma.csgi_roleDelegate<GlobalReject>;

  /**
   * `prisma.csgi_room`: Exposes CRUD operations for the **csgi_room** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Csgi_rooms
    * const csgi_rooms = await prisma.csgi_room.findMany()
    * ```
    */
  get csgi_room(): Prisma.csgi_roomDelegate<GlobalReject>;

  /**
   * `prisma.csgi_roster`: Exposes CRUD operations for the **csgi_roster** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Csgi_rosters
    * const csgi_rosters = await prisma.csgi_roster.findMany()
    * ```
    */
  get csgi_roster(): Prisma.csgi_rosterDelegate<GlobalReject>;

  /**
   * `prisma.csgi_student`: Exposes CRUD operations for the **csgi_student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Csgi_students
    * const csgi_students = await prisma.csgi_student.findMany()
    * ```
    */
  get csgi_student(): Prisma.csgi_studentDelegate<GlobalReject>;

  /**
   * `prisma.csgi_user`: Exposes CRUD operations for the **csgi_user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Csgi_users
    * const csgi_users = await prisma.csgi_user.findMany()
    * ```
    */
  get csgi_user(): Prisma.csgi_userDelegate<GlobalReject>;

  /**
   * `prisma.csgi_user_role`: Exposes CRUD operations for the **csgi_user_role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Csgi_user_roles
    * const csgi_user_roles = await prisma.csgi_user_role.findMany()
    * ```
    */
  get csgi_user_role(): Prisma.csgi_user_roleDelegate<GlobalReject>;

  /**
   * `prisma.csgi_alluser_v`: Exposes CRUD operations for the **csgi_alluser_v** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Csgi_alluser_vs
    * const csgi_alluser_vs = await prisma.csgi_alluser_v.findMany()
    * ```
    */
  get csgi_alluser_v(): Prisma.csgi_alluser_vDelegate<GlobalReject>;

  /**
   * `prisma.csgi_detailreport_v`: Exposes CRUD operations for the **csgi_detailreport_v** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Csgi_detailreport_vs
    * const csgi_detailreport_vs = await prisma.csgi_detailreport_v.findMany()
    * ```
    */
  get csgi_detailreport_v(): Prisma.csgi_detailreport_vDelegate<GlobalReject>;

  /**
   * `prisma.csgi_summaryreport_v`: Exposes CRUD operations for the **csgi_summaryreport_v** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Csgi_summaryreport_vs
    * const csgi_summaryreport_vs = await prisma.csgi_summaryreport_v.findMany()
    * ```
    */
  get csgi_summaryreport_v(): Prisma.csgi_summaryreport_vDelegate<GlobalReject>;

  /**
   * `prisma.csgi_teacher_v`: Exposes CRUD operations for the **csgi_teacher_v** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Csgi_teacher_vs
    * const csgi_teacher_vs = await prisma.csgi_teacher_v.findMany()
    * ```
    */
  get csgi_teacher_v(): Prisma.csgi_teacher_vDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.21.2
   * Query Engine version: e421996c87d5f3c8f7eeadd502d4ad402c89464d
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    csgi_class: 'csgi_class',
    csgi_grade: 'csgi_grade',
    csgi_menu: 'csgi_menu',
    csgi_menu_item: 'csgi_menu_item',
    csgi_menu_role: 'csgi_menu_role',
    csgi_period: 'csgi_period',
    csgi_role: 'csgi_role',
    csgi_room: 'csgi_room',
    csgi_roster: 'csgi_roster',
    csgi_student: 'csgi_student',
    csgi_user: 'csgi_user',
    csgi_user_role: 'csgi_user_role',
    csgi_alluser_v: 'csgi_alluser_v',
    csgi_detailreport_v: 'csgi_detailreport_v',
    csgi_summaryreport_v: 'csgi_summaryreport_v',
    csgi_teacher_v: 'csgi_teacher_v'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model csgi_class
   */


  export type AggregateCsgi_class = {
    count: Csgi_classCountAggregateOutputType | null
    avg: Csgi_classAvgAggregateOutputType | null
    sum: Csgi_classSumAggregateOutputType | null
    min: Csgi_classMinAggregateOutputType | null
    max: Csgi_classMaxAggregateOutputType | null
  }

  export type Csgi_classAvgAggregateOutputType = {
    classid: number | null
    userid: number | null
    gradeid: number | null
    roomid: number | null
  }

  export type Csgi_classSumAggregateOutputType = {
    classid: number | null
    userid: number | null
    gradeid: number | null
    roomid: number | null
  }

  export type Csgi_classMinAggregateOutputType = {
    classid: number | null
    classname: string | null
    class_desc: string | null
    userid: number | null
    gradeid: number | null
    roomid: number | null
    created_date: Date | null
    created_by: string | null
    updated_date: Date | null
    updated_by: string | null
  }

  export type Csgi_classMaxAggregateOutputType = {
    classid: number | null
    classname: string | null
    class_desc: string | null
    userid: number | null
    gradeid: number | null
    roomid: number | null
    created_date: Date | null
    created_by: string | null
    updated_date: Date | null
    updated_by: string | null
  }

  export type Csgi_classCountAggregateOutputType = {
    classid: number
    classname: number
    class_desc: number
    userid: number
    gradeid: number
    roomid: number
    created_date: number
    created_by: number
    updated_date: number
    updated_by: number
    _all: number
  }


  export type Csgi_classAvgAggregateInputType = {
    classid?: true
    userid?: true
    gradeid?: true
    roomid?: true
  }

  export type Csgi_classSumAggregateInputType = {
    classid?: true
    userid?: true
    gradeid?: true
    roomid?: true
  }

  export type Csgi_classMinAggregateInputType = {
    classid?: true
    classname?: true
    class_desc?: true
    userid?: true
    gradeid?: true
    roomid?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
  }

  export type Csgi_classMaxAggregateInputType = {
    classid?: true
    classname?: true
    class_desc?: true
    userid?: true
    gradeid?: true
    roomid?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
  }

  export type Csgi_classCountAggregateInputType = {
    classid?: true
    classname?: true
    class_desc?: true
    userid?: true
    gradeid?: true
    roomid?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
    _all?: true
  }

  export type Csgi_classAggregateArgs = {
    /**
     * Filter which csgi_class to aggregate.
    **/
    where?: csgi_classWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_classes to fetch.
    **/
    orderBy?: Enumerable<csgi_classOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: csgi_classWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_classes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_classes.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned csgi_classes
    **/
    count?: true | Csgi_classCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Csgi_classAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Csgi_classSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Csgi_classMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Csgi_classMaxAggregateInputType
  }

  export type GetCsgi_classAggregateType<T extends Csgi_classAggregateArgs> = {
    [P in keyof T & keyof AggregateCsgi_class]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCsgi_class[P]>
      : GetScalarType<T[P], AggregateCsgi_class[P]>
  }


    
    
  export type Csgi_classGroupByArgs = {
    where?: csgi_classWhereInput
    orderBy?: Enumerable<csgi_classOrderByInput>
    by: Array<Csgi_classScalarFieldEnum>
    having?: csgi_classScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: Csgi_classCountAggregateInputType | true
    avg?: Csgi_classAvgAggregateInputType
    sum?: Csgi_classSumAggregateInputType
    min?: Csgi_classMinAggregateInputType
    max?: Csgi_classMaxAggregateInputType
  }


  export type Csgi_classGroupByOutputType = {
    classid: number
    classname: string
    class_desc: string
    userid: number | null
    gradeid: number | null
    roomid: number | null
    created_date: Date
    created_by: string | null
    updated_date: Date | null
    updated_by: string | null
    count: Csgi_classCountAggregateOutputType | null
    avg: Csgi_classAvgAggregateOutputType | null
    sum: Csgi_classSumAggregateOutputType | null
    min: Csgi_classMinAggregateOutputType | null
    max: Csgi_classMaxAggregateOutputType | null
  }

  type GetCsgi_classGroupByPayload<T extends Csgi_classGroupByArgs> = Promise<Array<
    PickArray<Csgi_classGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof Csgi_classGroupByOutputType))]: GetScalarType<T[P], Csgi_classGroupByOutputType[P]>
    }
  >>
    

  export type csgi_classSelect = {
    classid?: boolean
    classname?: boolean
    class_desc?: boolean
    userid?: boolean
    gradeid?: boolean
    roomid?: boolean
    created_date?: boolean
    created_by?: boolean
    updated_date?: boolean
    updated_by?: boolean
    csgi_grade?: boolean | csgi_gradeArgs
    csgi_room?: boolean | csgi_roomArgs
    csgi_user?: boolean | csgi_userArgs
    csgi_roster?: boolean | csgi_rosterFindManyArgs
  }

  export type csgi_classInclude = {
    csgi_grade?: boolean | csgi_gradeArgs
    csgi_room?: boolean | csgi_roomArgs
    csgi_user?: boolean | csgi_userArgs
    csgi_roster?: boolean | csgi_rosterFindManyArgs
  }

  export type csgi_classGetPayload<
    S extends boolean | null | undefined | csgi_classArgs,
    U = keyof S
      > = S extends true
        ? csgi_class
    : S extends undefined
    ? never
    : S extends csgi_classArgs | csgi_classFindManyArgs
    ?'include' extends U
    ? csgi_class  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'csgi_grade'
        ? csgi_gradeGetPayload<S['include'][P]> | null :
        P extends 'csgi_room'
        ? csgi_roomGetPayload<S['include'][P]> | null :
        P extends 'csgi_user'
        ? csgi_userGetPayload<S['include'][P]> | null :
        P extends 'csgi_roster'
        ? Array < csgi_rosterGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof csgi_class ?csgi_class [P]
  : 
          P extends 'csgi_grade'
        ? csgi_gradeGetPayload<S['select'][P]> | null :
        P extends 'csgi_room'
        ? csgi_roomGetPayload<S['select'][P]> | null :
        P extends 'csgi_user'
        ? csgi_userGetPayload<S['select'][P]> | null :
        P extends 'csgi_roster'
        ? Array < csgi_rosterGetPayload<S['select'][P]>>  : never
  } 
    : csgi_class
  : csgi_class


  type csgi_classCountArgs = Merge<
    Omit<csgi_classFindManyArgs, 'select' | 'include'> & {
      select?: Csgi_classCountAggregateInputType | true
    }
  >

  export interface csgi_classDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Csgi_class that matches the filter.
     * @param {csgi_classFindUniqueArgs} args - Arguments to find a Csgi_class
     * @example
     * // Get one Csgi_class
     * const csgi_class = await prisma.csgi_class.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends csgi_classFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, csgi_classFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'csgi_class'> extends True ? CheckSelect<T, Prisma__csgi_classClient<csgi_class>, Prisma__csgi_classClient<csgi_classGetPayload<T>>> : CheckSelect<T, Prisma__csgi_classClient<csgi_class | null >, Prisma__csgi_classClient<csgi_classGetPayload<T> | null >>

    /**
     * Find the first Csgi_class that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_classFindFirstArgs} args - Arguments to find a Csgi_class
     * @example
     * // Get one Csgi_class
     * const csgi_class = await prisma.csgi_class.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends csgi_classFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, csgi_classFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'csgi_class'> extends True ? CheckSelect<T, Prisma__csgi_classClient<csgi_class>, Prisma__csgi_classClient<csgi_classGetPayload<T>>> : CheckSelect<T, Prisma__csgi_classClient<csgi_class | null >, Prisma__csgi_classClient<csgi_classGetPayload<T> | null >>

    /**
     * Find zero or more Csgi_classes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_classFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Csgi_classes
     * const csgi_classes = await prisma.csgi_class.findMany()
     * 
     * // Get first 10 Csgi_classes
     * const csgi_classes = await prisma.csgi_class.findMany({ take: 10 })
     * 
     * // Only select the `classid`
     * const csgi_classWithClassidOnly = await prisma.csgi_class.findMany({ select: { classid: true } })
     * 
    **/
    findMany<T extends csgi_classFindManyArgs>(
      args?: SelectSubset<T, csgi_classFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<csgi_class>>, PrismaPromise<Array<csgi_classGetPayload<T>>>>

    /**
     * Create a Csgi_class.
     * @param {csgi_classCreateArgs} args - Arguments to create a Csgi_class.
     * @example
     * // Create one Csgi_class
     * const Csgi_class = await prisma.csgi_class.create({
     *   data: {
     *     // ... data to create a Csgi_class
     *   }
     * })
     * 
    **/
    create<T extends csgi_classCreateArgs>(
      args: SelectSubset<T, csgi_classCreateArgs>
    ): CheckSelect<T, Prisma__csgi_classClient<csgi_class>, Prisma__csgi_classClient<csgi_classGetPayload<T>>>

    /**
     * Create many Csgi_classes.
     *     @param {csgi_classCreateManyArgs} args - Arguments to create many Csgi_classes.
     *     @example
     *     // Create many Csgi_classes
     *     const csgi_class = await prisma.csgi_class.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends csgi_classCreateManyArgs>(
      args?: SelectSubset<T, csgi_classCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Csgi_class.
     * @param {csgi_classDeleteArgs} args - Arguments to delete one Csgi_class.
     * @example
     * // Delete one Csgi_class
     * const Csgi_class = await prisma.csgi_class.delete({
     *   where: {
     *     // ... filter to delete one Csgi_class
     *   }
     * })
     * 
    **/
    delete<T extends csgi_classDeleteArgs>(
      args: SelectSubset<T, csgi_classDeleteArgs>
    ): CheckSelect<T, Prisma__csgi_classClient<csgi_class>, Prisma__csgi_classClient<csgi_classGetPayload<T>>>

    /**
     * Update one Csgi_class.
     * @param {csgi_classUpdateArgs} args - Arguments to update one Csgi_class.
     * @example
     * // Update one Csgi_class
     * const csgi_class = await prisma.csgi_class.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends csgi_classUpdateArgs>(
      args: SelectSubset<T, csgi_classUpdateArgs>
    ): CheckSelect<T, Prisma__csgi_classClient<csgi_class>, Prisma__csgi_classClient<csgi_classGetPayload<T>>>

    /**
     * Delete zero or more Csgi_classes.
     * @param {csgi_classDeleteManyArgs} args - Arguments to filter Csgi_classes to delete.
     * @example
     * // Delete a few Csgi_classes
     * const { count } = await prisma.csgi_class.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends csgi_classDeleteManyArgs>(
      args?: SelectSubset<T, csgi_classDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Csgi_classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_classUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Csgi_classes
     * const csgi_class = await prisma.csgi_class.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends csgi_classUpdateManyArgs>(
      args: SelectSubset<T, csgi_classUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Csgi_class.
     * @param {csgi_classUpsertArgs} args - Arguments to update or create a Csgi_class.
     * @example
     * // Update or create a Csgi_class
     * const csgi_class = await prisma.csgi_class.upsert({
     *   create: {
     *     // ... data to create a Csgi_class
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Csgi_class we want to update
     *   }
     * })
    **/
    upsert<T extends csgi_classUpsertArgs>(
      args: SelectSubset<T, csgi_classUpsertArgs>
    ): CheckSelect<T, Prisma__csgi_classClient<csgi_class>, Prisma__csgi_classClient<csgi_classGetPayload<T>>>

    /**
     * Count the number of Csgi_classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_classCountArgs} args - Arguments to filter Csgi_classes to count.
     * @example
     * // Count the number of Csgi_classes
     * const count = await prisma.csgi_class.count({
     *   where: {
     *     // ... the filter for the Csgi_classes we want to count
     *   }
     * })
    **/
    count<T extends csgi_classCountArgs>(
      args?: Subset<T, csgi_classCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Csgi_classCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Csgi_class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Csgi_classAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Csgi_classAggregateArgs>(args: Subset<T, Csgi_classAggregateArgs>): PrismaPromise<GetCsgi_classAggregateType<T>>

    /**
     * Group by Csgi_class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Csgi_classGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Csgi_classGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Csgi_classGroupByArgs['orderBy'] }
        : { orderBy?: Csgi_classGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Csgi_classGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCsgi_classGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for csgi_class.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__csgi_classClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    csgi_grade<T extends csgi_gradeArgs = {}>(args?: Subset<T, csgi_gradeArgs>): CheckSelect<T, Prisma__csgi_gradeClient<csgi_grade | null >, Prisma__csgi_gradeClient<csgi_gradeGetPayload<T> | null >>;

    csgi_room<T extends csgi_roomArgs = {}>(args?: Subset<T, csgi_roomArgs>): CheckSelect<T, Prisma__csgi_roomClient<csgi_room | null >, Prisma__csgi_roomClient<csgi_roomGetPayload<T> | null >>;

    csgi_user<T extends csgi_userArgs = {}>(args?: Subset<T, csgi_userArgs>): CheckSelect<T, Prisma__csgi_userClient<csgi_user | null >, Prisma__csgi_userClient<csgi_userGetPayload<T> | null >>;

    csgi_roster<T extends csgi_rosterFindManyArgs = {}>(args?: Subset<T, csgi_rosterFindManyArgs>): CheckSelect<T, PrismaPromise<Array<csgi_roster>>, PrismaPromise<Array<csgi_rosterGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * csgi_class findUnique
   */
  export type csgi_classFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the csgi_class
    **/
    select?: csgi_classSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_classInclude | null
    /**
     * Throw an Error if a csgi_class can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which csgi_class to fetch.
    **/
    where: csgi_classWhereUniqueInput
  }


  /**
   * csgi_class findFirst
   */
  export type csgi_classFindFirstArgs = {
    /**
     * Select specific fields to fetch from the csgi_class
    **/
    select?: csgi_classSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_classInclude | null
    /**
     * Throw an Error if a csgi_class can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which csgi_class to fetch.
    **/
    where?: csgi_classWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_classes to fetch.
    **/
    orderBy?: Enumerable<csgi_classOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for csgi_classes.
    **/
    cursor?: csgi_classWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_classes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_classes.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of csgi_classes.
    **/
    distinct?: Enumerable<Csgi_classScalarFieldEnum>
  }


  /**
   * csgi_class findMany
   */
  export type csgi_classFindManyArgs = {
    /**
     * Select specific fields to fetch from the csgi_class
    **/
    select?: csgi_classSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_classInclude | null
    /**
     * Filter, which csgi_classes to fetch.
    **/
    where?: csgi_classWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_classes to fetch.
    **/
    orderBy?: Enumerable<csgi_classOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing csgi_classes.
    **/
    cursor?: csgi_classWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_classes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_classes.
    **/
    skip?: number
    distinct?: Enumerable<Csgi_classScalarFieldEnum>
  }


  /**
   * csgi_class create
   */
  export type csgi_classCreateArgs = {
    /**
     * Select specific fields to fetch from the csgi_class
    **/
    select?: csgi_classSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_classInclude | null
    /**
     * The data needed to create a csgi_class.
    **/
    data: XOR<csgi_classCreateInput, csgi_classUncheckedCreateInput>
  }


  /**
   * csgi_class createMany
   */
  export type csgi_classCreateManyArgs = {
    data: Enumerable<csgi_classCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * csgi_class update
   */
  export type csgi_classUpdateArgs = {
    /**
     * Select specific fields to fetch from the csgi_class
    **/
    select?: csgi_classSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_classInclude | null
    /**
     * The data needed to update a csgi_class.
    **/
    data: XOR<csgi_classUpdateInput, csgi_classUncheckedUpdateInput>
    /**
     * Choose, which csgi_class to update.
    **/
    where: csgi_classWhereUniqueInput
  }


  /**
   * csgi_class updateMany
   */
  export type csgi_classUpdateManyArgs = {
    data: XOR<csgi_classUpdateManyMutationInput, csgi_classUncheckedUpdateManyInput>
    where?: csgi_classWhereInput
  }


  /**
   * csgi_class upsert
   */
  export type csgi_classUpsertArgs = {
    /**
     * Select specific fields to fetch from the csgi_class
    **/
    select?: csgi_classSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_classInclude | null
    /**
     * The filter to search for the csgi_class to update in case it exists.
    **/
    where: csgi_classWhereUniqueInput
    /**
     * In case the csgi_class found by the `where` argument doesn't exist, create a new csgi_class with this data.
    **/
    create: XOR<csgi_classCreateInput, csgi_classUncheckedCreateInput>
    /**
     * In case the csgi_class was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<csgi_classUpdateInput, csgi_classUncheckedUpdateInput>
  }


  /**
   * csgi_class delete
   */
  export type csgi_classDeleteArgs = {
    /**
     * Select specific fields to fetch from the csgi_class
    **/
    select?: csgi_classSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_classInclude | null
    /**
     * Filter which csgi_class to delete.
    **/
    where: csgi_classWhereUniqueInput
  }


  /**
   * csgi_class deleteMany
   */
  export type csgi_classDeleteManyArgs = {
    where?: csgi_classWhereInput
  }


  /**
   * csgi_class without action
   */
  export type csgi_classArgs = {
    /**
     * Select specific fields to fetch from the csgi_class
    **/
    select?: csgi_classSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_classInclude | null
  }



  /**
   * Model csgi_grade
   */


  export type AggregateCsgi_grade = {
    count: Csgi_gradeCountAggregateOutputType | null
    avg: Csgi_gradeAvgAggregateOutputType | null
    sum: Csgi_gradeSumAggregateOutputType | null
    min: Csgi_gradeMinAggregateOutputType | null
    max: Csgi_gradeMaxAggregateOutputType | null
  }

  export type Csgi_gradeAvgAggregateOutputType = {
    gradeid: number | null
  }

  export type Csgi_gradeSumAggregateOutputType = {
    gradeid: number | null
  }

  export type Csgi_gradeMinAggregateOutputType = {
    gradeid: number | null
    gradecode: string | null
    grade: string | null
    created_date: Date | null
    created_by: string | null
    updated_date: Date | null
    updated_by: string | null
  }

  export type Csgi_gradeMaxAggregateOutputType = {
    gradeid: number | null
    gradecode: string | null
    grade: string | null
    created_date: Date | null
    created_by: string | null
    updated_date: Date | null
    updated_by: string | null
  }

  export type Csgi_gradeCountAggregateOutputType = {
    gradeid: number
    gradecode: number
    grade: number
    created_date: number
    created_by: number
    updated_date: number
    updated_by: number
    _all: number
  }


  export type Csgi_gradeAvgAggregateInputType = {
    gradeid?: true
  }

  export type Csgi_gradeSumAggregateInputType = {
    gradeid?: true
  }

  export type Csgi_gradeMinAggregateInputType = {
    gradeid?: true
    gradecode?: true
    grade?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
  }

  export type Csgi_gradeMaxAggregateInputType = {
    gradeid?: true
    gradecode?: true
    grade?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
  }

  export type Csgi_gradeCountAggregateInputType = {
    gradeid?: true
    gradecode?: true
    grade?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
    _all?: true
  }

  export type Csgi_gradeAggregateArgs = {
    /**
     * Filter which csgi_grade to aggregate.
    **/
    where?: csgi_gradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_grades to fetch.
    **/
    orderBy?: Enumerable<csgi_gradeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: csgi_gradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_grades from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_grades.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned csgi_grades
    **/
    count?: true | Csgi_gradeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Csgi_gradeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Csgi_gradeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Csgi_gradeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Csgi_gradeMaxAggregateInputType
  }

  export type GetCsgi_gradeAggregateType<T extends Csgi_gradeAggregateArgs> = {
    [P in keyof T & keyof AggregateCsgi_grade]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCsgi_grade[P]>
      : GetScalarType<T[P], AggregateCsgi_grade[P]>
  }


    
    
  export type Csgi_gradeGroupByArgs = {
    where?: csgi_gradeWhereInput
    orderBy?: Enumerable<csgi_gradeOrderByInput>
    by: Array<Csgi_gradeScalarFieldEnum>
    having?: csgi_gradeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: Csgi_gradeCountAggregateInputType | true
    avg?: Csgi_gradeAvgAggregateInputType
    sum?: Csgi_gradeSumAggregateInputType
    min?: Csgi_gradeMinAggregateInputType
    max?: Csgi_gradeMaxAggregateInputType
  }


  export type Csgi_gradeGroupByOutputType = {
    gradeid: number
    gradecode: string
    grade: string
    created_date: Date
    created_by: string
    updated_date: Date | null
    updated_by: string | null
    count: Csgi_gradeCountAggregateOutputType | null
    avg: Csgi_gradeAvgAggregateOutputType | null
    sum: Csgi_gradeSumAggregateOutputType | null
    min: Csgi_gradeMinAggregateOutputType | null
    max: Csgi_gradeMaxAggregateOutputType | null
  }

  type GetCsgi_gradeGroupByPayload<T extends Csgi_gradeGroupByArgs> = Promise<Array<
    PickArray<Csgi_gradeGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof Csgi_gradeGroupByOutputType))]: GetScalarType<T[P], Csgi_gradeGroupByOutputType[P]>
    }
  >>
    

  export type csgi_gradeSelect = {
    gradeid?: boolean
    gradecode?: boolean
    grade?: boolean
    created_date?: boolean
    created_by?: boolean
    updated_date?: boolean
    updated_by?: boolean
    csgi_class?: boolean | csgi_classFindManyArgs
  }

  export type csgi_gradeInclude = {
    csgi_class?: boolean | csgi_classFindManyArgs
  }

  export type csgi_gradeGetPayload<
    S extends boolean | null | undefined | csgi_gradeArgs,
    U = keyof S
      > = S extends true
        ? csgi_grade
    : S extends undefined
    ? never
    : S extends csgi_gradeArgs | csgi_gradeFindManyArgs
    ?'include' extends U
    ? csgi_grade  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'csgi_class'
        ? Array < csgi_classGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof csgi_grade ?csgi_grade [P]
  : 
          P extends 'csgi_class'
        ? Array < csgi_classGetPayload<S['select'][P]>>  : never
  } 
    : csgi_grade
  : csgi_grade


  type csgi_gradeCountArgs = Merge<
    Omit<csgi_gradeFindManyArgs, 'select' | 'include'> & {
      select?: Csgi_gradeCountAggregateInputType | true
    }
  >

  export interface csgi_gradeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Csgi_grade that matches the filter.
     * @param {csgi_gradeFindUniqueArgs} args - Arguments to find a Csgi_grade
     * @example
     * // Get one Csgi_grade
     * const csgi_grade = await prisma.csgi_grade.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends csgi_gradeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, csgi_gradeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'csgi_grade'> extends True ? CheckSelect<T, Prisma__csgi_gradeClient<csgi_grade>, Prisma__csgi_gradeClient<csgi_gradeGetPayload<T>>> : CheckSelect<T, Prisma__csgi_gradeClient<csgi_grade | null >, Prisma__csgi_gradeClient<csgi_gradeGetPayload<T> | null >>

    /**
     * Find the first Csgi_grade that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_gradeFindFirstArgs} args - Arguments to find a Csgi_grade
     * @example
     * // Get one Csgi_grade
     * const csgi_grade = await prisma.csgi_grade.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends csgi_gradeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, csgi_gradeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'csgi_grade'> extends True ? CheckSelect<T, Prisma__csgi_gradeClient<csgi_grade>, Prisma__csgi_gradeClient<csgi_gradeGetPayload<T>>> : CheckSelect<T, Prisma__csgi_gradeClient<csgi_grade | null >, Prisma__csgi_gradeClient<csgi_gradeGetPayload<T> | null >>

    /**
     * Find zero or more Csgi_grades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_gradeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Csgi_grades
     * const csgi_grades = await prisma.csgi_grade.findMany()
     * 
     * // Get first 10 Csgi_grades
     * const csgi_grades = await prisma.csgi_grade.findMany({ take: 10 })
     * 
     * // Only select the `gradeid`
     * const csgi_gradeWithGradeidOnly = await prisma.csgi_grade.findMany({ select: { gradeid: true } })
     * 
    **/
    findMany<T extends csgi_gradeFindManyArgs>(
      args?: SelectSubset<T, csgi_gradeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<csgi_grade>>, PrismaPromise<Array<csgi_gradeGetPayload<T>>>>

    /**
     * Create a Csgi_grade.
     * @param {csgi_gradeCreateArgs} args - Arguments to create a Csgi_grade.
     * @example
     * // Create one Csgi_grade
     * const Csgi_grade = await prisma.csgi_grade.create({
     *   data: {
     *     // ... data to create a Csgi_grade
     *   }
     * })
     * 
    **/
    create<T extends csgi_gradeCreateArgs>(
      args: SelectSubset<T, csgi_gradeCreateArgs>
    ): CheckSelect<T, Prisma__csgi_gradeClient<csgi_grade>, Prisma__csgi_gradeClient<csgi_gradeGetPayload<T>>>

    /**
     * Create many Csgi_grades.
     *     @param {csgi_gradeCreateManyArgs} args - Arguments to create many Csgi_grades.
     *     @example
     *     // Create many Csgi_grades
     *     const csgi_grade = await prisma.csgi_grade.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends csgi_gradeCreateManyArgs>(
      args?: SelectSubset<T, csgi_gradeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Csgi_grade.
     * @param {csgi_gradeDeleteArgs} args - Arguments to delete one Csgi_grade.
     * @example
     * // Delete one Csgi_grade
     * const Csgi_grade = await prisma.csgi_grade.delete({
     *   where: {
     *     // ... filter to delete one Csgi_grade
     *   }
     * })
     * 
    **/
    delete<T extends csgi_gradeDeleteArgs>(
      args: SelectSubset<T, csgi_gradeDeleteArgs>
    ): CheckSelect<T, Prisma__csgi_gradeClient<csgi_grade>, Prisma__csgi_gradeClient<csgi_gradeGetPayload<T>>>

    /**
     * Update one Csgi_grade.
     * @param {csgi_gradeUpdateArgs} args - Arguments to update one Csgi_grade.
     * @example
     * // Update one Csgi_grade
     * const csgi_grade = await prisma.csgi_grade.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends csgi_gradeUpdateArgs>(
      args: SelectSubset<T, csgi_gradeUpdateArgs>
    ): CheckSelect<T, Prisma__csgi_gradeClient<csgi_grade>, Prisma__csgi_gradeClient<csgi_gradeGetPayload<T>>>

    /**
     * Delete zero or more Csgi_grades.
     * @param {csgi_gradeDeleteManyArgs} args - Arguments to filter Csgi_grades to delete.
     * @example
     * // Delete a few Csgi_grades
     * const { count } = await prisma.csgi_grade.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends csgi_gradeDeleteManyArgs>(
      args?: SelectSubset<T, csgi_gradeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Csgi_grades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_gradeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Csgi_grades
     * const csgi_grade = await prisma.csgi_grade.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends csgi_gradeUpdateManyArgs>(
      args: SelectSubset<T, csgi_gradeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Csgi_grade.
     * @param {csgi_gradeUpsertArgs} args - Arguments to update or create a Csgi_grade.
     * @example
     * // Update or create a Csgi_grade
     * const csgi_grade = await prisma.csgi_grade.upsert({
     *   create: {
     *     // ... data to create a Csgi_grade
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Csgi_grade we want to update
     *   }
     * })
    **/
    upsert<T extends csgi_gradeUpsertArgs>(
      args: SelectSubset<T, csgi_gradeUpsertArgs>
    ): CheckSelect<T, Prisma__csgi_gradeClient<csgi_grade>, Prisma__csgi_gradeClient<csgi_gradeGetPayload<T>>>

    /**
     * Count the number of Csgi_grades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_gradeCountArgs} args - Arguments to filter Csgi_grades to count.
     * @example
     * // Count the number of Csgi_grades
     * const count = await prisma.csgi_grade.count({
     *   where: {
     *     // ... the filter for the Csgi_grades we want to count
     *   }
     * })
    **/
    count<T extends csgi_gradeCountArgs>(
      args?: Subset<T, csgi_gradeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Csgi_gradeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Csgi_grade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Csgi_gradeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Csgi_gradeAggregateArgs>(args: Subset<T, Csgi_gradeAggregateArgs>): PrismaPromise<GetCsgi_gradeAggregateType<T>>

    /**
     * Group by Csgi_grade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Csgi_gradeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Csgi_gradeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Csgi_gradeGroupByArgs['orderBy'] }
        : { orderBy?: Csgi_gradeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Csgi_gradeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCsgi_gradeGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for csgi_grade.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__csgi_gradeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    csgi_class<T extends csgi_classFindManyArgs = {}>(args?: Subset<T, csgi_classFindManyArgs>): CheckSelect<T, PrismaPromise<Array<csgi_class>>, PrismaPromise<Array<csgi_classGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * csgi_grade findUnique
   */
  export type csgi_gradeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the csgi_grade
    **/
    select?: csgi_gradeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_gradeInclude | null
    /**
     * Throw an Error if a csgi_grade can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which csgi_grade to fetch.
    **/
    where: csgi_gradeWhereUniqueInput
  }


  /**
   * csgi_grade findFirst
   */
  export type csgi_gradeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the csgi_grade
    **/
    select?: csgi_gradeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_gradeInclude | null
    /**
     * Throw an Error if a csgi_grade can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which csgi_grade to fetch.
    **/
    where?: csgi_gradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_grades to fetch.
    **/
    orderBy?: Enumerable<csgi_gradeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for csgi_grades.
    **/
    cursor?: csgi_gradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_grades from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_grades.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of csgi_grades.
    **/
    distinct?: Enumerable<Csgi_gradeScalarFieldEnum>
  }


  /**
   * csgi_grade findMany
   */
  export type csgi_gradeFindManyArgs = {
    /**
     * Select specific fields to fetch from the csgi_grade
    **/
    select?: csgi_gradeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_gradeInclude | null
    /**
     * Filter, which csgi_grades to fetch.
    **/
    where?: csgi_gradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_grades to fetch.
    **/
    orderBy?: Enumerable<csgi_gradeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing csgi_grades.
    **/
    cursor?: csgi_gradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_grades from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_grades.
    **/
    skip?: number
    distinct?: Enumerable<Csgi_gradeScalarFieldEnum>
  }


  /**
   * csgi_grade create
   */
  export type csgi_gradeCreateArgs = {
    /**
     * Select specific fields to fetch from the csgi_grade
    **/
    select?: csgi_gradeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_gradeInclude | null
    /**
     * The data needed to create a csgi_grade.
    **/
    data: XOR<csgi_gradeCreateInput, csgi_gradeUncheckedCreateInput>
  }


  /**
   * csgi_grade createMany
   */
  export type csgi_gradeCreateManyArgs = {
    data: Enumerable<csgi_gradeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * csgi_grade update
   */
  export type csgi_gradeUpdateArgs = {
    /**
     * Select specific fields to fetch from the csgi_grade
    **/
    select?: csgi_gradeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_gradeInclude | null
    /**
     * The data needed to update a csgi_grade.
    **/
    data: XOR<csgi_gradeUpdateInput, csgi_gradeUncheckedUpdateInput>
    /**
     * Choose, which csgi_grade to update.
    **/
    where: csgi_gradeWhereUniqueInput
  }


  /**
   * csgi_grade updateMany
   */
  export type csgi_gradeUpdateManyArgs = {
    data: XOR<csgi_gradeUpdateManyMutationInput, csgi_gradeUncheckedUpdateManyInput>
    where?: csgi_gradeWhereInput
  }


  /**
   * csgi_grade upsert
   */
  export type csgi_gradeUpsertArgs = {
    /**
     * Select specific fields to fetch from the csgi_grade
    **/
    select?: csgi_gradeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_gradeInclude | null
    /**
     * The filter to search for the csgi_grade to update in case it exists.
    **/
    where: csgi_gradeWhereUniqueInput
    /**
     * In case the csgi_grade found by the `where` argument doesn't exist, create a new csgi_grade with this data.
    **/
    create: XOR<csgi_gradeCreateInput, csgi_gradeUncheckedCreateInput>
    /**
     * In case the csgi_grade was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<csgi_gradeUpdateInput, csgi_gradeUncheckedUpdateInput>
  }


  /**
   * csgi_grade delete
   */
  export type csgi_gradeDeleteArgs = {
    /**
     * Select specific fields to fetch from the csgi_grade
    **/
    select?: csgi_gradeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_gradeInclude | null
    /**
     * Filter which csgi_grade to delete.
    **/
    where: csgi_gradeWhereUniqueInput
  }


  /**
   * csgi_grade deleteMany
   */
  export type csgi_gradeDeleteManyArgs = {
    where?: csgi_gradeWhereInput
  }


  /**
   * csgi_grade without action
   */
  export type csgi_gradeArgs = {
    /**
     * Select specific fields to fetch from the csgi_grade
    **/
    select?: csgi_gradeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_gradeInclude | null
  }



  /**
   * Model csgi_menu
   */


  export type AggregateCsgi_menu = {
    count: Csgi_menuCountAggregateOutputType | null
    avg: Csgi_menuAvgAggregateOutputType | null
    sum: Csgi_menuSumAggregateOutputType | null
    min: Csgi_menuMinAggregateOutputType | null
    max: Csgi_menuMaxAggregateOutputType | null
  }

  export type Csgi_menuAvgAggregateOutputType = {
    menuid: number | null
  }

  export type Csgi_menuSumAggregateOutputType = {
    menuid: number | null
  }

  export type Csgi_menuMinAggregateOutputType = {
    menuid: number | null
    menuname: string | null
    created_date: Date | null
    created_by: string | null
    updated_date: Date | null
    updated_by: string | null
  }

  export type Csgi_menuMaxAggregateOutputType = {
    menuid: number | null
    menuname: string | null
    created_date: Date | null
    created_by: string | null
    updated_date: Date | null
    updated_by: string | null
  }

  export type Csgi_menuCountAggregateOutputType = {
    menuid: number
    menuname: number
    created_date: number
    created_by: number
    updated_date: number
    updated_by: number
    _all: number
  }


  export type Csgi_menuAvgAggregateInputType = {
    menuid?: true
  }

  export type Csgi_menuSumAggregateInputType = {
    menuid?: true
  }

  export type Csgi_menuMinAggregateInputType = {
    menuid?: true
    menuname?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
  }

  export type Csgi_menuMaxAggregateInputType = {
    menuid?: true
    menuname?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
  }

  export type Csgi_menuCountAggregateInputType = {
    menuid?: true
    menuname?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
    _all?: true
  }

  export type Csgi_menuAggregateArgs = {
    /**
     * Filter which csgi_menu to aggregate.
    **/
    where?: csgi_menuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_menus to fetch.
    **/
    orderBy?: Enumerable<csgi_menuOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: csgi_menuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_menus from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_menus.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned csgi_menus
    **/
    count?: true | Csgi_menuCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Csgi_menuAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Csgi_menuSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Csgi_menuMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Csgi_menuMaxAggregateInputType
  }

  export type GetCsgi_menuAggregateType<T extends Csgi_menuAggregateArgs> = {
    [P in keyof T & keyof AggregateCsgi_menu]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCsgi_menu[P]>
      : GetScalarType<T[P], AggregateCsgi_menu[P]>
  }


    
    
  export type Csgi_menuGroupByArgs = {
    where?: csgi_menuWhereInput
    orderBy?: Enumerable<csgi_menuOrderByInput>
    by: Array<Csgi_menuScalarFieldEnum>
    having?: csgi_menuScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: Csgi_menuCountAggregateInputType | true
    avg?: Csgi_menuAvgAggregateInputType
    sum?: Csgi_menuSumAggregateInputType
    min?: Csgi_menuMinAggregateInputType
    max?: Csgi_menuMaxAggregateInputType
  }


  export type Csgi_menuGroupByOutputType = {
    menuid: number
    menuname: string
    created_date: Date
    created_by: string
    updated_date: Date | null
    updated_by: string | null
    count: Csgi_menuCountAggregateOutputType | null
    avg: Csgi_menuAvgAggregateOutputType | null
    sum: Csgi_menuSumAggregateOutputType | null
    min: Csgi_menuMinAggregateOutputType | null
    max: Csgi_menuMaxAggregateOutputType | null
  }

  type GetCsgi_menuGroupByPayload<T extends Csgi_menuGroupByArgs> = Promise<Array<
    PickArray<Csgi_menuGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof Csgi_menuGroupByOutputType))]: GetScalarType<T[P], Csgi_menuGroupByOutputType[P]>
    }
  >>
    

  export type csgi_menuSelect = {
    menuid?: boolean
    menuname?: boolean
    created_date?: boolean
    created_by?: boolean
    updated_date?: boolean
    updated_by?: boolean
    csgi_menu_item?: boolean | csgi_menu_itemFindManyArgs
  }

  export type csgi_menuInclude = {
    csgi_menu_item?: boolean | csgi_menu_itemFindManyArgs
  }

  export type csgi_menuGetPayload<
    S extends boolean | null | undefined | csgi_menuArgs,
    U = keyof S
      > = S extends true
        ? csgi_menu
    : S extends undefined
    ? never
    : S extends csgi_menuArgs | csgi_menuFindManyArgs
    ?'include' extends U
    ? csgi_menu  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'csgi_menu_item'
        ? Array < csgi_menu_itemGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof csgi_menu ?csgi_menu [P]
  : 
          P extends 'csgi_menu_item'
        ? Array < csgi_menu_itemGetPayload<S['select'][P]>>  : never
  } 
    : csgi_menu
  : csgi_menu


  type csgi_menuCountArgs = Merge<
    Omit<csgi_menuFindManyArgs, 'select' | 'include'> & {
      select?: Csgi_menuCountAggregateInputType | true
    }
  >

  export interface csgi_menuDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Csgi_menu that matches the filter.
     * @param {csgi_menuFindUniqueArgs} args - Arguments to find a Csgi_menu
     * @example
     * // Get one Csgi_menu
     * const csgi_menu = await prisma.csgi_menu.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends csgi_menuFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, csgi_menuFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'csgi_menu'> extends True ? CheckSelect<T, Prisma__csgi_menuClient<csgi_menu>, Prisma__csgi_menuClient<csgi_menuGetPayload<T>>> : CheckSelect<T, Prisma__csgi_menuClient<csgi_menu | null >, Prisma__csgi_menuClient<csgi_menuGetPayload<T> | null >>

    /**
     * Find the first Csgi_menu that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_menuFindFirstArgs} args - Arguments to find a Csgi_menu
     * @example
     * // Get one Csgi_menu
     * const csgi_menu = await prisma.csgi_menu.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends csgi_menuFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, csgi_menuFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'csgi_menu'> extends True ? CheckSelect<T, Prisma__csgi_menuClient<csgi_menu>, Prisma__csgi_menuClient<csgi_menuGetPayload<T>>> : CheckSelect<T, Prisma__csgi_menuClient<csgi_menu | null >, Prisma__csgi_menuClient<csgi_menuGetPayload<T> | null >>

    /**
     * Find zero or more Csgi_menus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_menuFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Csgi_menus
     * const csgi_menus = await prisma.csgi_menu.findMany()
     * 
     * // Get first 10 Csgi_menus
     * const csgi_menus = await prisma.csgi_menu.findMany({ take: 10 })
     * 
     * // Only select the `menuid`
     * const csgi_menuWithMenuidOnly = await prisma.csgi_menu.findMany({ select: { menuid: true } })
     * 
    **/
    findMany<T extends csgi_menuFindManyArgs>(
      args?: SelectSubset<T, csgi_menuFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<csgi_menu>>, PrismaPromise<Array<csgi_menuGetPayload<T>>>>

    /**
     * Create a Csgi_menu.
     * @param {csgi_menuCreateArgs} args - Arguments to create a Csgi_menu.
     * @example
     * // Create one Csgi_menu
     * const Csgi_menu = await prisma.csgi_menu.create({
     *   data: {
     *     // ... data to create a Csgi_menu
     *   }
     * })
     * 
    **/
    create<T extends csgi_menuCreateArgs>(
      args: SelectSubset<T, csgi_menuCreateArgs>
    ): CheckSelect<T, Prisma__csgi_menuClient<csgi_menu>, Prisma__csgi_menuClient<csgi_menuGetPayload<T>>>

    /**
     * Create many Csgi_menus.
     *     @param {csgi_menuCreateManyArgs} args - Arguments to create many Csgi_menus.
     *     @example
     *     // Create many Csgi_menus
     *     const csgi_menu = await prisma.csgi_menu.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends csgi_menuCreateManyArgs>(
      args?: SelectSubset<T, csgi_menuCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Csgi_menu.
     * @param {csgi_menuDeleteArgs} args - Arguments to delete one Csgi_menu.
     * @example
     * // Delete one Csgi_menu
     * const Csgi_menu = await prisma.csgi_menu.delete({
     *   where: {
     *     // ... filter to delete one Csgi_menu
     *   }
     * })
     * 
    **/
    delete<T extends csgi_menuDeleteArgs>(
      args: SelectSubset<T, csgi_menuDeleteArgs>
    ): CheckSelect<T, Prisma__csgi_menuClient<csgi_menu>, Prisma__csgi_menuClient<csgi_menuGetPayload<T>>>

    /**
     * Update one Csgi_menu.
     * @param {csgi_menuUpdateArgs} args - Arguments to update one Csgi_menu.
     * @example
     * // Update one Csgi_menu
     * const csgi_menu = await prisma.csgi_menu.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends csgi_menuUpdateArgs>(
      args: SelectSubset<T, csgi_menuUpdateArgs>
    ): CheckSelect<T, Prisma__csgi_menuClient<csgi_menu>, Prisma__csgi_menuClient<csgi_menuGetPayload<T>>>

    /**
     * Delete zero or more Csgi_menus.
     * @param {csgi_menuDeleteManyArgs} args - Arguments to filter Csgi_menus to delete.
     * @example
     * // Delete a few Csgi_menus
     * const { count } = await prisma.csgi_menu.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends csgi_menuDeleteManyArgs>(
      args?: SelectSubset<T, csgi_menuDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Csgi_menus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_menuUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Csgi_menus
     * const csgi_menu = await prisma.csgi_menu.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends csgi_menuUpdateManyArgs>(
      args: SelectSubset<T, csgi_menuUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Csgi_menu.
     * @param {csgi_menuUpsertArgs} args - Arguments to update or create a Csgi_menu.
     * @example
     * // Update or create a Csgi_menu
     * const csgi_menu = await prisma.csgi_menu.upsert({
     *   create: {
     *     // ... data to create a Csgi_menu
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Csgi_menu we want to update
     *   }
     * })
    **/
    upsert<T extends csgi_menuUpsertArgs>(
      args: SelectSubset<T, csgi_menuUpsertArgs>
    ): CheckSelect<T, Prisma__csgi_menuClient<csgi_menu>, Prisma__csgi_menuClient<csgi_menuGetPayload<T>>>

    /**
     * Count the number of Csgi_menus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_menuCountArgs} args - Arguments to filter Csgi_menus to count.
     * @example
     * // Count the number of Csgi_menus
     * const count = await prisma.csgi_menu.count({
     *   where: {
     *     // ... the filter for the Csgi_menus we want to count
     *   }
     * })
    **/
    count<T extends csgi_menuCountArgs>(
      args?: Subset<T, csgi_menuCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Csgi_menuCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Csgi_menu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Csgi_menuAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Csgi_menuAggregateArgs>(args: Subset<T, Csgi_menuAggregateArgs>): PrismaPromise<GetCsgi_menuAggregateType<T>>

    /**
     * Group by Csgi_menu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Csgi_menuGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Csgi_menuGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Csgi_menuGroupByArgs['orderBy'] }
        : { orderBy?: Csgi_menuGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Csgi_menuGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCsgi_menuGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for csgi_menu.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__csgi_menuClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    csgi_menu_item<T extends csgi_menu_itemFindManyArgs = {}>(args?: Subset<T, csgi_menu_itemFindManyArgs>): CheckSelect<T, PrismaPromise<Array<csgi_menu_item>>, PrismaPromise<Array<csgi_menu_itemGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * csgi_menu findUnique
   */
  export type csgi_menuFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the csgi_menu
    **/
    select?: csgi_menuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_menuInclude | null
    /**
     * Throw an Error if a csgi_menu can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which csgi_menu to fetch.
    **/
    where: csgi_menuWhereUniqueInput
  }


  /**
   * csgi_menu findFirst
   */
  export type csgi_menuFindFirstArgs = {
    /**
     * Select specific fields to fetch from the csgi_menu
    **/
    select?: csgi_menuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_menuInclude | null
    /**
     * Throw an Error if a csgi_menu can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which csgi_menu to fetch.
    **/
    where?: csgi_menuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_menus to fetch.
    **/
    orderBy?: Enumerable<csgi_menuOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for csgi_menus.
    **/
    cursor?: csgi_menuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_menus from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_menus.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of csgi_menus.
    **/
    distinct?: Enumerable<Csgi_menuScalarFieldEnum>
  }


  /**
   * csgi_menu findMany
   */
  export type csgi_menuFindManyArgs = {
    /**
     * Select specific fields to fetch from the csgi_menu
    **/
    select?: csgi_menuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_menuInclude | null
    /**
     * Filter, which csgi_menus to fetch.
    **/
    where?: csgi_menuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_menus to fetch.
    **/
    orderBy?: Enumerable<csgi_menuOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing csgi_menus.
    **/
    cursor?: csgi_menuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_menus from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_menus.
    **/
    skip?: number
    distinct?: Enumerable<Csgi_menuScalarFieldEnum>
  }


  /**
   * csgi_menu create
   */
  export type csgi_menuCreateArgs = {
    /**
     * Select specific fields to fetch from the csgi_menu
    **/
    select?: csgi_menuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_menuInclude | null
    /**
     * The data needed to create a csgi_menu.
    **/
    data: XOR<csgi_menuCreateInput, csgi_menuUncheckedCreateInput>
  }


  /**
   * csgi_menu createMany
   */
  export type csgi_menuCreateManyArgs = {
    data: Enumerable<csgi_menuCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * csgi_menu update
   */
  export type csgi_menuUpdateArgs = {
    /**
     * Select specific fields to fetch from the csgi_menu
    **/
    select?: csgi_menuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_menuInclude | null
    /**
     * The data needed to update a csgi_menu.
    **/
    data: XOR<csgi_menuUpdateInput, csgi_menuUncheckedUpdateInput>
    /**
     * Choose, which csgi_menu to update.
    **/
    where: csgi_menuWhereUniqueInput
  }


  /**
   * csgi_menu updateMany
   */
  export type csgi_menuUpdateManyArgs = {
    data: XOR<csgi_menuUpdateManyMutationInput, csgi_menuUncheckedUpdateManyInput>
    where?: csgi_menuWhereInput
  }


  /**
   * csgi_menu upsert
   */
  export type csgi_menuUpsertArgs = {
    /**
     * Select specific fields to fetch from the csgi_menu
    **/
    select?: csgi_menuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_menuInclude | null
    /**
     * The filter to search for the csgi_menu to update in case it exists.
    **/
    where: csgi_menuWhereUniqueInput
    /**
     * In case the csgi_menu found by the `where` argument doesn't exist, create a new csgi_menu with this data.
    **/
    create: XOR<csgi_menuCreateInput, csgi_menuUncheckedCreateInput>
    /**
     * In case the csgi_menu was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<csgi_menuUpdateInput, csgi_menuUncheckedUpdateInput>
  }


  /**
   * csgi_menu delete
   */
  export type csgi_menuDeleteArgs = {
    /**
     * Select specific fields to fetch from the csgi_menu
    **/
    select?: csgi_menuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_menuInclude | null
    /**
     * Filter which csgi_menu to delete.
    **/
    where: csgi_menuWhereUniqueInput
  }


  /**
   * csgi_menu deleteMany
   */
  export type csgi_menuDeleteManyArgs = {
    where?: csgi_menuWhereInput
  }


  /**
   * csgi_menu without action
   */
  export type csgi_menuArgs = {
    /**
     * Select specific fields to fetch from the csgi_menu
    **/
    select?: csgi_menuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_menuInclude | null
  }



  /**
   * Model csgi_menu_item
   */


  export type AggregateCsgi_menu_item = {
    count: Csgi_menu_itemCountAggregateOutputType | null
    avg: Csgi_menu_itemAvgAggregateOutputType | null
    sum: Csgi_menu_itemSumAggregateOutputType | null
    min: Csgi_menu_itemMinAggregateOutputType | null
    max: Csgi_menu_itemMaxAggregateOutputType | null
  }

  export type Csgi_menu_itemAvgAggregateOutputType = {
    itemid: number | null
    menuid: number | null
  }

  export type Csgi_menu_itemSumAggregateOutputType = {
    itemid: number | null
    menuid: number | null
  }

  export type Csgi_menu_itemMinAggregateOutputType = {
    itemid: number | null
    itemname: string | null
    menuid: number | null
    created_date: Date | null
    created_by: string | null
    updated_date: Date | null
    updated_by: string | null
  }

  export type Csgi_menu_itemMaxAggregateOutputType = {
    itemid: number | null
    itemname: string | null
    menuid: number | null
    created_date: Date | null
    created_by: string | null
    updated_date: Date | null
    updated_by: string | null
  }

  export type Csgi_menu_itemCountAggregateOutputType = {
    itemid: number
    itemname: number
    menuid: number
    created_date: number
    created_by: number
    updated_date: number
    updated_by: number
    _all: number
  }


  export type Csgi_menu_itemAvgAggregateInputType = {
    itemid?: true
    menuid?: true
  }

  export type Csgi_menu_itemSumAggregateInputType = {
    itemid?: true
    menuid?: true
  }

  export type Csgi_menu_itemMinAggregateInputType = {
    itemid?: true
    itemname?: true
    menuid?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
  }

  export type Csgi_menu_itemMaxAggregateInputType = {
    itemid?: true
    itemname?: true
    menuid?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
  }

  export type Csgi_menu_itemCountAggregateInputType = {
    itemid?: true
    itemname?: true
    menuid?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
    _all?: true
  }

  export type Csgi_menu_itemAggregateArgs = {
    /**
     * Filter which csgi_menu_item to aggregate.
    **/
    where?: csgi_menu_itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_menu_items to fetch.
    **/
    orderBy?: Enumerable<csgi_menu_itemOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: csgi_menu_itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_menu_items from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_menu_items.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned csgi_menu_items
    **/
    count?: true | Csgi_menu_itemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Csgi_menu_itemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Csgi_menu_itemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Csgi_menu_itemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Csgi_menu_itemMaxAggregateInputType
  }

  export type GetCsgi_menu_itemAggregateType<T extends Csgi_menu_itemAggregateArgs> = {
    [P in keyof T & keyof AggregateCsgi_menu_item]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCsgi_menu_item[P]>
      : GetScalarType<T[P], AggregateCsgi_menu_item[P]>
  }


    
    
  export type Csgi_menu_itemGroupByArgs = {
    where?: csgi_menu_itemWhereInput
    orderBy?: Enumerable<csgi_menu_itemOrderByInput>
    by: Array<Csgi_menu_itemScalarFieldEnum>
    having?: csgi_menu_itemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: Csgi_menu_itemCountAggregateInputType | true
    avg?: Csgi_menu_itemAvgAggregateInputType
    sum?: Csgi_menu_itemSumAggregateInputType
    min?: Csgi_menu_itemMinAggregateInputType
    max?: Csgi_menu_itemMaxAggregateInputType
  }


  export type Csgi_menu_itemGroupByOutputType = {
    itemid: number
    itemname: string
    menuid: number | null
    created_date: Date
    created_by: string
    updated_date: Date | null
    updated_by: string | null
    count: Csgi_menu_itemCountAggregateOutputType | null
    avg: Csgi_menu_itemAvgAggregateOutputType | null
    sum: Csgi_menu_itemSumAggregateOutputType | null
    min: Csgi_menu_itemMinAggregateOutputType | null
    max: Csgi_menu_itemMaxAggregateOutputType | null
  }

  type GetCsgi_menu_itemGroupByPayload<T extends Csgi_menu_itemGroupByArgs> = Promise<Array<
    PickArray<Csgi_menu_itemGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof Csgi_menu_itemGroupByOutputType))]: GetScalarType<T[P], Csgi_menu_itemGroupByOutputType[P]>
    }
  >>
    

  export type csgi_menu_itemSelect = {
    itemid?: boolean
    itemname?: boolean
    menuid?: boolean
    created_date?: boolean
    created_by?: boolean
    updated_date?: boolean
    updated_by?: boolean
    csgi_menu?: boolean | csgi_menuArgs
    csgi_menu_role?: boolean | csgi_menu_roleFindManyArgs
  }

  export type csgi_menu_itemInclude = {
    csgi_menu?: boolean | csgi_menuArgs
    csgi_menu_role?: boolean | csgi_menu_roleFindManyArgs
  }

  export type csgi_menu_itemGetPayload<
    S extends boolean | null | undefined | csgi_menu_itemArgs,
    U = keyof S
      > = S extends true
        ? csgi_menu_item
    : S extends undefined
    ? never
    : S extends csgi_menu_itemArgs | csgi_menu_itemFindManyArgs
    ?'include' extends U
    ? csgi_menu_item  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'csgi_menu'
        ? csgi_menuGetPayload<S['include'][P]> | null :
        P extends 'csgi_menu_role'
        ? Array < csgi_menu_roleGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof csgi_menu_item ?csgi_menu_item [P]
  : 
          P extends 'csgi_menu'
        ? csgi_menuGetPayload<S['select'][P]> | null :
        P extends 'csgi_menu_role'
        ? Array < csgi_menu_roleGetPayload<S['select'][P]>>  : never
  } 
    : csgi_menu_item
  : csgi_menu_item


  type csgi_menu_itemCountArgs = Merge<
    Omit<csgi_menu_itemFindManyArgs, 'select' | 'include'> & {
      select?: Csgi_menu_itemCountAggregateInputType | true
    }
  >

  export interface csgi_menu_itemDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Csgi_menu_item that matches the filter.
     * @param {csgi_menu_itemFindUniqueArgs} args - Arguments to find a Csgi_menu_item
     * @example
     * // Get one Csgi_menu_item
     * const csgi_menu_item = await prisma.csgi_menu_item.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends csgi_menu_itemFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, csgi_menu_itemFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'csgi_menu_item'> extends True ? CheckSelect<T, Prisma__csgi_menu_itemClient<csgi_menu_item>, Prisma__csgi_menu_itemClient<csgi_menu_itemGetPayload<T>>> : CheckSelect<T, Prisma__csgi_menu_itemClient<csgi_menu_item | null >, Prisma__csgi_menu_itemClient<csgi_menu_itemGetPayload<T> | null >>

    /**
     * Find the first Csgi_menu_item that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_menu_itemFindFirstArgs} args - Arguments to find a Csgi_menu_item
     * @example
     * // Get one Csgi_menu_item
     * const csgi_menu_item = await prisma.csgi_menu_item.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends csgi_menu_itemFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, csgi_menu_itemFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'csgi_menu_item'> extends True ? CheckSelect<T, Prisma__csgi_menu_itemClient<csgi_menu_item>, Prisma__csgi_menu_itemClient<csgi_menu_itemGetPayload<T>>> : CheckSelect<T, Prisma__csgi_menu_itemClient<csgi_menu_item | null >, Prisma__csgi_menu_itemClient<csgi_menu_itemGetPayload<T> | null >>

    /**
     * Find zero or more Csgi_menu_items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_menu_itemFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Csgi_menu_items
     * const csgi_menu_items = await prisma.csgi_menu_item.findMany()
     * 
     * // Get first 10 Csgi_menu_items
     * const csgi_menu_items = await prisma.csgi_menu_item.findMany({ take: 10 })
     * 
     * // Only select the `itemid`
     * const csgi_menu_itemWithItemidOnly = await prisma.csgi_menu_item.findMany({ select: { itemid: true } })
     * 
    **/
    findMany<T extends csgi_menu_itemFindManyArgs>(
      args?: SelectSubset<T, csgi_menu_itemFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<csgi_menu_item>>, PrismaPromise<Array<csgi_menu_itemGetPayload<T>>>>

    /**
     * Create a Csgi_menu_item.
     * @param {csgi_menu_itemCreateArgs} args - Arguments to create a Csgi_menu_item.
     * @example
     * // Create one Csgi_menu_item
     * const Csgi_menu_item = await prisma.csgi_menu_item.create({
     *   data: {
     *     // ... data to create a Csgi_menu_item
     *   }
     * })
     * 
    **/
    create<T extends csgi_menu_itemCreateArgs>(
      args: SelectSubset<T, csgi_menu_itemCreateArgs>
    ): CheckSelect<T, Prisma__csgi_menu_itemClient<csgi_menu_item>, Prisma__csgi_menu_itemClient<csgi_menu_itemGetPayload<T>>>

    /**
     * Create many Csgi_menu_items.
     *     @param {csgi_menu_itemCreateManyArgs} args - Arguments to create many Csgi_menu_items.
     *     @example
     *     // Create many Csgi_menu_items
     *     const csgi_menu_item = await prisma.csgi_menu_item.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends csgi_menu_itemCreateManyArgs>(
      args?: SelectSubset<T, csgi_menu_itemCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Csgi_menu_item.
     * @param {csgi_menu_itemDeleteArgs} args - Arguments to delete one Csgi_menu_item.
     * @example
     * // Delete one Csgi_menu_item
     * const Csgi_menu_item = await prisma.csgi_menu_item.delete({
     *   where: {
     *     // ... filter to delete one Csgi_menu_item
     *   }
     * })
     * 
    **/
    delete<T extends csgi_menu_itemDeleteArgs>(
      args: SelectSubset<T, csgi_menu_itemDeleteArgs>
    ): CheckSelect<T, Prisma__csgi_menu_itemClient<csgi_menu_item>, Prisma__csgi_menu_itemClient<csgi_menu_itemGetPayload<T>>>

    /**
     * Update one Csgi_menu_item.
     * @param {csgi_menu_itemUpdateArgs} args - Arguments to update one Csgi_menu_item.
     * @example
     * // Update one Csgi_menu_item
     * const csgi_menu_item = await prisma.csgi_menu_item.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends csgi_menu_itemUpdateArgs>(
      args: SelectSubset<T, csgi_menu_itemUpdateArgs>
    ): CheckSelect<T, Prisma__csgi_menu_itemClient<csgi_menu_item>, Prisma__csgi_menu_itemClient<csgi_menu_itemGetPayload<T>>>

    /**
     * Delete zero or more Csgi_menu_items.
     * @param {csgi_menu_itemDeleteManyArgs} args - Arguments to filter Csgi_menu_items to delete.
     * @example
     * // Delete a few Csgi_menu_items
     * const { count } = await prisma.csgi_menu_item.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends csgi_menu_itemDeleteManyArgs>(
      args?: SelectSubset<T, csgi_menu_itemDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Csgi_menu_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_menu_itemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Csgi_menu_items
     * const csgi_menu_item = await prisma.csgi_menu_item.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends csgi_menu_itemUpdateManyArgs>(
      args: SelectSubset<T, csgi_menu_itemUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Csgi_menu_item.
     * @param {csgi_menu_itemUpsertArgs} args - Arguments to update or create a Csgi_menu_item.
     * @example
     * // Update or create a Csgi_menu_item
     * const csgi_menu_item = await prisma.csgi_menu_item.upsert({
     *   create: {
     *     // ... data to create a Csgi_menu_item
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Csgi_menu_item we want to update
     *   }
     * })
    **/
    upsert<T extends csgi_menu_itemUpsertArgs>(
      args: SelectSubset<T, csgi_menu_itemUpsertArgs>
    ): CheckSelect<T, Prisma__csgi_menu_itemClient<csgi_menu_item>, Prisma__csgi_menu_itemClient<csgi_menu_itemGetPayload<T>>>

    /**
     * Count the number of Csgi_menu_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_menu_itemCountArgs} args - Arguments to filter Csgi_menu_items to count.
     * @example
     * // Count the number of Csgi_menu_items
     * const count = await prisma.csgi_menu_item.count({
     *   where: {
     *     // ... the filter for the Csgi_menu_items we want to count
     *   }
     * })
    **/
    count<T extends csgi_menu_itemCountArgs>(
      args?: Subset<T, csgi_menu_itemCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Csgi_menu_itemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Csgi_menu_item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Csgi_menu_itemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Csgi_menu_itemAggregateArgs>(args: Subset<T, Csgi_menu_itemAggregateArgs>): PrismaPromise<GetCsgi_menu_itemAggregateType<T>>

    /**
     * Group by Csgi_menu_item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Csgi_menu_itemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Csgi_menu_itemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Csgi_menu_itemGroupByArgs['orderBy'] }
        : { orderBy?: Csgi_menu_itemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Csgi_menu_itemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCsgi_menu_itemGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for csgi_menu_item.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__csgi_menu_itemClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    csgi_menu<T extends csgi_menuArgs = {}>(args?: Subset<T, csgi_menuArgs>): CheckSelect<T, Prisma__csgi_menuClient<csgi_menu | null >, Prisma__csgi_menuClient<csgi_menuGetPayload<T> | null >>;

    csgi_menu_role<T extends csgi_menu_roleFindManyArgs = {}>(args?: Subset<T, csgi_menu_roleFindManyArgs>): CheckSelect<T, PrismaPromise<Array<csgi_menu_role>>, PrismaPromise<Array<csgi_menu_roleGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * csgi_menu_item findUnique
   */
  export type csgi_menu_itemFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the csgi_menu_item
    **/
    select?: csgi_menu_itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_menu_itemInclude | null
    /**
     * Throw an Error if a csgi_menu_item can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which csgi_menu_item to fetch.
    **/
    where: csgi_menu_itemWhereUniqueInput
  }


  /**
   * csgi_menu_item findFirst
   */
  export type csgi_menu_itemFindFirstArgs = {
    /**
     * Select specific fields to fetch from the csgi_menu_item
    **/
    select?: csgi_menu_itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_menu_itemInclude | null
    /**
     * Throw an Error if a csgi_menu_item can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which csgi_menu_item to fetch.
    **/
    where?: csgi_menu_itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_menu_items to fetch.
    **/
    orderBy?: Enumerable<csgi_menu_itemOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for csgi_menu_items.
    **/
    cursor?: csgi_menu_itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_menu_items from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_menu_items.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of csgi_menu_items.
    **/
    distinct?: Enumerable<Csgi_menu_itemScalarFieldEnum>
  }


  /**
   * csgi_menu_item findMany
   */
  export type csgi_menu_itemFindManyArgs = {
    /**
     * Select specific fields to fetch from the csgi_menu_item
    **/
    select?: csgi_menu_itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_menu_itemInclude | null
    /**
     * Filter, which csgi_menu_items to fetch.
    **/
    where?: csgi_menu_itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_menu_items to fetch.
    **/
    orderBy?: Enumerable<csgi_menu_itemOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing csgi_menu_items.
    **/
    cursor?: csgi_menu_itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_menu_items from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_menu_items.
    **/
    skip?: number
    distinct?: Enumerable<Csgi_menu_itemScalarFieldEnum>
  }


  /**
   * csgi_menu_item create
   */
  export type csgi_menu_itemCreateArgs = {
    /**
     * Select specific fields to fetch from the csgi_menu_item
    **/
    select?: csgi_menu_itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_menu_itemInclude | null
    /**
     * The data needed to create a csgi_menu_item.
    **/
    data: XOR<csgi_menu_itemCreateInput, csgi_menu_itemUncheckedCreateInput>
  }


  /**
   * csgi_menu_item createMany
   */
  export type csgi_menu_itemCreateManyArgs = {
    data: Enumerable<csgi_menu_itemCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * csgi_menu_item update
   */
  export type csgi_menu_itemUpdateArgs = {
    /**
     * Select specific fields to fetch from the csgi_menu_item
    **/
    select?: csgi_menu_itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_menu_itemInclude | null
    /**
     * The data needed to update a csgi_menu_item.
    **/
    data: XOR<csgi_menu_itemUpdateInput, csgi_menu_itemUncheckedUpdateInput>
    /**
     * Choose, which csgi_menu_item to update.
    **/
    where: csgi_menu_itemWhereUniqueInput
  }


  /**
   * csgi_menu_item updateMany
   */
  export type csgi_menu_itemUpdateManyArgs = {
    data: XOR<csgi_menu_itemUpdateManyMutationInput, csgi_menu_itemUncheckedUpdateManyInput>
    where?: csgi_menu_itemWhereInput
  }


  /**
   * csgi_menu_item upsert
   */
  export type csgi_menu_itemUpsertArgs = {
    /**
     * Select specific fields to fetch from the csgi_menu_item
    **/
    select?: csgi_menu_itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_menu_itemInclude | null
    /**
     * The filter to search for the csgi_menu_item to update in case it exists.
    **/
    where: csgi_menu_itemWhereUniqueInput
    /**
     * In case the csgi_menu_item found by the `where` argument doesn't exist, create a new csgi_menu_item with this data.
    **/
    create: XOR<csgi_menu_itemCreateInput, csgi_menu_itemUncheckedCreateInput>
    /**
     * In case the csgi_menu_item was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<csgi_menu_itemUpdateInput, csgi_menu_itemUncheckedUpdateInput>
  }


  /**
   * csgi_menu_item delete
   */
  export type csgi_menu_itemDeleteArgs = {
    /**
     * Select specific fields to fetch from the csgi_menu_item
    **/
    select?: csgi_menu_itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_menu_itemInclude | null
    /**
     * Filter which csgi_menu_item to delete.
    **/
    where: csgi_menu_itemWhereUniqueInput
  }


  /**
   * csgi_menu_item deleteMany
   */
  export type csgi_menu_itemDeleteManyArgs = {
    where?: csgi_menu_itemWhereInput
  }


  /**
   * csgi_menu_item without action
   */
  export type csgi_menu_itemArgs = {
    /**
     * Select specific fields to fetch from the csgi_menu_item
    **/
    select?: csgi_menu_itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_menu_itemInclude | null
  }



  /**
   * Model csgi_menu_role
   */


  export type AggregateCsgi_menu_role = {
    count: Csgi_menu_roleCountAggregateOutputType | null
    avg: Csgi_menu_roleAvgAggregateOutputType | null
    sum: Csgi_menu_roleSumAggregateOutputType | null
    min: Csgi_menu_roleMinAggregateOutputType | null
    max: Csgi_menu_roleMaxAggregateOutputType | null
  }

  export type Csgi_menu_roleAvgAggregateOutputType = {
    menu_roleid: number | null
    roleid: number | null
    itemid: number | null
  }

  export type Csgi_menu_roleSumAggregateOutputType = {
    menu_roleid: number | null
    roleid: number | null
    itemid: number | null
  }

  export type Csgi_menu_roleMinAggregateOutputType = {
    menu_roleid: number | null
    roleid: number | null
    itemid: number | null
    created_date: Date | null
    created_by: string | null
    updated_date: Date | null
    updated_by: string | null
  }

  export type Csgi_menu_roleMaxAggregateOutputType = {
    menu_roleid: number | null
    roleid: number | null
    itemid: number | null
    created_date: Date | null
    created_by: string | null
    updated_date: Date | null
    updated_by: string | null
  }

  export type Csgi_menu_roleCountAggregateOutputType = {
    menu_roleid: number
    roleid: number
    itemid: number
    created_date: number
    created_by: number
    updated_date: number
    updated_by: number
    _all: number
  }


  export type Csgi_menu_roleAvgAggregateInputType = {
    menu_roleid?: true
    roleid?: true
    itemid?: true
  }

  export type Csgi_menu_roleSumAggregateInputType = {
    menu_roleid?: true
    roleid?: true
    itemid?: true
  }

  export type Csgi_menu_roleMinAggregateInputType = {
    menu_roleid?: true
    roleid?: true
    itemid?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
  }

  export type Csgi_menu_roleMaxAggregateInputType = {
    menu_roleid?: true
    roleid?: true
    itemid?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
  }

  export type Csgi_menu_roleCountAggregateInputType = {
    menu_roleid?: true
    roleid?: true
    itemid?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
    _all?: true
  }

  export type Csgi_menu_roleAggregateArgs = {
    /**
     * Filter which csgi_menu_role to aggregate.
    **/
    where?: csgi_menu_roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_menu_roles to fetch.
    **/
    orderBy?: Enumerable<csgi_menu_roleOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: csgi_menu_roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_menu_roles from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_menu_roles.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned csgi_menu_roles
    **/
    count?: true | Csgi_menu_roleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Csgi_menu_roleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Csgi_menu_roleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Csgi_menu_roleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Csgi_menu_roleMaxAggregateInputType
  }

  export type GetCsgi_menu_roleAggregateType<T extends Csgi_menu_roleAggregateArgs> = {
    [P in keyof T & keyof AggregateCsgi_menu_role]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCsgi_menu_role[P]>
      : GetScalarType<T[P], AggregateCsgi_menu_role[P]>
  }


    
    
  export type Csgi_menu_roleGroupByArgs = {
    where?: csgi_menu_roleWhereInput
    orderBy?: Enumerable<csgi_menu_roleOrderByInput>
    by: Array<Csgi_menu_roleScalarFieldEnum>
    having?: csgi_menu_roleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: Csgi_menu_roleCountAggregateInputType | true
    avg?: Csgi_menu_roleAvgAggregateInputType
    sum?: Csgi_menu_roleSumAggregateInputType
    min?: Csgi_menu_roleMinAggregateInputType
    max?: Csgi_menu_roleMaxAggregateInputType
  }


  export type Csgi_menu_roleGroupByOutputType = {
    menu_roleid: number
    roleid: number
    itemid: number
    created_date: Date
    created_by: string
    updated_date: Date | null
    updated_by: string | null
    count: Csgi_menu_roleCountAggregateOutputType | null
    avg: Csgi_menu_roleAvgAggregateOutputType | null
    sum: Csgi_menu_roleSumAggregateOutputType | null
    min: Csgi_menu_roleMinAggregateOutputType | null
    max: Csgi_menu_roleMaxAggregateOutputType | null
  }

  type GetCsgi_menu_roleGroupByPayload<T extends Csgi_menu_roleGroupByArgs> = Promise<Array<
    PickArray<Csgi_menu_roleGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof Csgi_menu_roleGroupByOutputType))]: GetScalarType<T[P], Csgi_menu_roleGroupByOutputType[P]>
    }
  >>
    

  export type csgi_menu_roleSelect = {
    menu_roleid?: boolean
    roleid?: boolean
    itemid?: boolean
    created_date?: boolean
    created_by?: boolean
    updated_date?: boolean
    updated_by?: boolean
    csgi_menu_item?: boolean | csgi_menu_itemArgs
    csgi_role?: boolean | csgi_roleArgs
  }

  export type csgi_menu_roleInclude = {
    csgi_menu_item?: boolean | csgi_menu_itemArgs
    csgi_role?: boolean | csgi_roleArgs
  }

  export type csgi_menu_roleGetPayload<
    S extends boolean | null | undefined | csgi_menu_roleArgs,
    U = keyof S
      > = S extends true
        ? csgi_menu_role
    : S extends undefined
    ? never
    : S extends csgi_menu_roleArgs | csgi_menu_roleFindManyArgs
    ?'include' extends U
    ? csgi_menu_role  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'csgi_menu_item'
        ? csgi_menu_itemGetPayload<S['include'][P]> :
        P extends 'csgi_role'
        ? csgi_roleGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof csgi_menu_role ?csgi_menu_role [P]
  : 
          P extends 'csgi_menu_item'
        ? csgi_menu_itemGetPayload<S['select'][P]> :
        P extends 'csgi_role'
        ? csgi_roleGetPayload<S['select'][P]> : never
  } 
    : csgi_menu_role
  : csgi_menu_role


  type csgi_menu_roleCountArgs = Merge<
    Omit<csgi_menu_roleFindManyArgs, 'select' | 'include'> & {
      select?: Csgi_menu_roleCountAggregateInputType | true
    }
  >

  export interface csgi_menu_roleDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Csgi_menu_role that matches the filter.
     * @param {csgi_menu_roleFindUniqueArgs} args - Arguments to find a Csgi_menu_role
     * @example
     * // Get one Csgi_menu_role
     * const csgi_menu_role = await prisma.csgi_menu_role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends csgi_menu_roleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, csgi_menu_roleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'csgi_menu_role'> extends True ? CheckSelect<T, Prisma__csgi_menu_roleClient<csgi_menu_role>, Prisma__csgi_menu_roleClient<csgi_menu_roleGetPayload<T>>> : CheckSelect<T, Prisma__csgi_menu_roleClient<csgi_menu_role | null >, Prisma__csgi_menu_roleClient<csgi_menu_roleGetPayload<T> | null >>

    /**
     * Find the first Csgi_menu_role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_menu_roleFindFirstArgs} args - Arguments to find a Csgi_menu_role
     * @example
     * // Get one Csgi_menu_role
     * const csgi_menu_role = await prisma.csgi_menu_role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends csgi_menu_roleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, csgi_menu_roleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'csgi_menu_role'> extends True ? CheckSelect<T, Prisma__csgi_menu_roleClient<csgi_menu_role>, Prisma__csgi_menu_roleClient<csgi_menu_roleGetPayload<T>>> : CheckSelect<T, Prisma__csgi_menu_roleClient<csgi_menu_role | null >, Prisma__csgi_menu_roleClient<csgi_menu_roleGetPayload<T> | null >>

    /**
     * Find zero or more Csgi_menu_roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_menu_roleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Csgi_menu_roles
     * const csgi_menu_roles = await prisma.csgi_menu_role.findMany()
     * 
     * // Get first 10 Csgi_menu_roles
     * const csgi_menu_roles = await prisma.csgi_menu_role.findMany({ take: 10 })
     * 
     * // Only select the `menu_roleid`
     * const csgi_menu_roleWithMenu_roleidOnly = await prisma.csgi_menu_role.findMany({ select: { menu_roleid: true } })
     * 
    **/
    findMany<T extends csgi_menu_roleFindManyArgs>(
      args?: SelectSubset<T, csgi_menu_roleFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<csgi_menu_role>>, PrismaPromise<Array<csgi_menu_roleGetPayload<T>>>>

    /**
     * Create a Csgi_menu_role.
     * @param {csgi_menu_roleCreateArgs} args - Arguments to create a Csgi_menu_role.
     * @example
     * // Create one Csgi_menu_role
     * const Csgi_menu_role = await prisma.csgi_menu_role.create({
     *   data: {
     *     // ... data to create a Csgi_menu_role
     *   }
     * })
     * 
    **/
    create<T extends csgi_menu_roleCreateArgs>(
      args: SelectSubset<T, csgi_menu_roleCreateArgs>
    ): CheckSelect<T, Prisma__csgi_menu_roleClient<csgi_menu_role>, Prisma__csgi_menu_roleClient<csgi_menu_roleGetPayload<T>>>

    /**
     * Create many Csgi_menu_roles.
     *     @param {csgi_menu_roleCreateManyArgs} args - Arguments to create many Csgi_menu_roles.
     *     @example
     *     // Create many Csgi_menu_roles
     *     const csgi_menu_role = await prisma.csgi_menu_role.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends csgi_menu_roleCreateManyArgs>(
      args?: SelectSubset<T, csgi_menu_roleCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Csgi_menu_role.
     * @param {csgi_menu_roleDeleteArgs} args - Arguments to delete one Csgi_menu_role.
     * @example
     * // Delete one Csgi_menu_role
     * const Csgi_menu_role = await prisma.csgi_menu_role.delete({
     *   where: {
     *     // ... filter to delete one Csgi_menu_role
     *   }
     * })
     * 
    **/
    delete<T extends csgi_menu_roleDeleteArgs>(
      args: SelectSubset<T, csgi_menu_roleDeleteArgs>
    ): CheckSelect<T, Prisma__csgi_menu_roleClient<csgi_menu_role>, Prisma__csgi_menu_roleClient<csgi_menu_roleGetPayload<T>>>

    /**
     * Update one Csgi_menu_role.
     * @param {csgi_menu_roleUpdateArgs} args - Arguments to update one Csgi_menu_role.
     * @example
     * // Update one Csgi_menu_role
     * const csgi_menu_role = await prisma.csgi_menu_role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends csgi_menu_roleUpdateArgs>(
      args: SelectSubset<T, csgi_menu_roleUpdateArgs>
    ): CheckSelect<T, Prisma__csgi_menu_roleClient<csgi_menu_role>, Prisma__csgi_menu_roleClient<csgi_menu_roleGetPayload<T>>>

    /**
     * Delete zero or more Csgi_menu_roles.
     * @param {csgi_menu_roleDeleteManyArgs} args - Arguments to filter Csgi_menu_roles to delete.
     * @example
     * // Delete a few Csgi_menu_roles
     * const { count } = await prisma.csgi_menu_role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends csgi_menu_roleDeleteManyArgs>(
      args?: SelectSubset<T, csgi_menu_roleDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Csgi_menu_roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_menu_roleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Csgi_menu_roles
     * const csgi_menu_role = await prisma.csgi_menu_role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends csgi_menu_roleUpdateManyArgs>(
      args: SelectSubset<T, csgi_menu_roleUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Csgi_menu_role.
     * @param {csgi_menu_roleUpsertArgs} args - Arguments to update or create a Csgi_menu_role.
     * @example
     * // Update or create a Csgi_menu_role
     * const csgi_menu_role = await prisma.csgi_menu_role.upsert({
     *   create: {
     *     // ... data to create a Csgi_menu_role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Csgi_menu_role we want to update
     *   }
     * })
    **/
    upsert<T extends csgi_menu_roleUpsertArgs>(
      args: SelectSubset<T, csgi_menu_roleUpsertArgs>
    ): CheckSelect<T, Prisma__csgi_menu_roleClient<csgi_menu_role>, Prisma__csgi_menu_roleClient<csgi_menu_roleGetPayload<T>>>

    /**
     * Count the number of Csgi_menu_roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_menu_roleCountArgs} args - Arguments to filter Csgi_menu_roles to count.
     * @example
     * // Count the number of Csgi_menu_roles
     * const count = await prisma.csgi_menu_role.count({
     *   where: {
     *     // ... the filter for the Csgi_menu_roles we want to count
     *   }
     * })
    **/
    count<T extends csgi_menu_roleCountArgs>(
      args?: Subset<T, csgi_menu_roleCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Csgi_menu_roleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Csgi_menu_role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Csgi_menu_roleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Csgi_menu_roleAggregateArgs>(args: Subset<T, Csgi_menu_roleAggregateArgs>): PrismaPromise<GetCsgi_menu_roleAggregateType<T>>

    /**
     * Group by Csgi_menu_role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Csgi_menu_roleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Csgi_menu_roleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Csgi_menu_roleGroupByArgs['orderBy'] }
        : { orderBy?: Csgi_menu_roleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Csgi_menu_roleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCsgi_menu_roleGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for csgi_menu_role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__csgi_menu_roleClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    csgi_menu_item<T extends csgi_menu_itemArgs = {}>(args?: Subset<T, csgi_menu_itemArgs>): CheckSelect<T, Prisma__csgi_menu_itemClient<csgi_menu_item | null >, Prisma__csgi_menu_itemClient<csgi_menu_itemGetPayload<T> | null >>;

    csgi_role<T extends csgi_roleArgs = {}>(args?: Subset<T, csgi_roleArgs>): CheckSelect<T, Prisma__csgi_roleClient<csgi_role | null >, Prisma__csgi_roleClient<csgi_roleGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * csgi_menu_role findUnique
   */
  export type csgi_menu_roleFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the csgi_menu_role
    **/
    select?: csgi_menu_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_menu_roleInclude | null
    /**
     * Throw an Error if a csgi_menu_role can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which csgi_menu_role to fetch.
    **/
    where: csgi_menu_roleWhereUniqueInput
  }


  /**
   * csgi_menu_role findFirst
   */
  export type csgi_menu_roleFindFirstArgs = {
    /**
     * Select specific fields to fetch from the csgi_menu_role
    **/
    select?: csgi_menu_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_menu_roleInclude | null
    /**
     * Throw an Error if a csgi_menu_role can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which csgi_menu_role to fetch.
    **/
    where?: csgi_menu_roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_menu_roles to fetch.
    **/
    orderBy?: Enumerable<csgi_menu_roleOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for csgi_menu_roles.
    **/
    cursor?: csgi_menu_roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_menu_roles from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_menu_roles.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of csgi_menu_roles.
    **/
    distinct?: Enumerable<Csgi_menu_roleScalarFieldEnum>
  }


  /**
   * csgi_menu_role findMany
   */
  export type csgi_menu_roleFindManyArgs = {
    /**
     * Select specific fields to fetch from the csgi_menu_role
    **/
    select?: csgi_menu_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_menu_roleInclude | null
    /**
     * Filter, which csgi_menu_roles to fetch.
    **/
    where?: csgi_menu_roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_menu_roles to fetch.
    **/
    orderBy?: Enumerable<csgi_menu_roleOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing csgi_menu_roles.
    **/
    cursor?: csgi_menu_roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_menu_roles from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_menu_roles.
    **/
    skip?: number
    distinct?: Enumerable<Csgi_menu_roleScalarFieldEnum>
  }


  /**
   * csgi_menu_role create
   */
  export type csgi_menu_roleCreateArgs = {
    /**
     * Select specific fields to fetch from the csgi_menu_role
    **/
    select?: csgi_menu_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_menu_roleInclude | null
    /**
     * The data needed to create a csgi_menu_role.
    **/
    data: XOR<csgi_menu_roleCreateInput, csgi_menu_roleUncheckedCreateInput>
  }


  /**
   * csgi_menu_role createMany
   */
  export type csgi_menu_roleCreateManyArgs = {
    data: Enumerable<csgi_menu_roleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * csgi_menu_role update
   */
  export type csgi_menu_roleUpdateArgs = {
    /**
     * Select specific fields to fetch from the csgi_menu_role
    **/
    select?: csgi_menu_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_menu_roleInclude | null
    /**
     * The data needed to update a csgi_menu_role.
    **/
    data: XOR<csgi_menu_roleUpdateInput, csgi_menu_roleUncheckedUpdateInput>
    /**
     * Choose, which csgi_menu_role to update.
    **/
    where: csgi_menu_roleWhereUniqueInput
  }


  /**
   * csgi_menu_role updateMany
   */
  export type csgi_menu_roleUpdateManyArgs = {
    data: XOR<csgi_menu_roleUpdateManyMutationInput, csgi_menu_roleUncheckedUpdateManyInput>
    where?: csgi_menu_roleWhereInput
  }


  /**
   * csgi_menu_role upsert
   */
  export type csgi_menu_roleUpsertArgs = {
    /**
     * Select specific fields to fetch from the csgi_menu_role
    **/
    select?: csgi_menu_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_menu_roleInclude | null
    /**
     * The filter to search for the csgi_menu_role to update in case it exists.
    **/
    where: csgi_menu_roleWhereUniqueInput
    /**
     * In case the csgi_menu_role found by the `where` argument doesn't exist, create a new csgi_menu_role with this data.
    **/
    create: XOR<csgi_menu_roleCreateInput, csgi_menu_roleUncheckedCreateInput>
    /**
     * In case the csgi_menu_role was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<csgi_menu_roleUpdateInput, csgi_menu_roleUncheckedUpdateInput>
  }


  /**
   * csgi_menu_role delete
   */
  export type csgi_menu_roleDeleteArgs = {
    /**
     * Select specific fields to fetch from the csgi_menu_role
    **/
    select?: csgi_menu_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_menu_roleInclude | null
    /**
     * Filter which csgi_menu_role to delete.
    **/
    where: csgi_menu_roleWhereUniqueInput
  }


  /**
   * csgi_menu_role deleteMany
   */
  export type csgi_menu_roleDeleteManyArgs = {
    where?: csgi_menu_roleWhereInput
  }


  /**
   * csgi_menu_role without action
   */
  export type csgi_menu_roleArgs = {
    /**
     * Select specific fields to fetch from the csgi_menu_role
    **/
    select?: csgi_menu_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_menu_roleInclude | null
  }



  /**
   * Model csgi_period
   */


  export type AggregateCsgi_period = {
    count: Csgi_periodCountAggregateOutputType | null
    avg: Csgi_periodAvgAggregateOutputType | null
    sum: Csgi_periodSumAggregateOutputType | null
    min: Csgi_periodMinAggregateOutputType | null
    max: Csgi_periodMaxAggregateOutputType | null
  }

  export type Csgi_periodAvgAggregateOutputType = {
    periodid: number | null
  }

  export type Csgi_periodSumAggregateOutputType = {
    periodid: number | null
  }

  export type Csgi_periodMinAggregateOutputType = {
    periodid: number | null
    periodname: string | null
    period_desc: string | null
    period_start: Date | null
    period_end: Date | null
    created_date: Date | null
    created_by: string | null
    updated_date: Date | null
    updated_by: string | null
    period_date: Date | null
  }

  export type Csgi_periodMaxAggregateOutputType = {
    periodid: number | null
    periodname: string | null
    period_desc: string | null
    period_start: Date | null
    period_end: Date | null
    created_date: Date | null
    created_by: string | null
    updated_date: Date | null
    updated_by: string | null
    period_date: Date | null
  }

  export type Csgi_periodCountAggregateOutputType = {
    periodid: number
    periodname: number
    period_desc: number
    period_start: number
    period_end: number
    created_date: number
    created_by: number
    updated_date: number
    updated_by: number
    period_date: number
    _all: number
  }


  export type Csgi_periodAvgAggregateInputType = {
    periodid?: true
  }

  export type Csgi_periodSumAggregateInputType = {
    periodid?: true
  }

  export type Csgi_periodMinAggregateInputType = {
    periodid?: true
    periodname?: true
    period_desc?: true
    period_start?: true
    period_end?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
    period_date?: true
  }

  export type Csgi_periodMaxAggregateInputType = {
    periodid?: true
    periodname?: true
    period_desc?: true
    period_start?: true
    period_end?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
    period_date?: true
  }

  export type Csgi_periodCountAggregateInputType = {
    periodid?: true
    periodname?: true
    period_desc?: true
    period_start?: true
    period_end?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
    period_date?: true
    _all?: true
  }

  export type Csgi_periodAggregateArgs = {
    /**
     * Filter which csgi_period to aggregate.
    **/
    where?: csgi_periodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_periods to fetch.
    **/
    orderBy?: Enumerable<csgi_periodOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: csgi_periodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_periods from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_periods.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned csgi_periods
    **/
    count?: true | Csgi_periodCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Csgi_periodAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Csgi_periodSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Csgi_periodMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Csgi_periodMaxAggregateInputType
  }

  export type GetCsgi_periodAggregateType<T extends Csgi_periodAggregateArgs> = {
    [P in keyof T & keyof AggregateCsgi_period]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCsgi_period[P]>
      : GetScalarType<T[P], AggregateCsgi_period[P]>
  }


    
    
  export type Csgi_periodGroupByArgs = {
    where?: csgi_periodWhereInput
    orderBy?: Enumerable<csgi_periodOrderByInput>
    by: Array<Csgi_periodScalarFieldEnum>
    having?: csgi_periodScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: Csgi_periodCountAggregateInputType | true
    avg?: Csgi_periodAvgAggregateInputType
    sum?: Csgi_periodSumAggregateInputType
    min?: Csgi_periodMinAggregateInputType
    max?: Csgi_periodMaxAggregateInputType
  }


  export type Csgi_periodGroupByOutputType = {
    periodid: number
    periodname: string
    period_desc: string | null
    period_start: Date
    period_end: Date
    created_date: Date
    created_by: string
    updated_date: Date | null
    updated_by: string | null
    period_date: Date | null
    count: Csgi_periodCountAggregateOutputType | null
    avg: Csgi_periodAvgAggregateOutputType | null
    sum: Csgi_periodSumAggregateOutputType | null
    min: Csgi_periodMinAggregateOutputType | null
    max: Csgi_periodMaxAggregateOutputType | null
  }

  type GetCsgi_periodGroupByPayload<T extends Csgi_periodGroupByArgs> = Promise<Array<
    PickArray<Csgi_periodGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof Csgi_periodGroupByOutputType))]: GetScalarType<T[P], Csgi_periodGroupByOutputType[P]>
    }
  >>
    

  export type csgi_periodSelect = {
    periodid?: boolean
    periodname?: boolean
    period_desc?: boolean
    period_start?: boolean
    period_end?: boolean
    created_date?: boolean
    created_by?: boolean
    updated_date?: boolean
    updated_by?: boolean
    period_date?: boolean
    csgi_roster?: boolean | csgi_rosterFindManyArgs
  }

  export type csgi_periodInclude = {
    csgi_roster?: boolean | csgi_rosterFindManyArgs
  }

  export type csgi_periodGetPayload<
    S extends boolean | null | undefined | csgi_periodArgs,
    U = keyof S
      > = S extends true
        ? csgi_period
    : S extends undefined
    ? never
    : S extends csgi_periodArgs | csgi_periodFindManyArgs
    ?'include' extends U
    ? csgi_period  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'csgi_roster'
        ? Array < csgi_rosterGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof csgi_period ?csgi_period [P]
  : 
          P extends 'csgi_roster'
        ? Array < csgi_rosterGetPayload<S['select'][P]>>  : never
  } 
    : csgi_period
  : csgi_period


  type csgi_periodCountArgs = Merge<
    Omit<csgi_periodFindManyArgs, 'select' | 'include'> & {
      select?: Csgi_periodCountAggregateInputType | true
    }
  >

  export interface csgi_periodDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Csgi_period that matches the filter.
     * @param {csgi_periodFindUniqueArgs} args - Arguments to find a Csgi_period
     * @example
     * // Get one Csgi_period
     * const csgi_period = await prisma.csgi_period.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends csgi_periodFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, csgi_periodFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'csgi_period'> extends True ? CheckSelect<T, Prisma__csgi_periodClient<csgi_period>, Prisma__csgi_periodClient<csgi_periodGetPayload<T>>> : CheckSelect<T, Prisma__csgi_periodClient<csgi_period | null >, Prisma__csgi_periodClient<csgi_periodGetPayload<T> | null >>

    /**
     * Find the first Csgi_period that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_periodFindFirstArgs} args - Arguments to find a Csgi_period
     * @example
     * // Get one Csgi_period
     * const csgi_period = await prisma.csgi_period.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends csgi_periodFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, csgi_periodFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'csgi_period'> extends True ? CheckSelect<T, Prisma__csgi_periodClient<csgi_period>, Prisma__csgi_periodClient<csgi_periodGetPayload<T>>> : CheckSelect<T, Prisma__csgi_periodClient<csgi_period | null >, Prisma__csgi_periodClient<csgi_periodGetPayload<T> | null >>

    /**
     * Find zero or more Csgi_periods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_periodFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Csgi_periods
     * const csgi_periods = await prisma.csgi_period.findMany()
     * 
     * // Get first 10 Csgi_periods
     * const csgi_periods = await prisma.csgi_period.findMany({ take: 10 })
     * 
     * // Only select the `periodid`
     * const csgi_periodWithPeriodidOnly = await prisma.csgi_period.findMany({ select: { periodid: true } })
     * 
    **/
    findMany<T extends csgi_periodFindManyArgs>(
      args?: SelectSubset<T, csgi_periodFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<csgi_period>>, PrismaPromise<Array<csgi_periodGetPayload<T>>>>

    /**
     * Create a Csgi_period.
     * @param {csgi_periodCreateArgs} args - Arguments to create a Csgi_period.
     * @example
     * // Create one Csgi_period
     * const Csgi_period = await prisma.csgi_period.create({
     *   data: {
     *     // ... data to create a Csgi_period
     *   }
     * })
     * 
    **/
    create<T extends csgi_periodCreateArgs>(
      args: SelectSubset<T, csgi_periodCreateArgs>
    ): CheckSelect<T, Prisma__csgi_periodClient<csgi_period>, Prisma__csgi_periodClient<csgi_periodGetPayload<T>>>

    /**
     * Create many Csgi_periods.
     *     @param {csgi_periodCreateManyArgs} args - Arguments to create many Csgi_periods.
     *     @example
     *     // Create many Csgi_periods
     *     const csgi_period = await prisma.csgi_period.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends csgi_periodCreateManyArgs>(
      args?: SelectSubset<T, csgi_periodCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Csgi_period.
     * @param {csgi_periodDeleteArgs} args - Arguments to delete one Csgi_period.
     * @example
     * // Delete one Csgi_period
     * const Csgi_period = await prisma.csgi_period.delete({
     *   where: {
     *     // ... filter to delete one Csgi_period
     *   }
     * })
     * 
    **/
    delete<T extends csgi_periodDeleteArgs>(
      args: SelectSubset<T, csgi_periodDeleteArgs>
    ): CheckSelect<T, Prisma__csgi_periodClient<csgi_period>, Prisma__csgi_periodClient<csgi_periodGetPayload<T>>>

    /**
     * Update one Csgi_period.
     * @param {csgi_periodUpdateArgs} args - Arguments to update one Csgi_period.
     * @example
     * // Update one Csgi_period
     * const csgi_period = await prisma.csgi_period.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends csgi_periodUpdateArgs>(
      args: SelectSubset<T, csgi_periodUpdateArgs>
    ): CheckSelect<T, Prisma__csgi_periodClient<csgi_period>, Prisma__csgi_periodClient<csgi_periodGetPayload<T>>>

    /**
     * Delete zero or more Csgi_periods.
     * @param {csgi_periodDeleteManyArgs} args - Arguments to filter Csgi_periods to delete.
     * @example
     * // Delete a few Csgi_periods
     * const { count } = await prisma.csgi_period.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends csgi_periodDeleteManyArgs>(
      args?: SelectSubset<T, csgi_periodDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Csgi_periods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_periodUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Csgi_periods
     * const csgi_period = await prisma.csgi_period.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends csgi_periodUpdateManyArgs>(
      args: SelectSubset<T, csgi_periodUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Csgi_period.
     * @param {csgi_periodUpsertArgs} args - Arguments to update or create a Csgi_period.
     * @example
     * // Update or create a Csgi_period
     * const csgi_period = await prisma.csgi_period.upsert({
     *   create: {
     *     // ... data to create a Csgi_period
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Csgi_period we want to update
     *   }
     * })
    **/
    upsert<T extends csgi_periodUpsertArgs>(
      args: SelectSubset<T, csgi_periodUpsertArgs>
    ): CheckSelect<T, Prisma__csgi_periodClient<csgi_period>, Prisma__csgi_periodClient<csgi_periodGetPayload<T>>>

    /**
     * Count the number of Csgi_periods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_periodCountArgs} args - Arguments to filter Csgi_periods to count.
     * @example
     * // Count the number of Csgi_periods
     * const count = await prisma.csgi_period.count({
     *   where: {
     *     // ... the filter for the Csgi_periods we want to count
     *   }
     * })
    **/
    count<T extends csgi_periodCountArgs>(
      args?: Subset<T, csgi_periodCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Csgi_periodCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Csgi_period.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Csgi_periodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Csgi_periodAggregateArgs>(args: Subset<T, Csgi_periodAggregateArgs>): PrismaPromise<GetCsgi_periodAggregateType<T>>

    /**
     * Group by Csgi_period.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Csgi_periodGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Csgi_periodGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Csgi_periodGroupByArgs['orderBy'] }
        : { orderBy?: Csgi_periodGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Csgi_periodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCsgi_periodGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for csgi_period.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__csgi_periodClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    csgi_roster<T extends csgi_rosterFindManyArgs = {}>(args?: Subset<T, csgi_rosterFindManyArgs>): CheckSelect<T, PrismaPromise<Array<csgi_roster>>, PrismaPromise<Array<csgi_rosterGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * csgi_period findUnique
   */
  export type csgi_periodFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the csgi_period
    **/
    select?: csgi_periodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_periodInclude | null
    /**
     * Throw an Error if a csgi_period can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which csgi_period to fetch.
    **/
    where: csgi_periodWhereUniqueInput
  }


  /**
   * csgi_period findFirst
   */
  export type csgi_periodFindFirstArgs = {
    /**
     * Select specific fields to fetch from the csgi_period
    **/
    select?: csgi_periodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_periodInclude | null
    /**
     * Throw an Error if a csgi_period can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which csgi_period to fetch.
    **/
    where?: csgi_periodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_periods to fetch.
    **/
    orderBy?: Enumerable<csgi_periodOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for csgi_periods.
    **/
    cursor?: csgi_periodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_periods from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_periods.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of csgi_periods.
    **/
    distinct?: Enumerable<Csgi_periodScalarFieldEnum>
  }


  /**
   * csgi_period findMany
   */
  export type csgi_periodFindManyArgs = {
    /**
     * Select specific fields to fetch from the csgi_period
    **/
    select?: csgi_periodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_periodInclude | null
    /**
     * Filter, which csgi_periods to fetch.
    **/
    where?: csgi_periodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_periods to fetch.
    **/
    orderBy?: Enumerable<csgi_periodOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing csgi_periods.
    **/
    cursor?: csgi_periodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_periods from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_periods.
    **/
    skip?: number
    distinct?: Enumerable<Csgi_periodScalarFieldEnum>
  }


  /**
   * csgi_period create
   */
  export type csgi_periodCreateArgs = {
    /**
     * Select specific fields to fetch from the csgi_period
    **/
    select?: csgi_periodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_periodInclude | null
    /**
     * The data needed to create a csgi_period.
    **/
    data: XOR<csgi_periodCreateInput, csgi_periodUncheckedCreateInput>
  }


  /**
   * csgi_period createMany
   */
  export type csgi_periodCreateManyArgs = {
    data: Enumerable<csgi_periodCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * csgi_period update
   */
  export type csgi_periodUpdateArgs = {
    /**
     * Select specific fields to fetch from the csgi_period
    **/
    select?: csgi_periodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_periodInclude | null
    /**
     * The data needed to update a csgi_period.
    **/
    data: XOR<csgi_periodUpdateInput, csgi_periodUncheckedUpdateInput>
    /**
     * Choose, which csgi_period to update.
    **/
    where: csgi_periodWhereUniqueInput
  }


  /**
   * csgi_period updateMany
   */
  export type csgi_periodUpdateManyArgs = {
    data: XOR<csgi_periodUpdateManyMutationInput, csgi_periodUncheckedUpdateManyInput>
    where?: csgi_periodWhereInput
  }


  /**
   * csgi_period upsert
   */
  export type csgi_periodUpsertArgs = {
    /**
     * Select specific fields to fetch from the csgi_period
    **/
    select?: csgi_periodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_periodInclude | null
    /**
     * The filter to search for the csgi_period to update in case it exists.
    **/
    where: csgi_periodWhereUniqueInput
    /**
     * In case the csgi_period found by the `where` argument doesn't exist, create a new csgi_period with this data.
    **/
    create: XOR<csgi_periodCreateInput, csgi_periodUncheckedCreateInput>
    /**
     * In case the csgi_period was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<csgi_periodUpdateInput, csgi_periodUncheckedUpdateInput>
  }


  /**
   * csgi_period delete
   */
  export type csgi_periodDeleteArgs = {
    /**
     * Select specific fields to fetch from the csgi_period
    **/
    select?: csgi_periodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_periodInclude | null
    /**
     * Filter which csgi_period to delete.
    **/
    where: csgi_periodWhereUniqueInput
  }


  /**
   * csgi_period deleteMany
   */
  export type csgi_periodDeleteManyArgs = {
    where?: csgi_periodWhereInput
  }


  /**
   * csgi_period without action
   */
  export type csgi_periodArgs = {
    /**
     * Select specific fields to fetch from the csgi_period
    **/
    select?: csgi_periodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_periodInclude | null
  }



  /**
   * Model csgi_role
   */


  export type AggregateCsgi_role = {
    count: Csgi_roleCountAggregateOutputType | null
    avg: Csgi_roleAvgAggregateOutputType | null
    sum: Csgi_roleSumAggregateOutputType | null
    min: Csgi_roleMinAggregateOutputType | null
    max: Csgi_roleMaxAggregateOutputType | null
  }

  export type Csgi_roleAvgAggregateOutputType = {
    roleid: number | null
  }

  export type Csgi_roleSumAggregateOutputType = {
    roleid: number | null
  }

  export type Csgi_roleMinAggregateOutputType = {
    roleid: number | null
    role: string | null
    created_date: Date | null
    created_by: string | null
    updated_date: Date | null
    updated_by: string | null
  }

  export type Csgi_roleMaxAggregateOutputType = {
    roleid: number | null
    role: string | null
    created_date: Date | null
    created_by: string | null
    updated_date: Date | null
    updated_by: string | null
  }

  export type Csgi_roleCountAggregateOutputType = {
    roleid: number
    role: number
    created_date: number
    created_by: number
    updated_date: number
    updated_by: number
    _all: number
  }


  export type Csgi_roleAvgAggregateInputType = {
    roleid?: true
  }

  export type Csgi_roleSumAggregateInputType = {
    roleid?: true
  }

  export type Csgi_roleMinAggregateInputType = {
    roleid?: true
    role?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
  }

  export type Csgi_roleMaxAggregateInputType = {
    roleid?: true
    role?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
  }

  export type Csgi_roleCountAggregateInputType = {
    roleid?: true
    role?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
    _all?: true
  }

  export type Csgi_roleAggregateArgs = {
    /**
     * Filter which csgi_role to aggregate.
    **/
    where?: csgi_roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_roles to fetch.
    **/
    orderBy?: Enumerable<csgi_roleOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: csgi_roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_roles from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_roles.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned csgi_roles
    **/
    count?: true | Csgi_roleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Csgi_roleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Csgi_roleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Csgi_roleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Csgi_roleMaxAggregateInputType
  }

  export type GetCsgi_roleAggregateType<T extends Csgi_roleAggregateArgs> = {
    [P in keyof T & keyof AggregateCsgi_role]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCsgi_role[P]>
      : GetScalarType<T[P], AggregateCsgi_role[P]>
  }


    
    
  export type Csgi_roleGroupByArgs = {
    where?: csgi_roleWhereInput
    orderBy?: Enumerable<csgi_roleOrderByInput>
    by: Array<Csgi_roleScalarFieldEnum>
    having?: csgi_roleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: Csgi_roleCountAggregateInputType | true
    avg?: Csgi_roleAvgAggregateInputType
    sum?: Csgi_roleSumAggregateInputType
    min?: Csgi_roleMinAggregateInputType
    max?: Csgi_roleMaxAggregateInputType
  }


  export type Csgi_roleGroupByOutputType = {
    roleid: number
    role: string
    created_date: Date
    created_by: string
    updated_date: Date | null
    updated_by: string | null
    count: Csgi_roleCountAggregateOutputType | null
    avg: Csgi_roleAvgAggregateOutputType | null
    sum: Csgi_roleSumAggregateOutputType | null
    min: Csgi_roleMinAggregateOutputType | null
    max: Csgi_roleMaxAggregateOutputType | null
  }

  type GetCsgi_roleGroupByPayload<T extends Csgi_roleGroupByArgs> = Promise<Array<
    PickArray<Csgi_roleGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof Csgi_roleGroupByOutputType))]: GetScalarType<T[P], Csgi_roleGroupByOutputType[P]>
    }
  >>
    

  export type csgi_roleSelect = {
    roleid?: boolean
    role?: boolean
    created_date?: boolean
    created_by?: boolean
    updated_date?: boolean
    updated_by?: boolean
    csgi_menu_role?: boolean | csgi_menu_roleFindManyArgs
    csgi_user_role?: boolean | csgi_user_roleFindManyArgs
  }

  export type csgi_roleInclude = {
    csgi_menu_role?: boolean | csgi_menu_roleFindManyArgs
    csgi_user_role?: boolean | csgi_user_roleFindManyArgs
  }

  export type csgi_roleGetPayload<
    S extends boolean | null | undefined | csgi_roleArgs,
    U = keyof S
      > = S extends true
        ? csgi_role
    : S extends undefined
    ? never
    : S extends csgi_roleArgs | csgi_roleFindManyArgs
    ?'include' extends U
    ? csgi_role  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'csgi_menu_role'
        ? Array < csgi_menu_roleGetPayload<S['include'][P]>>  :
        P extends 'csgi_user_role'
        ? Array < csgi_user_roleGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof csgi_role ?csgi_role [P]
  : 
          P extends 'csgi_menu_role'
        ? Array < csgi_menu_roleGetPayload<S['select'][P]>>  :
        P extends 'csgi_user_role'
        ? Array < csgi_user_roleGetPayload<S['select'][P]>>  : never
  } 
    : csgi_role
  : csgi_role


  type csgi_roleCountArgs = Merge<
    Omit<csgi_roleFindManyArgs, 'select' | 'include'> & {
      select?: Csgi_roleCountAggregateInputType | true
    }
  >

  export interface csgi_roleDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Csgi_role that matches the filter.
     * @param {csgi_roleFindUniqueArgs} args - Arguments to find a Csgi_role
     * @example
     * // Get one Csgi_role
     * const csgi_role = await prisma.csgi_role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends csgi_roleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, csgi_roleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'csgi_role'> extends True ? CheckSelect<T, Prisma__csgi_roleClient<csgi_role>, Prisma__csgi_roleClient<csgi_roleGetPayload<T>>> : CheckSelect<T, Prisma__csgi_roleClient<csgi_role | null >, Prisma__csgi_roleClient<csgi_roleGetPayload<T> | null >>

    /**
     * Find the first Csgi_role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_roleFindFirstArgs} args - Arguments to find a Csgi_role
     * @example
     * // Get one Csgi_role
     * const csgi_role = await prisma.csgi_role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends csgi_roleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, csgi_roleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'csgi_role'> extends True ? CheckSelect<T, Prisma__csgi_roleClient<csgi_role>, Prisma__csgi_roleClient<csgi_roleGetPayload<T>>> : CheckSelect<T, Prisma__csgi_roleClient<csgi_role | null >, Prisma__csgi_roleClient<csgi_roleGetPayload<T> | null >>

    /**
     * Find zero or more Csgi_roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_roleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Csgi_roles
     * const csgi_roles = await prisma.csgi_role.findMany()
     * 
     * // Get first 10 Csgi_roles
     * const csgi_roles = await prisma.csgi_role.findMany({ take: 10 })
     * 
     * // Only select the `roleid`
     * const csgi_roleWithRoleidOnly = await prisma.csgi_role.findMany({ select: { roleid: true } })
     * 
    **/
    findMany<T extends csgi_roleFindManyArgs>(
      args?: SelectSubset<T, csgi_roleFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<csgi_role>>, PrismaPromise<Array<csgi_roleGetPayload<T>>>>

    /**
     * Create a Csgi_role.
     * @param {csgi_roleCreateArgs} args - Arguments to create a Csgi_role.
     * @example
     * // Create one Csgi_role
     * const Csgi_role = await prisma.csgi_role.create({
     *   data: {
     *     // ... data to create a Csgi_role
     *   }
     * })
     * 
    **/
    create<T extends csgi_roleCreateArgs>(
      args: SelectSubset<T, csgi_roleCreateArgs>
    ): CheckSelect<T, Prisma__csgi_roleClient<csgi_role>, Prisma__csgi_roleClient<csgi_roleGetPayload<T>>>

    /**
     * Create many Csgi_roles.
     *     @param {csgi_roleCreateManyArgs} args - Arguments to create many Csgi_roles.
     *     @example
     *     // Create many Csgi_roles
     *     const csgi_role = await prisma.csgi_role.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends csgi_roleCreateManyArgs>(
      args?: SelectSubset<T, csgi_roleCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Csgi_role.
     * @param {csgi_roleDeleteArgs} args - Arguments to delete one Csgi_role.
     * @example
     * // Delete one Csgi_role
     * const Csgi_role = await prisma.csgi_role.delete({
     *   where: {
     *     // ... filter to delete one Csgi_role
     *   }
     * })
     * 
    **/
    delete<T extends csgi_roleDeleteArgs>(
      args: SelectSubset<T, csgi_roleDeleteArgs>
    ): CheckSelect<T, Prisma__csgi_roleClient<csgi_role>, Prisma__csgi_roleClient<csgi_roleGetPayload<T>>>

    /**
     * Update one Csgi_role.
     * @param {csgi_roleUpdateArgs} args - Arguments to update one Csgi_role.
     * @example
     * // Update one Csgi_role
     * const csgi_role = await prisma.csgi_role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends csgi_roleUpdateArgs>(
      args: SelectSubset<T, csgi_roleUpdateArgs>
    ): CheckSelect<T, Prisma__csgi_roleClient<csgi_role>, Prisma__csgi_roleClient<csgi_roleGetPayload<T>>>

    /**
     * Delete zero or more Csgi_roles.
     * @param {csgi_roleDeleteManyArgs} args - Arguments to filter Csgi_roles to delete.
     * @example
     * // Delete a few Csgi_roles
     * const { count } = await prisma.csgi_role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends csgi_roleDeleteManyArgs>(
      args?: SelectSubset<T, csgi_roleDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Csgi_roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_roleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Csgi_roles
     * const csgi_role = await prisma.csgi_role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends csgi_roleUpdateManyArgs>(
      args: SelectSubset<T, csgi_roleUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Csgi_role.
     * @param {csgi_roleUpsertArgs} args - Arguments to update or create a Csgi_role.
     * @example
     * // Update or create a Csgi_role
     * const csgi_role = await prisma.csgi_role.upsert({
     *   create: {
     *     // ... data to create a Csgi_role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Csgi_role we want to update
     *   }
     * })
    **/
    upsert<T extends csgi_roleUpsertArgs>(
      args: SelectSubset<T, csgi_roleUpsertArgs>
    ): CheckSelect<T, Prisma__csgi_roleClient<csgi_role>, Prisma__csgi_roleClient<csgi_roleGetPayload<T>>>

    /**
     * Count the number of Csgi_roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_roleCountArgs} args - Arguments to filter Csgi_roles to count.
     * @example
     * // Count the number of Csgi_roles
     * const count = await prisma.csgi_role.count({
     *   where: {
     *     // ... the filter for the Csgi_roles we want to count
     *   }
     * })
    **/
    count<T extends csgi_roleCountArgs>(
      args?: Subset<T, csgi_roleCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Csgi_roleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Csgi_role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Csgi_roleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Csgi_roleAggregateArgs>(args: Subset<T, Csgi_roleAggregateArgs>): PrismaPromise<GetCsgi_roleAggregateType<T>>

    /**
     * Group by Csgi_role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Csgi_roleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Csgi_roleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Csgi_roleGroupByArgs['orderBy'] }
        : { orderBy?: Csgi_roleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Csgi_roleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCsgi_roleGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for csgi_role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__csgi_roleClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    csgi_menu_role<T extends csgi_menu_roleFindManyArgs = {}>(args?: Subset<T, csgi_menu_roleFindManyArgs>): CheckSelect<T, PrismaPromise<Array<csgi_menu_role>>, PrismaPromise<Array<csgi_menu_roleGetPayload<T>>>>;

    csgi_user_role<T extends csgi_user_roleFindManyArgs = {}>(args?: Subset<T, csgi_user_roleFindManyArgs>): CheckSelect<T, PrismaPromise<Array<csgi_user_role>>, PrismaPromise<Array<csgi_user_roleGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * csgi_role findUnique
   */
  export type csgi_roleFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the csgi_role
    **/
    select?: csgi_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_roleInclude | null
    /**
     * Throw an Error if a csgi_role can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which csgi_role to fetch.
    **/
    where: csgi_roleWhereUniqueInput
  }


  /**
   * csgi_role findFirst
   */
  export type csgi_roleFindFirstArgs = {
    /**
     * Select specific fields to fetch from the csgi_role
    **/
    select?: csgi_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_roleInclude | null
    /**
     * Throw an Error if a csgi_role can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which csgi_role to fetch.
    **/
    where?: csgi_roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_roles to fetch.
    **/
    orderBy?: Enumerable<csgi_roleOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for csgi_roles.
    **/
    cursor?: csgi_roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_roles from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_roles.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of csgi_roles.
    **/
    distinct?: Enumerable<Csgi_roleScalarFieldEnum>
  }


  /**
   * csgi_role findMany
   */
  export type csgi_roleFindManyArgs = {
    /**
     * Select specific fields to fetch from the csgi_role
    **/
    select?: csgi_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_roleInclude | null
    /**
     * Filter, which csgi_roles to fetch.
    **/
    where?: csgi_roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_roles to fetch.
    **/
    orderBy?: Enumerable<csgi_roleOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing csgi_roles.
    **/
    cursor?: csgi_roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_roles from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_roles.
    **/
    skip?: number
    distinct?: Enumerable<Csgi_roleScalarFieldEnum>
  }


  /**
   * csgi_role create
   */
  export type csgi_roleCreateArgs = {
    /**
     * Select specific fields to fetch from the csgi_role
    **/
    select?: csgi_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_roleInclude | null
    /**
     * The data needed to create a csgi_role.
    **/
    data: XOR<csgi_roleCreateInput, csgi_roleUncheckedCreateInput>
  }


  /**
   * csgi_role createMany
   */
  export type csgi_roleCreateManyArgs = {
    data: Enumerable<csgi_roleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * csgi_role update
   */
  export type csgi_roleUpdateArgs = {
    /**
     * Select specific fields to fetch from the csgi_role
    **/
    select?: csgi_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_roleInclude | null
    /**
     * The data needed to update a csgi_role.
    **/
    data: XOR<csgi_roleUpdateInput, csgi_roleUncheckedUpdateInput>
    /**
     * Choose, which csgi_role to update.
    **/
    where: csgi_roleWhereUniqueInput
  }


  /**
   * csgi_role updateMany
   */
  export type csgi_roleUpdateManyArgs = {
    data: XOR<csgi_roleUpdateManyMutationInput, csgi_roleUncheckedUpdateManyInput>
    where?: csgi_roleWhereInput
  }


  /**
   * csgi_role upsert
   */
  export type csgi_roleUpsertArgs = {
    /**
     * Select specific fields to fetch from the csgi_role
    **/
    select?: csgi_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_roleInclude | null
    /**
     * The filter to search for the csgi_role to update in case it exists.
    **/
    where: csgi_roleWhereUniqueInput
    /**
     * In case the csgi_role found by the `where` argument doesn't exist, create a new csgi_role with this data.
    **/
    create: XOR<csgi_roleCreateInput, csgi_roleUncheckedCreateInput>
    /**
     * In case the csgi_role was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<csgi_roleUpdateInput, csgi_roleUncheckedUpdateInput>
  }


  /**
   * csgi_role delete
   */
  export type csgi_roleDeleteArgs = {
    /**
     * Select specific fields to fetch from the csgi_role
    **/
    select?: csgi_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_roleInclude | null
    /**
     * Filter which csgi_role to delete.
    **/
    where: csgi_roleWhereUniqueInput
  }


  /**
   * csgi_role deleteMany
   */
  export type csgi_roleDeleteManyArgs = {
    where?: csgi_roleWhereInput
  }


  /**
   * csgi_role without action
   */
  export type csgi_roleArgs = {
    /**
     * Select specific fields to fetch from the csgi_role
    **/
    select?: csgi_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_roleInclude | null
  }



  /**
   * Model csgi_room
   */


  export type AggregateCsgi_room = {
    count: Csgi_roomCountAggregateOutputType | null
    avg: Csgi_roomAvgAggregateOutputType | null
    sum: Csgi_roomSumAggregateOutputType | null
    min: Csgi_roomMinAggregateOutputType | null
    max: Csgi_roomMaxAggregateOutputType | null
  }

  export type Csgi_roomAvgAggregateOutputType = {
    roomid: number | null
  }

  export type Csgi_roomSumAggregateOutputType = {
    roomid: number | null
  }

  export type Csgi_roomMinAggregateOutputType = {
    roomid: number | null
    roomcode: string | null
    room_desc: string | null
    location: string | null
    created_date: Date | null
    created_by: string | null
    updated_date: Date | null
    updated_by: string | null
  }

  export type Csgi_roomMaxAggregateOutputType = {
    roomid: number | null
    roomcode: string | null
    room_desc: string | null
    location: string | null
    created_date: Date | null
    created_by: string | null
    updated_date: Date | null
    updated_by: string | null
  }

  export type Csgi_roomCountAggregateOutputType = {
    roomid: number
    roomcode: number
    room_desc: number
    location: number
    created_date: number
    created_by: number
    updated_date: number
    updated_by: number
    _all: number
  }


  export type Csgi_roomAvgAggregateInputType = {
    roomid?: true
  }

  export type Csgi_roomSumAggregateInputType = {
    roomid?: true
  }

  export type Csgi_roomMinAggregateInputType = {
    roomid?: true
    roomcode?: true
    room_desc?: true
    location?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
  }

  export type Csgi_roomMaxAggregateInputType = {
    roomid?: true
    roomcode?: true
    room_desc?: true
    location?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
  }

  export type Csgi_roomCountAggregateInputType = {
    roomid?: true
    roomcode?: true
    room_desc?: true
    location?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
    _all?: true
  }

  export type Csgi_roomAggregateArgs = {
    /**
     * Filter which csgi_room to aggregate.
    **/
    where?: csgi_roomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_rooms to fetch.
    **/
    orderBy?: Enumerable<csgi_roomOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: csgi_roomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_rooms from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_rooms.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned csgi_rooms
    **/
    count?: true | Csgi_roomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Csgi_roomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Csgi_roomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Csgi_roomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Csgi_roomMaxAggregateInputType
  }

  export type GetCsgi_roomAggregateType<T extends Csgi_roomAggregateArgs> = {
    [P in keyof T & keyof AggregateCsgi_room]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCsgi_room[P]>
      : GetScalarType<T[P], AggregateCsgi_room[P]>
  }


    
    
  export type Csgi_roomGroupByArgs = {
    where?: csgi_roomWhereInput
    orderBy?: Enumerable<csgi_roomOrderByInput>
    by: Array<Csgi_roomScalarFieldEnum>
    having?: csgi_roomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: Csgi_roomCountAggregateInputType | true
    avg?: Csgi_roomAvgAggregateInputType
    sum?: Csgi_roomSumAggregateInputType
    min?: Csgi_roomMinAggregateInputType
    max?: Csgi_roomMaxAggregateInputType
  }


  export type Csgi_roomGroupByOutputType = {
    roomid: number
    roomcode: string
    room_desc: string | null
    location: string | null
    created_date: Date
    created_by: string
    updated_date: Date | null
    updated_by: string | null
    count: Csgi_roomCountAggregateOutputType | null
    avg: Csgi_roomAvgAggregateOutputType | null
    sum: Csgi_roomSumAggregateOutputType | null
    min: Csgi_roomMinAggregateOutputType | null
    max: Csgi_roomMaxAggregateOutputType | null
  }

  type GetCsgi_roomGroupByPayload<T extends Csgi_roomGroupByArgs> = Promise<Array<
    PickArray<Csgi_roomGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof Csgi_roomGroupByOutputType))]: GetScalarType<T[P], Csgi_roomGroupByOutputType[P]>
    }
  >>
    

  export type csgi_roomSelect = {
    roomid?: boolean
    roomcode?: boolean
    room_desc?: boolean
    location?: boolean
    created_date?: boolean
    created_by?: boolean
    updated_date?: boolean
    updated_by?: boolean
    csgi_class?: boolean | csgi_classFindManyArgs
  }

  export type csgi_roomInclude = {
    csgi_class?: boolean | csgi_classFindManyArgs
  }

  export type csgi_roomGetPayload<
    S extends boolean | null | undefined | csgi_roomArgs,
    U = keyof S
      > = S extends true
        ? csgi_room
    : S extends undefined
    ? never
    : S extends csgi_roomArgs | csgi_roomFindManyArgs
    ?'include' extends U
    ? csgi_room  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'csgi_class'
        ? Array < csgi_classGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof csgi_room ?csgi_room [P]
  : 
          P extends 'csgi_class'
        ? Array < csgi_classGetPayload<S['select'][P]>>  : never
  } 
    : csgi_room
  : csgi_room


  type csgi_roomCountArgs = Merge<
    Omit<csgi_roomFindManyArgs, 'select' | 'include'> & {
      select?: Csgi_roomCountAggregateInputType | true
    }
  >

  export interface csgi_roomDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Csgi_room that matches the filter.
     * @param {csgi_roomFindUniqueArgs} args - Arguments to find a Csgi_room
     * @example
     * // Get one Csgi_room
     * const csgi_room = await prisma.csgi_room.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends csgi_roomFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, csgi_roomFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'csgi_room'> extends True ? CheckSelect<T, Prisma__csgi_roomClient<csgi_room>, Prisma__csgi_roomClient<csgi_roomGetPayload<T>>> : CheckSelect<T, Prisma__csgi_roomClient<csgi_room | null >, Prisma__csgi_roomClient<csgi_roomGetPayload<T> | null >>

    /**
     * Find the first Csgi_room that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_roomFindFirstArgs} args - Arguments to find a Csgi_room
     * @example
     * // Get one Csgi_room
     * const csgi_room = await prisma.csgi_room.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends csgi_roomFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, csgi_roomFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'csgi_room'> extends True ? CheckSelect<T, Prisma__csgi_roomClient<csgi_room>, Prisma__csgi_roomClient<csgi_roomGetPayload<T>>> : CheckSelect<T, Prisma__csgi_roomClient<csgi_room | null >, Prisma__csgi_roomClient<csgi_roomGetPayload<T> | null >>

    /**
     * Find zero or more Csgi_rooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_roomFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Csgi_rooms
     * const csgi_rooms = await prisma.csgi_room.findMany()
     * 
     * // Get first 10 Csgi_rooms
     * const csgi_rooms = await prisma.csgi_room.findMany({ take: 10 })
     * 
     * // Only select the `roomid`
     * const csgi_roomWithRoomidOnly = await prisma.csgi_room.findMany({ select: { roomid: true } })
     * 
    **/
    findMany<T extends csgi_roomFindManyArgs>(
      args?: SelectSubset<T, csgi_roomFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<csgi_room>>, PrismaPromise<Array<csgi_roomGetPayload<T>>>>

    /**
     * Create a Csgi_room.
     * @param {csgi_roomCreateArgs} args - Arguments to create a Csgi_room.
     * @example
     * // Create one Csgi_room
     * const Csgi_room = await prisma.csgi_room.create({
     *   data: {
     *     // ... data to create a Csgi_room
     *   }
     * })
     * 
    **/
    create<T extends csgi_roomCreateArgs>(
      args: SelectSubset<T, csgi_roomCreateArgs>
    ): CheckSelect<T, Prisma__csgi_roomClient<csgi_room>, Prisma__csgi_roomClient<csgi_roomGetPayload<T>>>

    /**
     * Create many Csgi_rooms.
     *     @param {csgi_roomCreateManyArgs} args - Arguments to create many Csgi_rooms.
     *     @example
     *     // Create many Csgi_rooms
     *     const csgi_room = await prisma.csgi_room.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends csgi_roomCreateManyArgs>(
      args?: SelectSubset<T, csgi_roomCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Csgi_room.
     * @param {csgi_roomDeleteArgs} args - Arguments to delete one Csgi_room.
     * @example
     * // Delete one Csgi_room
     * const Csgi_room = await prisma.csgi_room.delete({
     *   where: {
     *     // ... filter to delete one Csgi_room
     *   }
     * })
     * 
    **/
    delete<T extends csgi_roomDeleteArgs>(
      args: SelectSubset<T, csgi_roomDeleteArgs>
    ): CheckSelect<T, Prisma__csgi_roomClient<csgi_room>, Prisma__csgi_roomClient<csgi_roomGetPayload<T>>>

    /**
     * Update one Csgi_room.
     * @param {csgi_roomUpdateArgs} args - Arguments to update one Csgi_room.
     * @example
     * // Update one Csgi_room
     * const csgi_room = await prisma.csgi_room.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends csgi_roomUpdateArgs>(
      args: SelectSubset<T, csgi_roomUpdateArgs>
    ): CheckSelect<T, Prisma__csgi_roomClient<csgi_room>, Prisma__csgi_roomClient<csgi_roomGetPayload<T>>>

    /**
     * Delete zero or more Csgi_rooms.
     * @param {csgi_roomDeleteManyArgs} args - Arguments to filter Csgi_rooms to delete.
     * @example
     * // Delete a few Csgi_rooms
     * const { count } = await prisma.csgi_room.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends csgi_roomDeleteManyArgs>(
      args?: SelectSubset<T, csgi_roomDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Csgi_rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_roomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Csgi_rooms
     * const csgi_room = await prisma.csgi_room.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends csgi_roomUpdateManyArgs>(
      args: SelectSubset<T, csgi_roomUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Csgi_room.
     * @param {csgi_roomUpsertArgs} args - Arguments to update or create a Csgi_room.
     * @example
     * // Update or create a Csgi_room
     * const csgi_room = await prisma.csgi_room.upsert({
     *   create: {
     *     // ... data to create a Csgi_room
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Csgi_room we want to update
     *   }
     * })
    **/
    upsert<T extends csgi_roomUpsertArgs>(
      args: SelectSubset<T, csgi_roomUpsertArgs>
    ): CheckSelect<T, Prisma__csgi_roomClient<csgi_room>, Prisma__csgi_roomClient<csgi_roomGetPayload<T>>>

    /**
     * Count the number of Csgi_rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_roomCountArgs} args - Arguments to filter Csgi_rooms to count.
     * @example
     * // Count the number of Csgi_rooms
     * const count = await prisma.csgi_room.count({
     *   where: {
     *     // ... the filter for the Csgi_rooms we want to count
     *   }
     * })
    **/
    count<T extends csgi_roomCountArgs>(
      args?: Subset<T, csgi_roomCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Csgi_roomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Csgi_room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Csgi_roomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Csgi_roomAggregateArgs>(args: Subset<T, Csgi_roomAggregateArgs>): PrismaPromise<GetCsgi_roomAggregateType<T>>

    /**
     * Group by Csgi_room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Csgi_roomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Csgi_roomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Csgi_roomGroupByArgs['orderBy'] }
        : { orderBy?: Csgi_roomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Csgi_roomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCsgi_roomGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for csgi_room.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__csgi_roomClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    csgi_class<T extends csgi_classFindManyArgs = {}>(args?: Subset<T, csgi_classFindManyArgs>): CheckSelect<T, PrismaPromise<Array<csgi_class>>, PrismaPromise<Array<csgi_classGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * csgi_room findUnique
   */
  export type csgi_roomFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the csgi_room
    **/
    select?: csgi_roomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_roomInclude | null
    /**
     * Throw an Error if a csgi_room can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which csgi_room to fetch.
    **/
    where: csgi_roomWhereUniqueInput
  }


  /**
   * csgi_room findFirst
   */
  export type csgi_roomFindFirstArgs = {
    /**
     * Select specific fields to fetch from the csgi_room
    **/
    select?: csgi_roomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_roomInclude | null
    /**
     * Throw an Error if a csgi_room can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which csgi_room to fetch.
    **/
    where?: csgi_roomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_rooms to fetch.
    **/
    orderBy?: Enumerable<csgi_roomOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for csgi_rooms.
    **/
    cursor?: csgi_roomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_rooms from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_rooms.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of csgi_rooms.
    **/
    distinct?: Enumerable<Csgi_roomScalarFieldEnum>
  }


  /**
   * csgi_room findMany
   */
  export type csgi_roomFindManyArgs = {
    /**
     * Select specific fields to fetch from the csgi_room
    **/
    select?: csgi_roomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_roomInclude | null
    /**
     * Filter, which csgi_rooms to fetch.
    **/
    where?: csgi_roomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_rooms to fetch.
    **/
    orderBy?: Enumerable<csgi_roomOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing csgi_rooms.
    **/
    cursor?: csgi_roomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_rooms from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_rooms.
    **/
    skip?: number
    distinct?: Enumerable<Csgi_roomScalarFieldEnum>
  }


  /**
   * csgi_room create
   */
  export type csgi_roomCreateArgs = {
    /**
     * Select specific fields to fetch from the csgi_room
    **/
    select?: csgi_roomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_roomInclude | null
    /**
     * The data needed to create a csgi_room.
    **/
    data: XOR<csgi_roomCreateInput, csgi_roomUncheckedCreateInput>
  }


  /**
   * csgi_room createMany
   */
  export type csgi_roomCreateManyArgs = {
    data: Enumerable<csgi_roomCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * csgi_room update
   */
  export type csgi_roomUpdateArgs = {
    /**
     * Select specific fields to fetch from the csgi_room
    **/
    select?: csgi_roomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_roomInclude | null
    /**
     * The data needed to update a csgi_room.
    **/
    data: XOR<csgi_roomUpdateInput, csgi_roomUncheckedUpdateInput>
    /**
     * Choose, which csgi_room to update.
    **/
    where: csgi_roomWhereUniqueInput
  }


  /**
   * csgi_room updateMany
   */
  export type csgi_roomUpdateManyArgs = {
    data: XOR<csgi_roomUpdateManyMutationInput, csgi_roomUncheckedUpdateManyInput>
    where?: csgi_roomWhereInput
  }


  /**
   * csgi_room upsert
   */
  export type csgi_roomUpsertArgs = {
    /**
     * Select specific fields to fetch from the csgi_room
    **/
    select?: csgi_roomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_roomInclude | null
    /**
     * The filter to search for the csgi_room to update in case it exists.
    **/
    where: csgi_roomWhereUniqueInput
    /**
     * In case the csgi_room found by the `where` argument doesn't exist, create a new csgi_room with this data.
    **/
    create: XOR<csgi_roomCreateInput, csgi_roomUncheckedCreateInput>
    /**
     * In case the csgi_room was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<csgi_roomUpdateInput, csgi_roomUncheckedUpdateInput>
  }


  /**
   * csgi_room delete
   */
  export type csgi_roomDeleteArgs = {
    /**
     * Select specific fields to fetch from the csgi_room
    **/
    select?: csgi_roomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_roomInclude | null
    /**
     * Filter which csgi_room to delete.
    **/
    where: csgi_roomWhereUniqueInput
  }


  /**
   * csgi_room deleteMany
   */
  export type csgi_roomDeleteManyArgs = {
    where?: csgi_roomWhereInput
  }


  /**
   * csgi_room without action
   */
  export type csgi_roomArgs = {
    /**
     * Select specific fields to fetch from the csgi_room
    **/
    select?: csgi_roomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_roomInclude | null
  }



  /**
   * Model csgi_roster
   */


  export type AggregateCsgi_roster = {
    count: Csgi_rosterCountAggregateOutputType | null
    avg: Csgi_rosterAvgAggregateOutputType | null
    sum: Csgi_rosterSumAggregateOutputType | null
    min: Csgi_rosterMinAggregateOutputType | null
    max: Csgi_rosterMaxAggregateOutputType | null
  }

  export type Csgi_rosterAvgAggregateOutputType = {
    rosterid: number | null
    classid: number | null
    periodid: number | null
    studentid: number | null
  }

  export type Csgi_rosterSumAggregateOutputType = {
    rosterid: number | null
    classid: number | null
    periodid: number | null
    studentid: number | null
  }

  export type Csgi_rosterMinAggregateOutputType = {
    rosterid: number | null
    classid: number | null
    periodid: number | null
    studentid: number | null
    attended_yn: string | null
    created_date: Date | null
    created_by: string | null
    updated_date: Date | null
    updated_by: string | null
  }

  export type Csgi_rosterMaxAggregateOutputType = {
    rosterid: number | null
    classid: number | null
    periodid: number | null
    studentid: number | null
    attended_yn: string | null
    created_date: Date | null
    created_by: string | null
    updated_date: Date | null
    updated_by: string | null
  }

  export type Csgi_rosterCountAggregateOutputType = {
    rosterid: number
    classid: number
    periodid: number
    studentid: number
    attended_yn: number
    created_date: number
    created_by: number
    updated_date: number
    updated_by: number
    _all: number
  }


  export type Csgi_rosterAvgAggregateInputType = {
    rosterid?: true
    classid?: true
    periodid?: true
    studentid?: true
  }

  export type Csgi_rosterSumAggregateInputType = {
    rosterid?: true
    classid?: true
    periodid?: true
    studentid?: true
  }

  export type Csgi_rosterMinAggregateInputType = {
    rosterid?: true
    classid?: true
    periodid?: true
    studentid?: true
    attended_yn?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
  }

  export type Csgi_rosterMaxAggregateInputType = {
    rosterid?: true
    classid?: true
    periodid?: true
    studentid?: true
    attended_yn?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
  }

  export type Csgi_rosterCountAggregateInputType = {
    rosterid?: true
    classid?: true
    periodid?: true
    studentid?: true
    attended_yn?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
    _all?: true
  }

  export type Csgi_rosterAggregateArgs = {
    /**
     * Filter which csgi_roster to aggregate.
    **/
    where?: csgi_rosterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_rosters to fetch.
    **/
    orderBy?: Enumerable<csgi_rosterOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: csgi_rosterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_rosters from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_rosters.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned csgi_rosters
    **/
    count?: true | Csgi_rosterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Csgi_rosterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Csgi_rosterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Csgi_rosterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Csgi_rosterMaxAggregateInputType
  }

  export type GetCsgi_rosterAggregateType<T extends Csgi_rosterAggregateArgs> = {
    [P in keyof T & keyof AggregateCsgi_roster]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCsgi_roster[P]>
      : GetScalarType<T[P], AggregateCsgi_roster[P]>
  }


    
    
  export type Csgi_rosterGroupByArgs = {
    where?: csgi_rosterWhereInput
    orderBy?: Enumerable<csgi_rosterOrderByInput>
    by: Array<Csgi_rosterScalarFieldEnum>
    having?: csgi_rosterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: Csgi_rosterCountAggregateInputType | true
    avg?: Csgi_rosterAvgAggregateInputType
    sum?: Csgi_rosterSumAggregateInputType
    min?: Csgi_rosterMinAggregateInputType
    max?: Csgi_rosterMaxAggregateInputType
  }


  export type Csgi_rosterGroupByOutputType = {
    rosterid: number
    classid: number
    periodid: number
    studentid: number
    attended_yn: string
    created_date: Date
    created_by: string
    updated_date: Date | null
    updated_by: string | null
    count: Csgi_rosterCountAggregateOutputType | null
    avg: Csgi_rosterAvgAggregateOutputType | null
    sum: Csgi_rosterSumAggregateOutputType | null
    min: Csgi_rosterMinAggregateOutputType | null
    max: Csgi_rosterMaxAggregateOutputType | null
  }

  type GetCsgi_rosterGroupByPayload<T extends Csgi_rosterGroupByArgs> = Promise<Array<
    PickArray<Csgi_rosterGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof Csgi_rosterGroupByOutputType))]: GetScalarType<T[P], Csgi_rosterGroupByOutputType[P]>
    }
  >>
    

  export type csgi_rosterSelect = {
    rosterid?: boolean
    classid?: boolean
    periodid?: boolean
    studentid?: boolean
    attended_yn?: boolean
    created_date?: boolean
    created_by?: boolean
    updated_date?: boolean
    updated_by?: boolean
    csgi_class?: boolean | csgi_classArgs
    csgi_period?: boolean | csgi_periodArgs
    csgi_student?: boolean | csgi_studentArgs
  }

  export type csgi_rosterInclude = {
    csgi_class?: boolean | csgi_classArgs
    csgi_period?: boolean | csgi_periodArgs
    csgi_student?: boolean | csgi_studentArgs
  }

  export type csgi_rosterGetPayload<
    S extends boolean | null | undefined | csgi_rosterArgs,
    U = keyof S
      > = S extends true
        ? csgi_roster
    : S extends undefined
    ? never
    : S extends csgi_rosterArgs | csgi_rosterFindManyArgs
    ?'include' extends U
    ? csgi_roster  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'csgi_class'
        ? csgi_classGetPayload<S['include'][P]> :
        P extends 'csgi_period'
        ? csgi_periodGetPayload<S['include'][P]> :
        P extends 'csgi_student'
        ? csgi_studentGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof csgi_roster ?csgi_roster [P]
  : 
          P extends 'csgi_class'
        ? csgi_classGetPayload<S['select'][P]> :
        P extends 'csgi_period'
        ? csgi_periodGetPayload<S['select'][P]> :
        P extends 'csgi_student'
        ? csgi_studentGetPayload<S['select'][P]> : never
  } 
    : csgi_roster
  : csgi_roster


  type csgi_rosterCountArgs = Merge<
    Omit<csgi_rosterFindManyArgs, 'select' | 'include'> & {
      select?: Csgi_rosterCountAggregateInputType | true
    }
  >

  export interface csgi_rosterDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Csgi_roster that matches the filter.
     * @param {csgi_rosterFindUniqueArgs} args - Arguments to find a Csgi_roster
     * @example
     * // Get one Csgi_roster
     * const csgi_roster = await prisma.csgi_roster.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends csgi_rosterFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, csgi_rosterFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'csgi_roster'> extends True ? CheckSelect<T, Prisma__csgi_rosterClient<csgi_roster>, Prisma__csgi_rosterClient<csgi_rosterGetPayload<T>>> : CheckSelect<T, Prisma__csgi_rosterClient<csgi_roster | null >, Prisma__csgi_rosterClient<csgi_rosterGetPayload<T> | null >>

    /**
     * Find the first Csgi_roster that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_rosterFindFirstArgs} args - Arguments to find a Csgi_roster
     * @example
     * // Get one Csgi_roster
     * const csgi_roster = await prisma.csgi_roster.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends csgi_rosterFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, csgi_rosterFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'csgi_roster'> extends True ? CheckSelect<T, Prisma__csgi_rosterClient<csgi_roster>, Prisma__csgi_rosterClient<csgi_rosterGetPayload<T>>> : CheckSelect<T, Prisma__csgi_rosterClient<csgi_roster | null >, Prisma__csgi_rosterClient<csgi_rosterGetPayload<T> | null >>

    /**
     * Find zero or more Csgi_rosters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_rosterFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Csgi_rosters
     * const csgi_rosters = await prisma.csgi_roster.findMany()
     * 
     * // Get first 10 Csgi_rosters
     * const csgi_rosters = await prisma.csgi_roster.findMany({ take: 10 })
     * 
     * // Only select the `rosterid`
     * const csgi_rosterWithRosteridOnly = await prisma.csgi_roster.findMany({ select: { rosterid: true } })
     * 
    **/
    findMany<T extends csgi_rosterFindManyArgs>(
      args?: SelectSubset<T, csgi_rosterFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<csgi_roster>>, PrismaPromise<Array<csgi_rosterGetPayload<T>>>>

    /**
     * Create a Csgi_roster.
     * @param {csgi_rosterCreateArgs} args - Arguments to create a Csgi_roster.
     * @example
     * // Create one Csgi_roster
     * const Csgi_roster = await prisma.csgi_roster.create({
     *   data: {
     *     // ... data to create a Csgi_roster
     *   }
     * })
     * 
    **/
    create<T extends csgi_rosterCreateArgs>(
      args: SelectSubset<T, csgi_rosterCreateArgs>
    ): CheckSelect<T, Prisma__csgi_rosterClient<csgi_roster>, Prisma__csgi_rosterClient<csgi_rosterGetPayload<T>>>

    /**
     * Create many Csgi_rosters.
     *     @param {csgi_rosterCreateManyArgs} args - Arguments to create many Csgi_rosters.
     *     @example
     *     // Create many Csgi_rosters
     *     const csgi_roster = await prisma.csgi_roster.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends csgi_rosterCreateManyArgs>(
      args?: SelectSubset<T, csgi_rosterCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Csgi_roster.
     * @param {csgi_rosterDeleteArgs} args - Arguments to delete one Csgi_roster.
     * @example
     * // Delete one Csgi_roster
     * const Csgi_roster = await prisma.csgi_roster.delete({
     *   where: {
     *     // ... filter to delete one Csgi_roster
     *   }
     * })
     * 
    **/
    delete<T extends csgi_rosterDeleteArgs>(
      args: SelectSubset<T, csgi_rosterDeleteArgs>
    ): CheckSelect<T, Prisma__csgi_rosterClient<csgi_roster>, Prisma__csgi_rosterClient<csgi_rosterGetPayload<T>>>

    /**
     * Update one Csgi_roster.
     * @param {csgi_rosterUpdateArgs} args - Arguments to update one Csgi_roster.
     * @example
     * // Update one Csgi_roster
     * const csgi_roster = await prisma.csgi_roster.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends csgi_rosterUpdateArgs>(
      args: SelectSubset<T, csgi_rosterUpdateArgs>
    ): CheckSelect<T, Prisma__csgi_rosterClient<csgi_roster>, Prisma__csgi_rosterClient<csgi_rosterGetPayload<T>>>

    /**
     * Delete zero or more Csgi_rosters.
     * @param {csgi_rosterDeleteManyArgs} args - Arguments to filter Csgi_rosters to delete.
     * @example
     * // Delete a few Csgi_rosters
     * const { count } = await prisma.csgi_roster.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends csgi_rosterDeleteManyArgs>(
      args?: SelectSubset<T, csgi_rosterDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Csgi_rosters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_rosterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Csgi_rosters
     * const csgi_roster = await prisma.csgi_roster.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends csgi_rosterUpdateManyArgs>(
      args: SelectSubset<T, csgi_rosterUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Csgi_roster.
     * @param {csgi_rosterUpsertArgs} args - Arguments to update or create a Csgi_roster.
     * @example
     * // Update or create a Csgi_roster
     * const csgi_roster = await prisma.csgi_roster.upsert({
     *   create: {
     *     // ... data to create a Csgi_roster
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Csgi_roster we want to update
     *   }
     * })
    **/
    upsert<T extends csgi_rosterUpsertArgs>(
      args: SelectSubset<T, csgi_rosterUpsertArgs>
    ): CheckSelect<T, Prisma__csgi_rosterClient<csgi_roster>, Prisma__csgi_rosterClient<csgi_rosterGetPayload<T>>>

    /**
     * Count the number of Csgi_rosters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_rosterCountArgs} args - Arguments to filter Csgi_rosters to count.
     * @example
     * // Count the number of Csgi_rosters
     * const count = await prisma.csgi_roster.count({
     *   where: {
     *     // ... the filter for the Csgi_rosters we want to count
     *   }
     * })
    **/
    count<T extends csgi_rosterCountArgs>(
      args?: Subset<T, csgi_rosterCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Csgi_rosterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Csgi_roster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Csgi_rosterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Csgi_rosterAggregateArgs>(args: Subset<T, Csgi_rosterAggregateArgs>): PrismaPromise<GetCsgi_rosterAggregateType<T>>

    /**
     * Group by Csgi_roster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Csgi_rosterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Csgi_rosterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Csgi_rosterGroupByArgs['orderBy'] }
        : { orderBy?: Csgi_rosterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Csgi_rosterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCsgi_rosterGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for csgi_roster.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__csgi_rosterClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    csgi_class<T extends csgi_classArgs = {}>(args?: Subset<T, csgi_classArgs>): CheckSelect<T, Prisma__csgi_classClient<csgi_class | null >, Prisma__csgi_classClient<csgi_classGetPayload<T> | null >>;

    csgi_period<T extends csgi_periodArgs = {}>(args?: Subset<T, csgi_periodArgs>): CheckSelect<T, Prisma__csgi_periodClient<csgi_period | null >, Prisma__csgi_periodClient<csgi_periodGetPayload<T> | null >>;

    csgi_student<T extends csgi_studentArgs = {}>(args?: Subset<T, csgi_studentArgs>): CheckSelect<T, Prisma__csgi_studentClient<csgi_student | null >, Prisma__csgi_studentClient<csgi_studentGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * csgi_roster findUnique
   */
  export type csgi_rosterFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the csgi_roster
    **/
    select?: csgi_rosterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_rosterInclude | null
    /**
     * Throw an Error if a csgi_roster can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which csgi_roster to fetch.
    **/
    where: csgi_rosterWhereUniqueInput
  }


  /**
   * csgi_roster findFirst
   */
  export type csgi_rosterFindFirstArgs = {
    /**
     * Select specific fields to fetch from the csgi_roster
    **/
    select?: csgi_rosterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_rosterInclude | null
    /**
     * Throw an Error if a csgi_roster can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which csgi_roster to fetch.
    **/
    where?: csgi_rosterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_rosters to fetch.
    **/
    orderBy?: Enumerable<csgi_rosterOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for csgi_rosters.
    **/
    cursor?: csgi_rosterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_rosters from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_rosters.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of csgi_rosters.
    **/
    distinct?: Enumerable<Csgi_rosterScalarFieldEnum>
  }


  /**
   * csgi_roster findMany
   */
  export type csgi_rosterFindManyArgs = {
    /**
     * Select specific fields to fetch from the csgi_roster
    **/
    select?: csgi_rosterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_rosterInclude | null
    /**
     * Filter, which csgi_rosters to fetch.
    **/
    where?: csgi_rosterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_rosters to fetch.
    **/
    orderBy?: Enumerable<csgi_rosterOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing csgi_rosters.
    **/
    cursor?: csgi_rosterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_rosters from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_rosters.
    **/
    skip?: number
    distinct?: Enumerable<Csgi_rosterScalarFieldEnum>
  }


  /**
   * csgi_roster create
   */
  export type csgi_rosterCreateArgs = {
    /**
     * Select specific fields to fetch from the csgi_roster
    **/
    select?: csgi_rosterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_rosterInclude | null
    /**
     * The data needed to create a csgi_roster.
    **/
    data: XOR<csgi_rosterCreateInput, csgi_rosterUncheckedCreateInput>
  }


  /**
   * csgi_roster createMany
   */
  export type csgi_rosterCreateManyArgs = {
    data: Enumerable<csgi_rosterCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * csgi_roster update
   */
  export type csgi_rosterUpdateArgs = {
    /**
     * Select specific fields to fetch from the csgi_roster
    **/
    select?: csgi_rosterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_rosterInclude | null
    /**
     * The data needed to update a csgi_roster.
    **/
    data: XOR<csgi_rosterUpdateInput, csgi_rosterUncheckedUpdateInput>
    /**
     * Choose, which csgi_roster to update.
    **/
    where: csgi_rosterWhereUniqueInput
  }


  /**
   * csgi_roster updateMany
   */
  export type csgi_rosterUpdateManyArgs = {
    data: XOR<csgi_rosterUpdateManyMutationInput, csgi_rosterUncheckedUpdateManyInput>
    where?: csgi_rosterWhereInput
  }


  /**
   * csgi_roster upsert
   */
  export type csgi_rosterUpsertArgs = {
    /**
     * Select specific fields to fetch from the csgi_roster
    **/
    select?: csgi_rosterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_rosterInclude | null
    /**
     * The filter to search for the csgi_roster to update in case it exists.
    **/
    where: csgi_rosterWhereUniqueInput
    /**
     * In case the csgi_roster found by the `where` argument doesn't exist, create a new csgi_roster with this data.
    **/
    create: XOR<csgi_rosterCreateInput, csgi_rosterUncheckedCreateInput>
    /**
     * In case the csgi_roster was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<csgi_rosterUpdateInput, csgi_rosterUncheckedUpdateInput>
  }


  /**
   * csgi_roster delete
   */
  export type csgi_rosterDeleteArgs = {
    /**
     * Select specific fields to fetch from the csgi_roster
    **/
    select?: csgi_rosterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_rosterInclude | null
    /**
     * Filter which csgi_roster to delete.
    **/
    where: csgi_rosterWhereUniqueInput
  }


  /**
   * csgi_roster deleteMany
   */
  export type csgi_rosterDeleteManyArgs = {
    where?: csgi_rosterWhereInput
  }


  /**
   * csgi_roster without action
   */
  export type csgi_rosterArgs = {
    /**
     * Select specific fields to fetch from the csgi_roster
    **/
    select?: csgi_rosterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_rosterInclude | null
  }



  /**
   * Model csgi_student
   */


  export type AggregateCsgi_student = {
    count: Csgi_studentCountAggregateOutputType | null
    avg: Csgi_studentAvgAggregateOutputType | null
    sum: Csgi_studentSumAggregateOutputType | null
    min: Csgi_studentMinAggregateOutputType | null
    max: Csgi_studentMaxAggregateOutputType | null
  }

  export type Csgi_studentAvgAggregateOutputType = {
    studentid: number | null
  }

  export type Csgi_studentSumAggregateOutputType = {
    studentid: number | null
  }

  export type Csgi_studentMinAggregateOutputType = {
    studentid: number | null
    student_name: string | null
    last_name: string | null
    date_of_birth: Date | null
    gender: string | null
    created_date: Date | null
    created_by: string | null
    updated_date: Date | null
    updated_by: string | null
  }

  export type Csgi_studentMaxAggregateOutputType = {
    studentid: number | null
    student_name: string | null
    last_name: string | null
    date_of_birth: Date | null
    gender: string | null
    created_date: Date | null
    created_by: string | null
    updated_date: Date | null
    updated_by: string | null
  }

  export type Csgi_studentCountAggregateOutputType = {
    studentid: number
    student_name: number
    last_name: number
    date_of_birth: number
    gender: number
    created_date: number
    created_by: number
    updated_date: number
    updated_by: number
    _all: number
  }


  export type Csgi_studentAvgAggregateInputType = {
    studentid?: true
  }

  export type Csgi_studentSumAggregateInputType = {
    studentid?: true
  }

  export type Csgi_studentMinAggregateInputType = {
    studentid?: true
    student_name?: true
    last_name?: true
    date_of_birth?: true
    gender?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
  }

  export type Csgi_studentMaxAggregateInputType = {
    studentid?: true
    student_name?: true
    last_name?: true
    date_of_birth?: true
    gender?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
  }

  export type Csgi_studentCountAggregateInputType = {
    studentid?: true
    student_name?: true
    last_name?: true
    date_of_birth?: true
    gender?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
    _all?: true
  }

  export type Csgi_studentAggregateArgs = {
    /**
     * Filter which csgi_student to aggregate.
    **/
    where?: csgi_studentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_students to fetch.
    **/
    orderBy?: Enumerable<csgi_studentOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: csgi_studentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_students from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_students.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned csgi_students
    **/
    count?: true | Csgi_studentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Csgi_studentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Csgi_studentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Csgi_studentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Csgi_studentMaxAggregateInputType
  }

  export type GetCsgi_studentAggregateType<T extends Csgi_studentAggregateArgs> = {
    [P in keyof T & keyof AggregateCsgi_student]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCsgi_student[P]>
      : GetScalarType<T[P], AggregateCsgi_student[P]>
  }


    
    
  export type Csgi_studentGroupByArgs = {
    where?: csgi_studentWhereInput
    orderBy?: Enumerable<csgi_studentOrderByInput>
    by: Array<Csgi_studentScalarFieldEnum>
    having?: csgi_studentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: Csgi_studentCountAggregateInputType | true
    avg?: Csgi_studentAvgAggregateInputType
    sum?: Csgi_studentSumAggregateInputType
    min?: Csgi_studentMinAggregateInputType
    max?: Csgi_studentMaxAggregateInputType
  }


  export type Csgi_studentGroupByOutputType = {
    studentid: number
    student_name: string | null
    last_name: string
    date_of_birth: Date | null
    gender: string | null
    created_date: Date
    created_by: string
    updated_date: Date | null
    updated_by: string | null
    count: Csgi_studentCountAggregateOutputType | null
    avg: Csgi_studentAvgAggregateOutputType | null
    sum: Csgi_studentSumAggregateOutputType | null
    min: Csgi_studentMinAggregateOutputType | null
    max: Csgi_studentMaxAggregateOutputType | null
  }

  type GetCsgi_studentGroupByPayload<T extends Csgi_studentGroupByArgs> = Promise<Array<
    PickArray<Csgi_studentGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof Csgi_studentGroupByOutputType))]: GetScalarType<T[P], Csgi_studentGroupByOutputType[P]>
    }
  >>
    

  export type csgi_studentSelect = {
    studentid?: boolean
    student_name?: boolean
    last_name?: boolean
    date_of_birth?: boolean
    gender?: boolean
    created_date?: boolean
    created_by?: boolean
    updated_date?: boolean
    updated_by?: boolean
    csgi_roster?: boolean | csgi_rosterFindManyArgs
  }

  export type csgi_studentInclude = {
    csgi_roster?: boolean | csgi_rosterFindManyArgs
  }

  export type csgi_studentGetPayload<
    S extends boolean | null | undefined | csgi_studentArgs,
    U = keyof S
      > = S extends true
        ? csgi_student
    : S extends undefined
    ? never
    : S extends csgi_studentArgs | csgi_studentFindManyArgs
    ?'include' extends U
    ? csgi_student  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'csgi_roster'
        ? Array < csgi_rosterGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof csgi_student ?csgi_student [P]
  : 
          P extends 'csgi_roster'
        ? Array < csgi_rosterGetPayload<S['select'][P]>>  : never
  } 
    : csgi_student
  : csgi_student


  type csgi_studentCountArgs = Merge<
    Omit<csgi_studentFindManyArgs, 'select' | 'include'> & {
      select?: Csgi_studentCountAggregateInputType | true
    }
  >

  export interface csgi_studentDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Csgi_student that matches the filter.
     * @param {csgi_studentFindUniqueArgs} args - Arguments to find a Csgi_student
     * @example
     * // Get one Csgi_student
     * const csgi_student = await prisma.csgi_student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends csgi_studentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, csgi_studentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'csgi_student'> extends True ? CheckSelect<T, Prisma__csgi_studentClient<csgi_student>, Prisma__csgi_studentClient<csgi_studentGetPayload<T>>> : CheckSelect<T, Prisma__csgi_studentClient<csgi_student | null >, Prisma__csgi_studentClient<csgi_studentGetPayload<T> | null >>

    /**
     * Find the first Csgi_student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_studentFindFirstArgs} args - Arguments to find a Csgi_student
     * @example
     * // Get one Csgi_student
     * const csgi_student = await prisma.csgi_student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends csgi_studentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, csgi_studentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'csgi_student'> extends True ? CheckSelect<T, Prisma__csgi_studentClient<csgi_student>, Prisma__csgi_studentClient<csgi_studentGetPayload<T>>> : CheckSelect<T, Prisma__csgi_studentClient<csgi_student | null >, Prisma__csgi_studentClient<csgi_studentGetPayload<T> | null >>

    /**
     * Find zero or more Csgi_students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_studentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Csgi_students
     * const csgi_students = await prisma.csgi_student.findMany()
     * 
     * // Get first 10 Csgi_students
     * const csgi_students = await prisma.csgi_student.findMany({ take: 10 })
     * 
     * // Only select the `studentid`
     * const csgi_studentWithStudentidOnly = await prisma.csgi_student.findMany({ select: { studentid: true } })
     * 
    **/
    findMany<T extends csgi_studentFindManyArgs>(
      args?: SelectSubset<T, csgi_studentFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<csgi_student>>, PrismaPromise<Array<csgi_studentGetPayload<T>>>>

    /**
     * Create a Csgi_student.
     * @param {csgi_studentCreateArgs} args - Arguments to create a Csgi_student.
     * @example
     * // Create one Csgi_student
     * const Csgi_student = await prisma.csgi_student.create({
     *   data: {
     *     // ... data to create a Csgi_student
     *   }
     * })
     * 
    **/
    create<T extends csgi_studentCreateArgs>(
      args: SelectSubset<T, csgi_studentCreateArgs>
    ): CheckSelect<T, Prisma__csgi_studentClient<csgi_student>, Prisma__csgi_studentClient<csgi_studentGetPayload<T>>>

    /**
     * Create many Csgi_students.
     *     @param {csgi_studentCreateManyArgs} args - Arguments to create many Csgi_students.
     *     @example
     *     // Create many Csgi_students
     *     const csgi_student = await prisma.csgi_student.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends csgi_studentCreateManyArgs>(
      args?: SelectSubset<T, csgi_studentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Csgi_student.
     * @param {csgi_studentDeleteArgs} args - Arguments to delete one Csgi_student.
     * @example
     * // Delete one Csgi_student
     * const Csgi_student = await prisma.csgi_student.delete({
     *   where: {
     *     // ... filter to delete one Csgi_student
     *   }
     * })
     * 
    **/
    delete<T extends csgi_studentDeleteArgs>(
      args: SelectSubset<T, csgi_studentDeleteArgs>
    ): CheckSelect<T, Prisma__csgi_studentClient<csgi_student>, Prisma__csgi_studentClient<csgi_studentGetPayload<T>>>

    /**
     * Update one Csgi_student.
     * @param {csgi_studentUpdateArgs} args - Arguments to update one Csgi_student.
     * @example
     * // Update one Csgi_student
     * const csgi_student = await prisma.csgi_student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends csgi_studentUpdateArgs>(
      args: SelectSubset<T, csgi_studentUpdateArgs>
    ): CheckSelect<T, Prisma__csgi_studentClient<csgi_student>, Prisma__csgi_studentClient<csgi_studentGetPayload<T>>>

    /**
     * Delete zero or more Csgi_students.
     * @param {csgi_studentDeleteManyArgs} args - Arguments to filter Csgi_students to delete.
     * @example
     * // Delete a few Csgi_students
     * const { count } = await prisma.csgi_student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends csgi_studentDeleteManyArgs>(
      args?: SelectSubset<T, csgi_studentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Csgi_students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_studentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Csgi_students
     * const csgi_student = await prisma.csgi_student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends csgi_studentUpdateManyArgs>(
      args: SelectSubset<T, csgi_studentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Csgi_student.
     * @param {csgi_studentUpsertArgs} args - Arguments to update or create a Csgi_student.
     * @example
     * // Update or create a Csgi_student
     * const csgi_student = await prisma.csgi_student.upsert({
     *   create: {
     *     // ... data to create a Csgi_student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Csgi_student we want to update
     *   }
     * })
    **/
    upsert<T extends csgi_studentUpsertArgs>(
      args: SelectSubset<T, csgi_studentUpsertArgs>
    ): CheckSelect<T, Prisma__csgi_studentClient<csgi_student>, Prisma__csgi_studentClient<csgi_studentGetPayload<T>>>

    /**
     * Count the number of Csgi_students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_studentCountArgs} args - Arguments to filter Csgi_students to count.
     * @example
     * // Count the number of Csgi_students
     * const count = await prisma.csgi_student.count({
     *   where: {
     *     // ... the filter for the Csgi_students we want to count
     *   }
     * })
    **/
    count<T extends csgi_studentCountArgs>(
      args?: Subset<T, csgi_studentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Csgi_studentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Csgi_student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Csgi_studentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Csgi_studentAggregateArgs>(args: Subset<T, Csgi_studentAggregateArgs>): PrismaPromise<GetCsgi_studentAggregateType<T>>

    /**
     * Group by Csgi_student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Csgi_studentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Csgi_studentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Csgi_studentGroupByArgs['orderBy'] }
        : { orderBy?: Csgi_studentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Csgi_studentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCsgi_studentGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for csgi_student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__csgi_studentClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    csgi_roster<T extends csgi_rosterFindManyArgs = {}>(args?: Subset<T, csgi_rosterFindManyArgs>): CheckSelect<T, PrismaPromise<Array<csgi_roster>>, PrismaPromise<Array<csgi_rosterGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * csgi_student findUnique
   */
  export type csgi_studentFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the csgi_student
    **/
    select?: csgi_studentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_studentInclude | null
    /**
     * Throw an Error if a csgi_student can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which csgi_student to fetch.
    **/
    where: csgi_studentWhereUniqueInput
  }


  /**
   * csgi_student findFirst
   */
  export type csgi_studentFindFirstArgs = {
    /**
     * Select specific fields to fetch from the csgi_student
    **/
    select?: csgi_studentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_studentInclude | null
    /**
     * Throw an Error if a csgi_student can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which csgi_student to fetch.
    **/
    where?: csgi_studentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_students to fetch.
    **/
    orderBy?: Enumerable<csgi_studentOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for csgi_students.
    **/
    cursor?: csgi_studentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_students from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_students.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of csgi_students.
    **/
    distinct?: Enumerable<Csgi_studentScalarFieldEnum>
  }


  /**
   * csgi_student findMany
   */
  export type csgi_studentFindManyArgs = {
    /**
     * Select specific fields to fetch from the csgi_student
    **/
    select?: csgi_studentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_studentInclude | null
    /**
     * Filter, which csgi_students to fetch.
    **/
    where?: csgi_studentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_students to fetch.
    **/
    orderBy?: Enumerable<csgi_studentOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing csgi_students.
    **/
    cursor?: csgi_studentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_students from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_students.
    **/
    skip?: number
    distinct?: Enumerable<Csgi_studentScalarFieldEnum>
  }


  /**
   * csgi_student create
   */
  export type csgi_studentCreateArgs = {
    /**
     * Select specific fields to fetch from the csgi_student
    **/
    select?: csgi_studentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_studentInclude | null
    /**
     * The data needed to create a csgi_student.
    **/
    data: XOR<csgi_studentCreateInput, csgi_studentUncheckedCreateInput>
  }


  /**
   * csgi_student createMany
   */
  export type csgi_studentCreateManyArgs = {
    data: Enumerable<csgi_studentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * csgi_student update
   */
  export type csgi_studentUpdateArgs = {
    /**
     * Select specific fields to fetch from the csgi_student
    **/
    select?: csgi_studentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_studentInclude | null
    /**
     * The data needed to update a csgi_student.
    **/
    data: XOR<csgi_studentUpdateInput, csgi_studentUncheckedUpdateInput>
    /**
     * Choose, which csgi_student to update.
    **/
    where: csgi_studentWhereUniqueInput
  }


  /**
   * csgi_student updateMany
   */
  export type csgi_studentUpdateManyArgs = {
    data: XOR<csgi_studentUpdateManyMutationInput, csgi_studentUncheckedUpdateManyInput>
    where?: csgi_studentWhereInput
  }


  /**
   * csgi_student upsert
   */
  export type csgi_studentUpsertArgs = {
    /**
     * Select specific fields to fetch from the csgi_student
    **/
    select?: csgi_studentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_studentInclude | null
    /**
     * The filter to search for the csgi_student to update in case it exists.
    **/
    where: csgi_studentWhereUniqueInput
    /**
     * In case the csgi_student found by the `where` argument doesn't exist, create a new csgi_student with this data.
    **/
    create: XOR<csgi_studentCreateInput, csgi_studentUncheckedCreateInput>
    /**
     * In case the csgi_student was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<csgi_studentUpdateInput, csgi_studentUncheckedUpdateInput>
  }


  /**
   * csgi_student delete
   */
  export type csgi_studentDeleteArgs = {
    /**
     * Select specific fields to fetch from the csgi_student
    **/
    select?: csgi_studentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_studentInclude | null
    /**
     * Filter which csgi_student to delete.
    **/
    where: csgi_studentWhereUniqueInput
  }


  /**
   * csgi_student deleteMany
   */
  export type csgi_studentDeleteManyArgs = {
    where?: csgi_studentWhereInput
  }


  /**
   * csgi_student without action
   */
  export type csgi_studentArgs = {
    /**
     * Select specific fields to fetch from the csgi_student
    **/
    select?: csgi_studentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_studentInclude | null
  }



  /**
   * Model csgi_user
   */


  export type AggregateCsgi_user = {
    count: Csgi_userCountAggregateOutputType | null
    avg: Csgi_userAvgAggregateOutputType | null
    sum: Csgi_userSumAggregateOutputType | null
    min: Csgi_userMinAggregateOutputType | null
    max: Csgi_userMaxAggregateOutputType | null
  }

  export type Csgi_userAvgAggregateOutputType = {
    userid: number | null
  }

  export type Csgi_userSumAggregateOutputType = {
    userid: number | null
  }

  export type Csgi_userMinAggregateOutputType = {
    userid: number | null
    username: string | null
    email: string | null
    first_name: string | null
    last_name: string | null
    password: string | null
    created_date: Date | null
    created_by: string | null
    updated_date: Date | null
    updated_by: string | null
  }

  export type Csgi_userMaxAggregateOutputType = {
    userid: number | null
    username: string | null
    email: string | null
    first_name: string | null
    last_name: string | null
    password: string | null
    created_date: Date | null
    created_by: string | null
    updated_date: Date | null
    updated_by: string | null
  }

  export type Csgi_userCountAggregateOutputType = {
    userid: number
    username: number
    email: number
    first_name: number
    last_name: number
    password: number
    created_date: number
    created_by: number
    updated_date: number
    updated_by: number
    _all: number
  }


  export type Csgi_userAvgAggregateInputType = {
    userid?: true
  }

  export type Csgi_userSumAggregateInputType = {
    userid?: true
  }

  export type Csgi_userMinAggregateInputType = {
    userid?: true
    username?: true
    email?: true
    first_name?: true
    last_name?: true
    password?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
  }

  export type Csgi_userMaxAggregateInputType = {
    userid?: true
    username?: true
    email?: true
    first_name?: true
    last_name?: true
    password?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
  }

  export type Csgi_userCountAggregateInputType = {
    userid?: true
    username?: true
    email?: true
    first_name?: true
    last_name?: true
    password?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
    _all?: true
  }

  export type Csgi_userAggregateArgs = {
    /**
     * Filter which csgi_user to aggregate.
    **/
    where?: csgi_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_users to fetch.
    **/
    orderBy?: Enumerable<csgi_userOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: csgi_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned csgi_users
    **/
    count?: true | Csgi_userCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Csgi_userAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Csgi_userSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Csgi_userMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Csgi_userMaxAggregateInputType
  }

  export type GetCsgi_userAggregateType<T extends Csgi_userAggregateArgs> = {
    [P in keyof T & keyof AggregateCsgi_user]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCsgi_user[P]>
      : GetScalarType<T[P], AggregateCsgi_user[P]>
  }


    
    
  export type Csgi_userGroupByArgs = {
    where?: csgi_userWhereInput
    orderBy?: Enumerable<csgi_userOrderByInput>
    by: Array<Csgi_userScalarFieldEnum>
    having?: csgi_userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: Csgi_userCountAggregateInputType | true
    avg?: Csgi_userAvgAggregateInputType
    sum?: Csgi_userSumAggregateInputType
    min?: Csgi_userMinAggregateInputType
    max?: Csgi_userMaxAggregateInputType
  }


  export type Csgi_userGroupByOutputType = {
    userid: number
    username: string
    email: string
    first_name: string | null
    last_name: string
    password: string
    created_date: Date
    created_by: string | null
    updated_date: Date | null
    updated_by: string | null
    count: Csgi_userCountAggregateOutputType | null
    avg: Csgi_userAvgAggregateOutputType | null
    sum: Csgi_userSumAggregateOutputType | null
    min: Csgi_userMinAggregateOutputType | null
    max: Csgi_userMaxAggregateOutputType | null
  }

  type GetCsgi_userGroupByPayload<T extends Csgi_userGroupByArgs> = Promise<Array<
    PickArray<Csgi_userGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof Csgi_userGroupByOutputType))]: GetScalarType<T[P], Csgi_userGroupByOutputType[P]>
    }
  >>
    

  export type csgi_userSelect = {
    userid?: boolean
    username?: boolean
    email?: boolean
    first_name?: boolean
    last_name?: boolean
    password?: boolean
    created_date?: boolean
    created_by?: boolean
    updated_date?: boolean
    updated_by?: boolean
    csgi_class?: boolean | csgi_classFindManyArgs
    csgi_user_role?: boolean | csgi_user_roleFindManyArgs
  }

  export type csgi_userInclude = {
    csgi_class?: boolean | csgi_classFindManyArgs
    csgi_user_role?: boolean | csgi_user_roleFindManyArgs
  }

  export type csgi_userGetPayload<
    S extends boolean | null | undefined | csgi_userArgs,
    U = keyof S
      > = S extends true
        ? csgi_user
    : S extends undefined
    ? never
    : S extends csgi_userArgs | csgi_userFindManyArgs
    ?'include' extends U
    ? csgi_user  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'csgi_class'
        ? Array < csgi_classGetPayload<S['include'][P]>>  :
        P extends 'csgi_user_role'
        ? Array < csgi_user_roleGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof csgi_user ?csgi_user [P]
  : 
          P extends 'csgi_class'
        ? Array < csgi_classGetPayload<S['select'][P]>>  :
        P extends 'csgi_user_role'
        ? Array < csgi_user_roleGetPayload<S['select'][P]>>  : never
  } 
    : csgi_user
  : csgi_user


  type csgi_userCountArgs = Merge<
    Omit<csgi_userFindManyArgs, 'select' | 'include'> & {
      select?: Csgi_userCountAggregateInputType | true
    }
  >

  export interface csgi_userDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Csgi_user that matches the filter.
     * @param {csgi_userFindUniqueArgs} args - Arguments to find a Csgi_user
     * @example
     * // Get one Csgi_user
     * const csgi_user = await prisma.csgi_user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends csgi_userFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, csgi_userFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'csgi_user'> extends True ? CheckSelect<T, Prisma__csgi_userClient<csgi_user>, Prisma__csgi_userClient<csgi_userGetPayload<T>>> : CheckSelect<T, Prisma__csgi_userClient<csgi_user | null >, Prisma__csgi_userClient<csgi_userGetPayload<T> | null >>

    /**
     * Find the first Csgi_user that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_userFindFirstArgs} args - Arguments to find a Csgi_user
     * @example
     * // Get one Csgi_user
     * const csgi_user = await prisma.csgi_user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends csgi_userFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, csgi_userFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'csgi_user'> extends True ? CheckSelect<T, Prisma__csgi_userClient<csgi_user>, Prisma__csgi_userClient<csgi_userGetPayload<T>>> : CheckSelect<T, Prisma__csgi_userClient<csgi_user | null >, Prisma__csgi_userClient<csgi_userGetPayload<T> | null >>

    /**
     * Find zero or more Csgi_users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Csgi_users
     * const csgi_users = await prisma.csgi_user.findMany()
     * 
     * // Get first 10 Csgi_users
     * const csgi_users = await prisma.csgi_user.findMany({ take: 10 })
     * 
     * // Only select the `userid`
     * const csgi_userWithUseridOnly = await prisma.csgi_user.findMany({ select: { userid: true } })
     * 
    **/
    findMany<T extends csgi_userFindManyArgs>(
      args?: SelectSubset<T, csgi_userFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<csgi_user>>, PrismaPromise<Array<csgi_userGetPayload<T>>>>

    /**
     * Create a Csgi_user.
     * @param {csgi_userCreateArgs} args - Arguments to create a Csgi_user.
     * @example
     * // Create one Csgi_user
     * const Csgi_user = await prisma.csgi_user.create({
     *   data: {
     *     // ... data to create a Csgi_user
     *   }
     * })
     * 
    **/
    create<T extends csgi_userCreateArgs>(
      args: SelectSubset<T, csgi_userCreateArgs>
    ): CheckSelect<T, Prisma__csgi_userClient<csgi_user>, Prisma__csgi_userClient<csgi_userGetPayload<T>>>

    /**
     * Create many Csgi_users.
     *     @param {csgi_userCreateManyArgs} args - Arguments to create many Csgi_users.
     *     @example
     *     // Create many Csgi_users
     *     const csgi_user = await prisma.csgi_user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends csgi_userCreateManyArgs>(
      args?: SelectSubset<T, csgi_userCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Csgi_user.
     * @param {csgi_userDeleteArgs} args - Arguments to delete one Csgi_user.
     * @example
     * // Delete one Csgi_user
     * const Csgi_user = await prisma.csgi_user.delete({
     *   where: {
     *     // ... filter to delete one Csgi_user
     *   }
     * })
     * 
    **/
    delete<T extends csgi_userDeleteArgs>(
      args: SelectSubset<T, csgi_userDeleteArgs>
    ): CheckSelect<T, Prisma__csgi_userClient<csgi_user>, Prisma__csgi_userClient<csgi_userGetPayload<T>>>

    /**
     * Update one Csgi_user.
     * @param {csgi_userUpdateArgs} args - Arguments to update one Csgi_user.
     * @example
     * // Update one Csgi_user
     * const csgi_user = await prisma.csgi_user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends csgi_userUpdateArgs>(
      args: SelectSubset<T, csgi_userUpdateArgs>
    ): CheckSelect<T, Prisma__csgi_userClient<csgi_user>, Prisma__csgi_userClient<csgi_userGetPayload<T>>>

    /**
     * Delete zero or more Csgi_users.
     * @param {csgi_userDeleteManyArgs} args - Arguments to filter Csgi_users to delete.
     * @example
     * // Delete a few Csgi_users
     * const { count } = await prisma.csgi_user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends csgi_userDeleteManyArgs>(
      args?: SelectSubset<T, csgi_userDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Csgi_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Csgi_users
     * const csgi_user = await prisma.csgi_user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends csgi_userUpdateManyArgs>(
      args: SelectSubset<T, csgi_userUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Csgi_user.
     * @param {csgi_userUpsertArgs} args - Arguments to update or create a Csgi_user.
     * @example
     * // Update or create a Csgi_user
     * const csgi_user = await prisma.csgi_user.upsert({
     *   create: {
     *     // ... data to create a Csgi_user
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Csgi_user we want to update
     *   }
     * })
    **/
    upsert<T extends csgi_userUpsertArgs>(
      args: SelectSubset<T, csgi_userUpsertArgs>
    ): CheckSelect<T, Prisma__csgi_userClient<csgi_user>, Prisma__csgi_userClient<csgi_userGetPayload<T>>>

    /**
     * Count the number of Csgi_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_userCountArgs} args - Arguments to filter Csgi_users to count.
     * @example
     * // Count the number of Csgi_users
     * const count = await prisma.csgi_user.count({
     *   where: {
     *     // ... the filter for the Csgi_users we want to count
     *   }
     * })
    **/
    count<T extends csgi_userCountArgs>(
      args?: Subset<T, csgi_userCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Csgi_userCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Csgi_user.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Csgi_userAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Csgi_userAggregateArgs>(args: Subset<T, Csgi_userAggregateArgs>): PrismaPromise<GetCsgi_userAggregateType<T>>

    /**
     * Group by Csgi_user.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Csgi_userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Csgi_userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Csgi_userGroupByArgs['orderBy'] }
        : { orderBy?: Csgi_userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Csgi_userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCsgi_userGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for csgi_user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__csgi_userClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    csgi_class<T extends csgi_classFindManyArgs = {}>(args?: Subset<T, csgi_classFindManyArgs>): CheckSelect<T, PrismaPromise<Array<csgi_class>>, PrismaPromise<Array<csgi_classGetPayload<T>>>>;

    csgi_user_role<T extends csgi_user_roleFindManyArgs = {}>(args?: Subset<T, csgi_user_roleFindManyArgs>): CheckSelect<T, PrismaPromise<Array<csgi_user_role>>, PrismaPromise<Array<csgi_user_roleGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * csgi_user findUnique
   */
  export type csgi_userFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the csgi_user
    **/
    select?: csgi_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_userInclude | null
    /**
     * Throw an Error if a csgi_user can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which csgi_user to fetch.
    **/
    where: csgi_userWhereUniqueInput
  }


  /**
   * csgi_user findFirst
   */
  export type csgi_userFindFirstArgs = {
    /**
     * Select specific fields to fetch from the csgi_user
    **/
    select?: csgi_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_userInclude | null
    /**
     * Throw an Error if a csgi_user can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which csgi_user to fetch.
    **/
    where?: csgi_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_users to fetch.
    **/
    orderBy?: Enumerable<csgi_userOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for csgi_users.
    **/
    cursor?: csgi_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of csgi_users.
    **/
    distinct?: Enumerable<Csgi_userScalarFieldEnum>
  }


  /**
   * csgi_user findMany
   */
  export type csgi_userFindManyArgs = {
    /**
     * Select specific fields to fetch from the csgi_user
    **/
    select?: csgi_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_userInclude | null
    /**
     * Filter, which csgi_users to fetch.
    **/
    where?: csgi_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_users to fetch.
    **/
    orderBy?: Enumerable<csgi_userOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing csgi_users.
    **/
    cursor?: csgi_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_users.
    **/
    skip?: number
    distinct?: Enumerable<Csgi_userScalarFieldEnum>
  }


  /**
   * csgi_user create
   */
  export type csgi_userCreateArgs = {
    /**
     * Select specific fields to fetch from the csgi_user
    **/
    select?: csgi_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_userInclude | null
    /**
     * The data needed to create a csgi_user.
    **/
    data: XOR<csgi_userCreateInput, csgi_userUncheckedCreateInput>
  }


  /**
   * csgi_user createMany
   */
  export type csgi_userCreateManyArgs = {
    data: Enumerable<csgi_userCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * csgi_user update
   */
  export type csgi_userUpdateArgs = {
    /**
     * Select specific fields to fetch from the csgi_user
    **/
    select?: csgi_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_userInclude | null
    /**
     * The data needed to update a csgi_user.
    **/
    data: XOR<csgi_userUpdateInput, csgi_userUncheckedUpdateInput>
    /**
     * Choose, which csgi_user to update.
    **/
    where: csgi_userWhereUniqueInput
  }


  /**
   * csgi_user updateMany
   */
  export type csgi_userUpdateManyArgs = {
    data: XOR<csgi_userUpdateManyMutationInput, csgi_userUncheckedUpdateManyInput>
    where?: csgi_userWhereInput
  }


  /**
   * csgi_user upsert
   */
  export type csgi_userUpsertArgs = {
    /**
     * Select specific fields to fetch from the csgi_user
    **/
    select?: csgi_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_userInclude | null
    /**
     * The filter to search for the csgi_user to update in case it exists.
    **/
    where: csgi_userWhereUniqueInput
    /**
     * In case the csgi_user found by the `where` argument doesn't exist, create a new csgi_user with this data.
    **/
    create: XOR<csgi_userCreateInput, csgi_userUncheckedCreateInput>
    /**
     * In case the csgi_user was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<csgi_userUpdateInput, csgi_userUncheckedUpdateInput>
  }


  /**
   * csgi_user delete
   */
  export type csgi_userDeleteArgs = {
    /**
     * Select specific fields to fetch from the csgi_user
    **/
    select?: csgi_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_userInclude | null
    /**
     * Filter which csgi_user to delete.
    **/
    where: csgi_userWhereUniqueInput
  }


  /**
   * csgi_user deleteMany
   */
  export type csgi_userDeleteManyArgs = {
    where?: csgi_userWhereInput
  }


  /**
   * csgi_user without action
   */
  export type csgi_userArgs = {
    /**
     * Select specific fields to fetch from the csgi_user
    **/
    select?: csgi_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_userInclude | null
  }



  /**
   * Model csgi_user_role
   */


  export type AggregateCsgi_user_role = {
    count: Csgi_user_roleCountAggregateOutputType | null
    avg: Csgi_user_roleAvgAggregateOutputType | null
    sum: Csgi_user_roleSumAggregateOutputType | null
    min: Csgi_user_roleMinAggregateOutputType | null
    max: Csgi_user_roleMaxAggregateOutputType | null
  }

  export type Csgi_user_roleAvgAggregateOutputType = {
    user_roleid: number | null
    userid: number | null
    roleid: number | null
  }

  export type Csgi_user_roleSumAggregateOutputType = {
    user_roleid: number | null
    userid: number | null
    roleid: number | null
  }

  export type Csgi_user_roleMinAggregateOutputType = {
    user_roleid: number | null
    userid: number | null
    roleid: number | null
    created_date: Date | null
    created_by: string | null
    updated_date: Date | null
    updated_by: string | null
  }

  export type Csgi_user_roleMaxAggregateOutputType = {
    user_roleid: number | null
    userid: number | null
    roleid: number | null
    created_date: Date | null
    created_by: string | null
    updated_date: Date | null
    updated_by: string | null
  }

  export type Csgi_user_roleCountAggregateOutputType = {
    user_roleid: number
    userid: number
    roleid: number
    created_date: number
    created_by: number
    updated_date: number
    updated_by: number
    _all: number
  }


  export type Csgi_user_roleAvgAggregateInputType = {
    user_roleid?: true
    userid?: true
    roleid?: true
  }

  export type Csgi_user_roleSumAggregateInputType = {
    user_roleid?: true
    userid?: true
    roleid?: true
  }

  export type Csgi_user_roleMinAggregateInputType = {
    user_roleid?: true
    userid?: true
    roleid?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
  }

  export type Csgi_user_roleMaxAggregateInputType = {
    user_roleid?: true
    userid?: true
    roleid?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
  }

  export type Csgi_user_roleCountAggregateInputType = {
    user_roleid?: true
    userid?: true
    roleid?: true
    created_date?: true
    created_by?: true
    updated_date?: true
    updated_by?: true
    _all?: true
  }

  export type Csgi_user_roleAggregateArgs = {
    /**
     * Filter which csgi_user_role to aggregate.
    **/
    where?: csgi_user_roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_user_roles to fetch.
    **/
    orderBy?: Enumerable<csgi_user_roleOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: csgi_user_roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_user_roles from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_user_roles.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned csgi_user_roles
    **/
    count?: true | Csgi_user_roleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Csgi_user_roleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Csgi_user_roleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Csgi_user_roleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Csgi_user_roleMaxAggregateInputType
  }

  export type GetCsgi_user_roleAggregateType<T extends Csgi_user_roleAggregateArgs> = {
    [P in keyof T & keyof AggregateCsgi_user_role]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCsgi_user_role[P]>
      : GetScalarType<T[P], AggregateCsgi_user_role[P]>
  }


    
    
  export type Csgi_user_roleGroupByArgs = {
    where?: csgi_user_roleWhereInput
    orderBy?: Enumerable<csgi_user_roleOrderByInput>
    by: Array<Csgi_user_roleScalarFieldEnum>
    having?: csgi_user_roleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: Csgi_user_roleCountAggregateInputType | true
    avg?: Csgi_user_roleAvgAggregateInputType
    sum?: Csgi_user_roleSumAggregateInputType
    min?: Csgi_user_roleMinAggregateInputType
    max?: Csgi_user_roleMaxAggregateInputType
  }


  export type Csgi_user_roleGroupByOutputType = {
    user_roleid: number
    userid: number
    roleid: number
    created_date: Date
    created_by: string
    updated_date: Date | null
    updated_by: string | null
    count: Csgi_user_roleCountAggregateOutputType | null
    avg: Csgi_user_roleAvgAggregateOutputType | null
    sum: Csgi_user_roleSumAggregateOutputType | null
    min: Csgi_user_roleMinAggregateOutputType | null
    max: Csgi_user_roleMaxAggregateOutputType | null
  }

  type GetCsgi_user_roleGroupByPayload<T extends Csgi_user_roleGroupByArgs> = Promise<Array<
    PickArray<Csgi_user_roleGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof Csgi_user_roleGroupByOutputType))]: GetScalarType<T[P], Csgi_user_roleGroupByOutputType[P]>
    }
  >>
    

  export type csgi_user_roleSelect = {
    user_roleid?: boolean
    userid?: boolean
    roleid?: boolean
    created_date?: boolean
    created_by?: boolean
    updated_date?: boolean
    updated_by?: boolean
    csgi_role?: boolean | csgi_roleArgs
    csgi_user?: boolean | csgi_userArgs
  }

  export type csgi_user_roleInclude = {
    csgi_role?: boolean | csgi_roleArgs
    csgi_user?: boolean | csgi_userArgs
  }

  export type csgi_user_roleGetPayload<
    S extends boolean | null | undefined | csgi_user_roleArgs,
    U = keyof S
      > = S extends true
        ? csgi_user_role
    : S extends undefined
    ? never
    : S extends csgi_user_roleArgs | csgi_user_roleFindManyArgs
    ?'include' extends U
    ? csgi_user_role  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'csgi_role'
        ? csgi_roleGetPayload<S['include'][P]> :
        P extends 'csgi_user'
        ? csgi_userGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof csgi_user_role ?csgi_user_role [P]
  : 
          P extends 'csgi_role'
        ? csgi_roleGetPayload<S['select'][P]> :
        P extends 'csgi_user'
        ? csgi_userGetPayload<S['select'][P]> : never
  } 
    : csgi_user_role
  : csgi_user_role


  type csgi_user_roleCountArgs = Merge<
    Omit<csgi_user_roleFindManyArgs, 'select' | 'include'> & {
      select?: Csgi_user_roleCountAggregateInputType | true
    }
  >

  export interface csgi_user_roleDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Csgi_user_role that matches the filter.
     * @param {csgi_user_roleFindUniqueArgs} args - Arguments to find a Csgi_user_role
     * @example
     * // Get one Csgi_user_role
     * const csgi_user_role = await prisma.csgi_user_role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends csgi_user_roleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, csgi_user_roleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'csgi_user_role'> extends True ? CheckSelect<T, Prisma__csgi_user_roleClient<csgi_user_role>, Prisma__csgi_user_roleClient<csgi_user_roleGetPayload<T>>> : CheckSelect<T, Prisma__csgi_user_roleClient<csgi_user_role | null >, Prisma__csgi_user_roleClient<csgi_user_roleGetPayload<T> | null >>

    /**
     * Find the first Csgi_user_role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_user_roleFindFirstArgs} args - Arguments to find a Csgi_user_role
     * @example
     * // Get one Csgi_user_role
     * const csgi_user_role = await prisma.csgi_user_role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends csgi_user_roleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, csgi_user_roleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'csgi_user_role'> extends True ? CheckSelect<T, Prisma__csgi_user_roleClient<csgi_user_role>, Prisma__csgi_user_roleClient<csgi_user_roleGetPayload<T>>> : CheckSelect<T, Prisma__csgi_user_roleClient<csgi_user_role | null >, Prisma__csgi_user_roleClient<csgi_user_roleGetPayload<T> | null >>

    /**
     * Find zero or more Csgi_user_roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_user_roleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Csgi_user_roles
     * const csgi_user_roles = await prisma.csgi_user_role.findMany()
     * 
     * // Get first 10 Csgi_user_roles
     * const csgi_user_roles = await prisma.csgi_user_role.findMany({ take: 10 })
     * 
     * // Only select the `user_roleid`
     * const csgi_user_roleWithUser_roleidOnly = await prisma.csgi_user_role.findMany({ select: { user_roleid: true } })
     * 
    **/
    findMany<T extends csgi_user_roleFindManyArgs>(
      args?: SelectSubset<T, csgi_user_roleFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<csgi_user_role>>, PrismaPromise<Array<csgi_user_roleGetPayload<T>>>>

    /**
     * Create a Csgi_user_role.
     * @param {csgi_user_roleCreateArgs} args - Arguments to create a Csgi_user_role.
     * @example
     * // Create one Csgi_user_role
     * const Csgi_user_role = await prisma.csgi_user_role.create({
     *   data: {
     *     // ... data to create a Csgi_user_role
     *   }
     * })
     * 
    **/
    create<T extends csgi_user_roleCreateArgs>(
      args: SelectSubset<T, csgi_user_roleCreateArgs>
    ): CheckSelect<T, Prisma__csgi_user_roleClient<csgi_user_role>, Prisma__csgi_user_roleClient<csgi_user_roleGetPayload<T>>>

    /**
     * Create many Csgi_user_roles.
     *     @param {csgi_user_roleCreateManyArgs} args - Arguments to create many Csgi_user_roles.
     *     @example
     *     // Create many Csgi_user_roles
     *     const csgi_user_role = await prisma.csgi_user_role.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends csgi_user_roleCreateManyArgs>(
      args?: SelectSubset<T, csgi_user_roleCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Csgi_user_role.
     * @param {csgi_user_roleDeleteArgs} args - Arguments to delete one Csgi_user_role.
     * @example
     * // Delete one Csgi_user_role
     * const Csgi_user_role = await prisma.csgi_user_role.delete({
     *   where: {
     *     // ... filter to delete one Csgi_user_role
     *   }
     * })
     * 
    **/
    delete<T extends csgi_user_roleDeleteArgs>(
      args: SelectSubset<T, csgi_user_roleDeleteArgs>
    ): CheckSelect<T, Prisma__csgi_user_roleClient<csgi_user_role>, Prisma__csgi_user_roleClient<csgi_user_roleGetPayload<T>>>

    /**
     * Update one Csgi_user_role.
     * @param {csgi_user_roleUpdateArgs} args - Arguments to update one Csgi_user_role.
     * @example
     * // Update one Csgi_user_role
     * const csgi_user_role = await prisma.csgi_user_role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends csgi_user_roleUpdateArgs>(
      args: SelectSubset<T, csgi_user_roleUpdateArgs>
    ): CheckSelect<T, Prisma__csgi_user_roleClient<csgi_user_role>, Prisma__csgi_user_roleClient<csgi_user_roleGetPayload<T>>>

    /**
     * Delete zero or more Csgi_user_roles.
     * @param {csgi_user_roleDeleteManyArgs} args - Arguments to filter Csgi_user_roles to delete.
     * @example
     * // Delete a few Csgi_user_roles
     * const { count } = await prisma.csgi_user_role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends csgi_user_roleDeleteManyArgs>(
      args?: SelectSubset<T, csgi_user_roleDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Csgi_user_roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_user_roleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Csgi_user_roles
     * const csgi_user_role = await prisma.csgi_user_role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends csgi_user_roleUpdateManyArgs>(
      args: SelectSubset<T, csgi_user_roleUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Csgi_user_role.
     * @param {csgi_user_roleUpsertArgs} args - Arguments to update or create a Csgi_user_role.
     * @example
     * // Update or create a Csgi_user_role
     * const csgi_user_role = await prisma.csgi_user_role.upsert({
     *   create: {
     *     // ... data to create a Csgi_user_role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Csgi_user_role we want to update
     *   }
     * })
    **/
    upsert<T extends csgi_user_roleUpsertArgs>(
      args: SelectSubset<T, csgi_user_roleUpsertArgs>
    ): CheckSelect<T, Prisma__csgi_user_roleClient<csgi_user_role>, Prisma__csgi_user_roleClient<csgi_user_roleGetPayload<T>>>

    /**
     * Count the number of Csgi_user_roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_user_roleCountArgs} args - Arguments to filter Csgi_user_roles to count.
     * @example
     * // Count the number of Csgi_user_roles
     * const count = await prisma.csgi_user_role.count({
     *   where: {
     *     // ... the filter for the Csgi_user_roles we want to count
     *   }
     * })
    **/
    count<T extends csgi_user_roleCountArgs>(
      args?: Subset<T, csgi_user_roleCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Csgi_user_roleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Csgi_user_role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Csgi_user_roleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Csgi_user_roleAggregateArgs>(args: Subset<T, Csgi_user_roleAggregateArgs>): PrismaPromise<GetCsgi_user_roleAggregateType<T>>

    /**
     * Group by Csgi_user_role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Csgi_user_roleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Csgi_user_roleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Csgi_user_roleGroupByArgs['orderBy'] }
        : { orderBy?: Csgi_user_roleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Csgi_user_roleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCsgi_user_roleGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for csgi_user_role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__csgi_user_roleClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    csgi_role<T extends csgi_roleArgs = {}>(args?: Subset<T, csgi_roleArgs>): CheckSelect<T, Prisma__csgi_roleClient<csgi_role | null >, Prisma__csgi_roleClient<csgi_roleGetPayload<T> | null >>;

    csgi_user<T extends csgi_userArgs = {}>(args?: Subset<T, csgi_userArgs>): CheckSelect<T, Prisma__csgi_userClient<csgi_user | null >, Prisma__csgi_userClient<csgi_userGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * csgi_user_role findUnique
   */
  export type csgi_user_roleFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the csgi_user_role
    **/
    select?: csgi_user_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_user_roleInclude | null
    /**
     * Throw an Error if a csgi_user_role can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which csgi_user_role to fetch.
    **/
    where: csgi_user_roleWhereUniqueInput
  }


  /**
   * csgi_user_role findFirst
   */
  export type csgi_user_roleFindFirstArgs = {
    /**
     * Select specific fields to fetch from the csgi_user_role
    **/
    select?: csgi_user_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_user_roleInclude | null
    /**
     * Throw an Error if a csgi_user_role can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which csgi_user_role to fetch.
    **/
    where?: csgi_user_roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_user_roles to fetch.
    **/
    orderBy?: Enumerable<csgi_user_roleOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for csgi_user_roles.
    **/
    cursor?: csgi_user_roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_user_roles from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_user_roles.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of csgi_user_roles.
    **/
    distinct?: Enumerable<Csgi_user_roleScalarFieldEnum>
  }


  /**
   * csgi_user_role findMany
   */
  export type csgi_user_roleFindManyArgs = {
    /**
     * Select specific fields to fetch from the csgi_user_role
    **/
    select?: csgi_user_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_user_roleInclude | null
    /**
     * Filter, which csgi_user_roles to fetch.
    **/
    where?: csgi_user_roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_user_roles to fetch.
    **/
    orderBy?: Enumerable<csgi_user_roleOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing csgi_user_roles.
    **/
    cursor?: csgi_user_roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_user_roles from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_user_roles.
    **/
    skip?: number
    distinct?: Enumerable<Csgi_user_roleScalarFieldEnum>
  }


  /**
   * csgi_user_role create
   */
  export type csgi_user_roleCreateArgs = {
    /**
     * Select specific fields to fetch from the csgi_user_role
    **/
    select?: csgi_user_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_user_roleInclude | null
    /**
     * The data needed to create a csgi_user_role.
    **/
    data: XOR<csgi_user_roleCreateInput, csgi_user_roleUncheckedCreateInput>
  }


  /**
   * csgi_user_role createMany
   */
  export type csgi_user_roleCreateManyArgs = {
    data: Enumerable<csgi_user_roleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * csgi_user_role update
   */
  export type csgi_user_roleUpdateArgs = {
    /**
     * Select specific fields to fetch from the csgi_user_role
    **/
    select?: csgi_user_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_user_roleInclude | null
    /**
     * The data needed to update a csgi_user_role.
    **/
    data: XOR<csgi_user_roleUpdateInput, csgi_user_roleUncheckedUpdateInput>
    /**
     * Choose, which csgi_user_role to update.
    **/
    where: csgi_user_roleWhereUniqueInput
  }


  /**
   * csgi_user_role updateMany
   */
  export type csgi_user_roleUpdateManyArgs = {
    data: XOR<csgi_user_roleUpdateManyMutationInput, csgi_user_roleUncheckedUpdateManyInput>
    where?: csgi_user_roleWhereInput
  }


  /**
   * csgi_user_role upsert
   */
  export type csgi_user_roleUpsertArgs = {
    /**
     * Select specific fields to fetch from the csgi_user_role
    **/
    select?: csgi_user_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_user_roleInclude | null
    /**
     * The filter to search for the csgi_user_role to update in case it exists.
    **/
    where: csgi_user_roleWhereUniqueInput
    /**
     * In case the csgi_user_role found by the `where` argument doesn't exist, create a new csgi_user_role with this data.
    **/
    create: XOR<csgi_user_roleCreateInput, csgi_user_roleUncheckedCreateInput>
    /**
     * In case the csgi_user_role was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<csgi_user_roleUpdateInput, csgi_user_roleUncheckedUpdateInput>
  }


  /**
   * csgi_user_role delete
   */
  export type csgi_user_roleDeleteArgs = {
    /**
     * Select specific fields to fetch from the csgi_user_role
    **/
    select?: csgi_user_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_user_roleInclude | null
    /**
     * Filter which csgi_user_role to delete.
    **/
    where: csgi_user_roleWhereUniqueInput
  }


  /**
   * csgi_user_role deleteMany
   */
  export type csgi_user_roleDeleteManyArgs = {
    where?: csgi_user_roleWhereInput
  }


  /**
   * csgi_user_role without action
   */
  export type csgi_user_roleArgs = {
    /**
     * Select specific fields to fetch from the csgi_user_role
    **/
    select?: csgi_user_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: csgi_user_roleInclude | null
  }



  /**
   * Model csgi_alluser_v
   */


  export type AggregateCsgi_alluser_v = {
    count: Csgi_alluser_vCountAggregateOutputType | null
    avg: Csgi_alluser_vAvgAggregateOutputType | null
    sum: Csgi_alluser_vSumAggregateOutputType | null
    min: Csgi_alluser_vMinAggregateOutputType | null
    max: Csgi_alluser_vMaxAggregateOutputType | null
  }

  export type Csgi_alluser_vAvgAggregateOutputType = {
    userid: number | null
  }

  export type Csgi_alluser_vSumAggregateOutputType = {
    userid: number | null
  }

  export type Csgi_alluser_vMinAggregateOutputType = {
    userid: number | null
    email: string | null
    role: string | null
  }

  export type Csgi_alluser_vMaxAggregateOutputType = {
    userid: number | null
    email: string | null
    role: string | null
  }

  export type Csgi_alluser_vCountAggregateOutputType = {
    userid: number
    email: number
    role: number
    _all: number
  }


  export type Csgi_alluser_vAvgAggregateInputType = {
    userid?: true
  }

  export type Csgi_alluser_vSumAggregateInputType = {
    userid?: true
  }

  export type Csgi_alluser_vMinAggregateInputType = {
    userid?: true
    email?: true
    role?: true
  }

  export type Csgi_alluser_vMaxAggregateInputType = {
    userid?: true
    email?: true
    role?: true
  }

  export type Csgi_alluser_vCountAggregateInputType = {
    userid?: true
    email?: true
    role?: true
    _all?: true
  }

  export type Csgi_alluser_vAggregateArgs = {
    /**
     * Filter which csgi_alluser_v to aggregate.
    **/
    where?: csgi_alluser_vWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_alluser_vs to fetch.
    **/
    orderBy?: Enumerable<csgi_alluser_vOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: csgi_alluser_vWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_alluser_vs from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_alluser_vs.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned csgi_alluser_vs
    **/
    count?: true | Csgi_alluser_vCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Csgi_alluser_vAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Csgi_alluser_vSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Csgi_alluser_vMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Csgi_alluser_vMaxAggregateInputType
  }

  export type GetCsgi_alluser_vAggregateType<T extends Csgi_alluser_vAggregateArgs> = {
    [P in keyof T & keyof AggregateCsgi_alluser_v]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCsgi_alluser_v[P]>
      : GetScalarType<T[P], AggregateCsgi_alluser_v[P]>
  }


    
    
  export type Csgi_alluser_vGroupByArgs = {
    where?: csgi_alluser_vWhereInput
    orderBy?: Enumerable<csgi_alluser_vOrderByInput>
    by: Array<Csgi_alluser_vScalarFieldEnum>
    having?: csgi_alluser_vScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: Csgi_alluser_vCountAggregateInputType | true
    avg?: Csgi_alluser_vAvgAggregateInputType
    sum?: Csgi_alluser_vSumAggregateInputType
    min?: Csgi_alluser_vMinAggregateInputType
    max?: Csgi_alluser_vMaxAggregateInputType
  }


  export type Csgi_alluser_vGroupByOutputType = {
    userid: number
    email: string
    role: string
    count: Csgi_alluser_vCountAggregateOutputType | null
    avg: Csgi_alluser_vAvgAggregateOutputType | null
    sum: Csgi_alluser_vSumAggregateOutputType | null
    min: Csgi_alluser_vMinAggregateOutputType | null
    max: Csgi_alluser_vMaxAggregateOutputType | null
  }

  type GetCsgi_alluser_vGroupByPayload<T extends Csgi_alluser_vGroupByArgs> = Promise<Array<
    PickArray<Csgi_alluser_vGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof Csgi_alluser_vGroupByOutputType))]: GetScalarType<T[P], Csgi_alluser_vGroupByOutputType[P]>
    }
  >>
    

  export type csgi_alluser_vSelect = {
    userid?: boolean
    email?: boolean
    role?: boolean
  }

  export type csgi_alluser_vGetPayload<
    S extends boolean | null | undefined | csgi_alluser_vArgs,
    U = keyof S
      > = S extends true
        ? csgi_alluser_v
    : S extends undefined
    ? never
    : S extends csgi_alluser_vArgs | csgi_alluser_vFindManyArgs
    ?'include' extends U
    ? csgi_alluser_v 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof csgi_alluser_v ?csgi_alluser_v [P]
  : 
     never
  } 
    : csgi_alluser_v
  : csgi_alluser_v


  type csgi_alluser_vCountArgs = Merge<
    Omit<csgi_alluser_vFindManyArgs, 'select' | 'include'> & {
      select?: Csgi_alluser_vCountAggregateInputType | true
    }
  >

  export interface csgi_alluser_vDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Csgi_alluser_v that matches the filter.
     * @param {csgi_alluser_vFindUniqueArgs} args - Arguments to find a Csgi_alluser_v
     * @example
     * // Get one Csgi_alluser_v
     * const csgi_alluser_v = await prisma.csgi_alluser_v.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends csgi_alluser_vFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, csgi_alluser_vFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'csgi_alluser_v'> extends True ? CheckSelect<T, Prisma__csgi_alluser_vClient<csgi_alluser_v>, Prisma__csgi_alluser_vClient<csgi_alluser_vGetPayload<T>>> : CheckSelect<T, Prisma__csgi_alluser_vClient<csgi_alluser_v | null >, Prisma__csgi_alluser_vClient<csgi_alluser_vGetPayload<T> | null >>

    /**
     * Find the first Csgi_alluser_v that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_alluser_vFindFirstArgs} args - Arguments to find a Csgi_alluser_v
     * @example
     * // Get one Csgi_alluser_v
     * const csgi_alluser_v = await prisma.csgi_alluser_v.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends csgi_alluser_vFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, csgi_alluser_vFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'csgi_alluser_v'> extends True ? CheckSelect<T, Prisma__csgi_alluser_vClient<csgi_alluser_v>, Prisma__csgi_alluser_vClient<csgi_alluser_vGetPayload<T>>> : CheckSelect<T, Prisma__csgi_alluser_vClient<csgi_alluser_v | null >, Prisma__csgi_alluser_vClient<csgi_alluser_vGetPayload<T> | null >>

    /**
     * Find zero or more Csgi_alluser_vs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_alluser_vFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Csgi_alluser_vs
     * const csgi_alluser_vs = await prisma.csgi_alluser_v.findMany()
     * 
     * // Get first 10 Csgi_alluser_vs
     * const csgi_alluser_vs = await prisma.csgi_alluser_v.findMany({ take: 10 })
     * 
     * // Only select the `userid`
     * const csgi_alluser_vWithUseridOnly = await prisma.csgi_alluser_v.findMany({ select: { userid: true } })
     * 
    **/
    findMany<T extends csgi_alluser_vFindManyArgs>(
      args?: SelectSubset<T, csgi_alluser_vFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<csgi_alluser_v>>, PrismaPromise<Array<csgi_alluser_vGetPayload<T>>>>

    /**
     * Create a Csgi_alluser_v.
     * @param {csgi_alluser_vCreateArgs} args - Arguments to create a Csgi_alluser_v.
     * @example
     * // Create one Csgi_alluser_v
     * const Csgi_alluser_v = await prisma.csgi_alluser_v.create({
     *   data: {
     *     // ... data to create a Csgi_alluser_v
     *   }
     * })
     * 
    **/
    create<T extends csgi_alluser_vCreateArgs>(
      args: SelectSubset<T, csgi_alluser_vCreateArgs>
    ): CheckSelect<T, Prisma__csgi_alluser_vClient<csgi_alluser_v>, Prisma__csgi_alluser_vClient<csgi_alluser_vGetPayload<T>>>

    /**
     * Create many Csgi_alluser_vs.
     *     @param {csgi_alluser_vCreateManyArgs} args - Arguments to create many Csgi_alluser_vs.
     *     @example
     *     // Create many Csgi_alluser_vs
     *     const csgi_alluser_v = await prisma.csgi_alluser_v.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends csgi_alluser_vCreateManyArgs>(
      args?: SelectSubset<T, csgi_alluser_vCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Csgi_alluser_v.
     * @param {csgi_alluser_vDeleteArgs} args - Arguments to delete one Csgi_alluser_v.
     * @example
     * // Delete one Csgi_alluser_v
     * const Csgi_alluser_v = await prisma.csgi_alluser_v.delete({
     *   where: {
     *     // ... filter to delete one Csgi_alluser_v
     *   }
     * })
     * 
    **/
    delete<T extends csgi_alluser_vDeleteArgs>(
      args: SelectSubset<T, csgi_alluser_vDeleteArgs>
    ): CheckSelect<T, Prisma__csgi_alluser_vClient<csgi_alluser_v>, Prisma__csgi_alluser_vClient<csgi_alluser_vGetPayload<T>>>

    /**
     * Update one Csgi_alluser_v.
     * @param {csgi_alluser_vUpdateArgs} args - Arguments to update one Csgi_alluser_v.
     * @example
     * // Update one Csgi_alluser_v
     * const csgi_alluser_v = await prisma.csgi_alluser_v.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends csgi_alluser_vUpdateArgs>(
      args: SelectSubset<T, csgi_alluser_vUpdateArgs>
    ): CheckSelect<T, Prisma__csgi_alluser_vClient<csgi_alluser_v>, Prisma__csgi_alluser_vClient<csgi_alluser_vGetPayload<T>>>

    /**
     * Delete zero or more Csgi_alluser_vs.
     * @param {csgi_alluser_vDeleteManyArgs} args - Arguments to filter Csgi_alluser_vs to delete.
     * @example
     * // Delete a few Csgi_alluser_vs
     * const { count } = await prisma.csgi_alluser_v.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends csgi_alluser_vDeleteManyArgs>(
      args?: SelectSubset<T, csgi_alluser_vDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Csgi_alluser_vs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_alluser_vUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Csgi_alluser_vs
     * const csgi_alluser_v = await prisma.csgi_alluser_v.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends csgi_alluser_vUpdateManyArgs>(
      args: SelectSubset<T, csgi_alluser_vUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Csgi_alluser_v.
     * @param {csgi_alluser_vUpsertArgs} args - Arguments to update or create a Csgi_alluser_v.
     * @example
     * // Update or create a Csgi_alluser_v
     * const csgi_alluser_v = await prisma.csgi_alluser_v.upsert({
     *   create: {
     *     // ... data to create a Csgi_alluser_v
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Csgi_alluser_v we want to update
     *   }
     * })
    **/
    upsert<T extends csgi_alluser_vUpsertArgs>(
      args: SelectSubset<T, csgi_alluser_vUpsertArgs>
    ): CheckSelect<T, Prisma__csgi_alluser_vClient<csgi_alluser_v>, Prisma__csgi_alluser_vClient<csgi_alluser_vGetPayload<T>>>

    /**
     * Count the number of Csgi_alluser_vs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_alluser_vCountArgs} args - Arguments to filter Csgi_alluser_vs to count.
     * @example
     * // Count the number of Csgi_alluser_vs
     * const count = await prisma.csgi_alluser_v.count({
     *   where: {
     *     // ... the filter for the Csgi_alluser_vs we want to count
     *   }
     * })
    **/
    count<T extends csgi_alluser_vCountArgs>(
      args?: Subset<T, csgi_alluser_vCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Csgi_alluser_vCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Csgi_alluser_v.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Csgi_alluser_vAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Csgi_alluser_vAggregateArgs>(args: Subset<T, Csgi_alluser_vAggregateArgs>): PrismaPromise<GetCsgi_alluser_vAggregateType<T>>

    /**
     * Group by Csgi_alluser_v.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Csgi_alluser_vGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Csgi_alluser_vGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Csgi_alluser_vGroupByArgs['orderBy'] }
        : { orderBy?: Csgi_alluser_vGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Csgi_alluser_vGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCsgi_alluser_vGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for csgi_alluser_v.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__csgi_alluser_vClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * csgi_alluser_v findUnique
   */
  export type csgi_alluser_vFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the csgi_alluser_v
    **/
    select?: csgi_alluser_vSelect | null
    /**
     * Throw an Error if a csgi_alluser_v can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which csgi_alluser_v to fetch.
    **/
    where: csgi_alluser_vWhereUniqueInput
  }


  /**
   * csgi_alluser_v findFirst
   */
  export type csgi_alluser_vFindFirstArgs = {
    /**
     * Select specific fields to fetch from the csgi_alluser_v
    **/
    select?: csgi_alluser_vSelect | null
    /**
     * Throw an Error if a csgi_alluser_v can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which csgi_alluser_v to fetch.
    **/
    where?: csgi_alluser_vWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_alluser_vs to fetch.
    **/
    orderBy?: Enumerable<csgi_alluser_vOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for csgi_alluser_vs.
    **/
    cursor?: csgi_alluser_vWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_alluser_vs from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_alluser_vs.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of csgi_alluser_vs.
    **/
    distinct?: Enumerable<Csgi_alluser_vScalarFieldEnum>
  }


  /**
   * csgi_alluser_v findMany
   */
  export type csgi_alluser_vFindManyArgs = {
    /**
     * Select specific fields to fetch from the csgi_alluser_v
    **/
    select?: csgi_alluser_vSelect | null
    /**
     * Filter, which csgi_alluser_vs to fetch.
    **/
    where?: csgi_alluser_vWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_alluser_vs to fetch.
    **/
    orderBy?: Enumerable<csgi_alluser_vOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing csgi_alluser_vs.
    **/
    cursor?: csgi_alluser_vWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_alluser_vs from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_alluser_vs.
    **/
    skip?: number
    distinct?: Enumerable<Csgi_alluser_vScalarFieldEnum>
  }


  /**
   * csgi_alluser_v create
   */
  export type csgi_alluser_vCreateArgs = {
    /**
     * Select specific fields to fetch from the csgi_alluser_v
    **/
    select?: csgi_alluser_vSelect | null
    /**
     * The data needed to create a csgi_alluser_v.
    **/
    data: XOR<csgi_alluser_vCreateInput, csgi_alluser_vUncheckedCreateInput>
  }


  /**
   * csgi_alluser_v createMany
   */
  export type csgi_alluser_vCreateManyArgs = {
    data: Enumerable<csgi_alluser_vCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * csgi_alluser_v update
   */
  export type csgi_alluser_vUpdateArgs = {
    /**
     * Select specific fields to fetch from the csgi_alluser_v
    **/
    select?: csgi_alluser_vSelect | null
    /**
     * The data needed to update a csgi_alluser_v.
    **/
    data: XOR<csgi_alluser_vUpdateInput, csgi_alluser_vUncheckedUpdateInput>
    /**
     * Choose, which csgi_alluser_v to update.
    **/
    where: csgi_alluser_vWhereUniqueInput
  }


  /**
   * csgi_alluser_v updateMany
   */
  export type csgi_alluser_vUpdateManyArgs = {
    data: XOR<csgi_alluser_vUpdateManyMutationInput, csgi_alluser_vUncheckedUpdateManyInput>
    where?: csgi_alluser_vWhereInput
  }


  /**
   * csgi_alluser_v upsert
   */
  export type csgi_alluser_vUpsertArgs = {
    /**
     * Select specific fields to fetch from the csgi_alluser_v
    **/
    select?: csgi_alluser_vSelect | null
    /**
     * The filter to search for the csgi_alluser_v to update in case it exists.
    **/
    where: csgi_alluser_vWhereUniqueInput
    /**
     * In case the csgi_alluser_v found by the `where` argument doesn't exist, create a new csgi_alluser_v with this data.
    **/
    create: XOR<csgi_alluser_vCreateInput, csgi_alluser_vUncheckedCreateInput>
    /**
     * In case the csgi_alluser_v was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<csgi_alluser_vUpdateInput, csgi_alluser_vUncheckedUpdateInput>
  }


  /**
   * csgi_alluser_v delete
   */
  export type csgi_alluser_vDeleteArgs = {
    /**
     * Select specific fields to fetch from the csgi_alluser_v
    **/
    select?: csgi_alluser_vSelect | null
    /**
     * Filter which csgi_alluser_v to delete.
    **/
    where: csgi_alluser_vWhereUniqueInput
  }


  /**
   * csgi_alluser_v deleteMany
   */
  export type csgi_alluser_vDeleteManyArgs = {
    where?: csgi_alluser_vWhereInput
  }


  /**
   * csgi_alluser_v without action
   */
  export type csgi_alluser_vArgs = {
    /**
     * Select specific fields to fetch from the csgi_alluser_v
    **/
    select?: csgi_alluser_vSelect | null
  }



  /**
   * Model csgi_detailreport_v
   */


  export type AggregateCsgi_detailreport_v = {
    count: Csgi_detailreport_vCountAggregateOutputType | null
    avg: Csgi_detailreport_vAvgAggregateOutputType | null
    sum: Csgi_detailreport_vSumAggregateOutputType | null
    min: Csgi_detailreport_vMinAggregateOutputType | null
    max: Csgi_detailreport_vMaxAggregateOutputType | null
  }

  export type Csgi_detailreport_vAvgAggregateOutputType = {
    classid: number | null
    gradeid: number | null
    teacherid: number | null
    periodid: number | null
    studentid: number | null
    attended: number | null
    notattended: number | null
  }

  export type Csgi_detailreport_vSumAggregateOutputType = {
    classid: number | null
    gradeid: number | null
    teacherid: number | null
    periodid: number | null
    studentid: number | null
    attended: number | null
    notattended: number | null
  }

  export type Csgi_detailreport_vMinAggregateOutputType = {
    classid: number | null
    classname: string | null
    gradeid: number | null
    gradecode: string | null
    teacherid: number | null
    teachername: string | null
    teacheremail: string | null
    periodid: number | null
    periodname: string | null
    period_date: Date | null
    quarter: string | null
    studentid: number | null
    student_name: string | null
    attended: number | null
    notattended: number | null
  }

  export type Csgi_detailreport_vMaxAggregateOutputType = {
    classid: number | null
    classname: string | null
    gradeid: number | null
    gradecode: string | null
    teacherid: number | null
    teachername: string | null
    teacheremail: string | null
    periodid: number | null
    periodname: string | null
    period_date: Date | null
    quarter: string | null
    studentid: number | null
    student_name: string | null
    attended: number | null
    notattended: number | null
  }

  export type Csgi_detailreport_vCountAggregateOutputType = {
    classid: number
    classname: number
    gradeid: number
    gradecode: number
    teacherid: number
    teachername: number
    teacheremail: number
    periodid: number
    periodname: number
    period_date: number
    quarter: number
    studentid: number
    student_name: number
    attended: number
    notattended: number
    _all: number
  }


  export type Csgi_detailreport_vAvgAggregateInputType = {
    classid?: true
    gradeid?: true
    teacherid?: true
    periodid?: true
    studentid?: true
    attended?: true
    notattended?: true
  }

  export type Csgi_detailreport_vSumAggregateInputType = {
    classid?: true
    gradeid?: true
    teacherid?: true
    periodid?: true
    studentid?: true
    attended?: true
    notattended?: true
  }

  export type Csgi_detailreport_vMinAggregateInputType = {
    classid?: true
    classname?: true
    gradeid?: true
    gradecode?: true
    teacherid?: true
    teachername?: true
    teacheremail?: true
    periodid?: true
    periodname?: true
    period_date?: true
    quarter?: true
    studentid?: true
    student_name?: true
    attended?: true
    notattended?: true
  }

  export type Csgi_detailreport_vMaxAggregateInputType = {
    classid?: true
    classname?: true
    gradeid?: true
    gradecode?: true
    teacherid?: true
    teachername?: true
    teacheremail?: true
    periodid?: true
    periodname?: true
    period_date?: true
    quarter?: true
    studentid?: true
    student_name?: true
    attended?: true
    notattended?: true
  }

  export type Csgi_detailreport_vCountAggregateInputType = {
    classid?: true
    classname?: true
    gradeid?: true
    gradecode?: true
    teacherid?: true
    teachername?: true
    teacheremail?: true
    periodid?: true
    periodname?: true
    period_date?: true
    quarter?: true
    studentid?: true
    student_name?: true
    attended?: true
    notattended?: true
    _all?: true
  }

  export type Csgi_detailreport_vAggregateArgs = {
    /**
     * Filter which csgi_detailreport_v to aggregate.
    **/
    where?: csgi_detailreport_vWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_detailreport_vs to fetch.
    **/
    orderBy?: Enumerable<csgi_detailreport_vOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: csgi_detailreport_vWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_detailreport_vs from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_detailreport_vs.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned csgi_detailreport_vs
    **/
    count?: true | Csgi_detailreport_vCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Csgi_detailreport_vAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Csgi_detailreport_vSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Csgi_detailreport_vMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Csgi_detailreport_vMaxAggregateInputType
  }

  export type GetCsgi_detailreport_vAggregateType<T extends Csgi_detailreport_vAggregateArgs> = {
    [P in keyof T & keyof AggregateCsgi_detailreport_v]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCsgi_detailreport_v[P]>
      : GetScalarType<T[P], AggregateCsgi_detailreport_v[P]>
  }


    
    
  export type Csgi_detailreport_vGroupByArgs = {
    where?: csgi_detailreport_vWhereInput
    orderBy?: Enumerable<csgi_detailreport_vOrderByInput>
    by: Array<Csgi_detailreport_vScalarFieldEnum>
    having?: csgi_detailreport_vScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: Csgi_detailreport_vCountAggregateInputType | true
    avg?: Csgi_detailreport_vAvgAggregateInputType
    sum?: Csgi_detailreport_vSumAggregateInputType
    min?: Csgi_detailreport_vMinAggregateInputType
    max?: Csgi_detailreport_vMaxAggregateInputType
  }


  export type Csgi_detailreport_vGroupByOutputType = {
    classid: number
    classname: string
    gradeid: number
    gradecode: string
    teacherid: number
    teachername: string
    teacheremail: string
    periodid: number
    periodname: string
    period_date: Date
    quarter: string
    studentid: number
    student_name: string
    attended: number
    notattended: number
    count: Csgi_detailreport_vCountAggregateOutputType | null
    avg: Csgi_detailreport_vAvgAggregateOutputType | null
    sum: Csgi_detailreport_vSumAggregateOutputType | null
    min: Csgi_detailreport_vMinAggregateOutputType | null
    max: Csgi_detailreport_vMaxAggregateOutputType | null
  }

  type GetCsgi_detailreport_vGroupByPayload<T extends Csgi_detailreport_vGroupByArgs> = Promise<Array<
    PickArray<Csgi_detailreport_vGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof Csgi_detailreport_vGroupByOutputType))]: GetScalarType<T[P], Csgi_detailreport_vGroupByOutputType[P]>
    }
  >>
    

  export type csgi_detailreport_vSelect = {
    classid?: boolean
    classname?: boolean
    gradeid?: boolean
    gradecode?: boolean
    teacherid?: boolean
    teachername?: boolean
    teacheremail?: boolean
    periodid?: boolean
    periodname?: boolean
    period_date?: boolean
    quarter?: boolean
    studentid?: boolean
    student_name?: boolean
    attended?: boolean
    notattended?: boolean
  }

  export type csgi_detailreport_vGetPayload<
    S extends boolean | null | undefined | csgi_detailreport_vArgs,
    U = keyof S
      > = S extends true
        ? csgi_detailreport_v
    : S extends undefined
    ? never
    : S extends csgi_detailreport_vArgs | csgi_detailreport_vFindManyArgs
    ?'include' extends U
    ? csgi_detailreport_v 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof csgi_detailreport_v ?csgi_detailreport_v [P]
  : 
     never
  } 
    : csgi_detailreport_v
  : csgi_detailreport_v


  type csgi_detailreport_vCountArgs = Merge<
    Omit<csgi_detailreport_vFindManyArgs, 'select' | 'include'> & {
      select?: Csgi_detailreport_vCountAggregateInputType | true
    }
  >

  export interface csgi_detailreport_vDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Csgi_detailreport_v that matches the filter.
     * @param {csgi_detailreport_vFindUniqueArgs} args - Arguments to find a Csgi_detailreport_v
     * @example
     * // Get one Csgi_detailreport_v
     * const csgi_detailreport_v = await prisma.csgi_detailreport_v.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends csgi_detailreport_vFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, csgi_detailreport_vFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'csgi_detailreport_v'> extends True ? CheckSelect<T, Prisma__csgi_detailreport_vClient<csgi_detailreport_v>, Prisma__csgi_detailreport_vClient<csgi_detailreport_vGetPayload<T>>> : CheckSelect<T, Prisma__csgi_detailreport_vClient<csgi_detailreport_v | null >, Prisma__csgi_detailreport_vClient<csgi_detailreport_vGetPayload<T> | null >>

    /**
     * Find the first Csgi_detailreport_v that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_detailreport_vFindFirstArgs} args - Arguments to find a Csgi_detailreport_v
     * @example
     * // Get one Csgi_detailreport_v
     * const csgi_detailreport_v = await prisma.csgi_detailreport_v.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends csgi_detailreport_vFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, csgi_detailreport_vFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'csgi_detailreport_v'> extends True ? CheckSelect<T, Prisma__csgi_detailreport_vClient<csgi_detailreport_v>, Prisma__csgi_detailreport_vClient<csgi_detailreport_vGetPayload<T>>> : CheckSelect<T, Prisma__csgi_detailreport_vClient<csgi_detailreport_v | null >, Prisma__csgi_detailreport_vClient<csgi_detailreport_vGetPayload<T> | null >>

    /**
     * Find zero or more Csgi_detailreport_vs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_detailreport_vFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Csgi_detailreport_vs
     * const csgi_detailreport_vs = await prisma.csgi_detailreport_v.findMany()
     * 
     * // Get first 10 Csgi_detailreport_vs
     * const csgi_detailreport_vs = await prisma.csgi_detailreport_v.findMany({ take: 10 })
     * 
     * // Only select the `classid`
     * const csgi_detailreport_vWithClassidOnly = await prisma.csgi_detailreport_v.findMany({ select: { classid: true } })
     * 
    **/
    findMany<T extends csgi_detailreport_vFindManyArgs>(
      args?: SelectSubset<T, csgi_detailreport_vFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<csgi_detailreport_v>>, PrismaPromise<Array<csgi_detailreport_vGetPayload<T>>>>

    /**
     * Create a Csgi_detailreport_v.
     * @param {csgi_detailreport_vCreateArgs} args - Arguments to create a Csgi_detailreport_v.
     * @example
     * // Create one Csgi_detailreport_v
     * const Csgi_detailreport_v = await prisma.csgi_detailreport_v.create({
     *   data: {
     *     // ... data to create a Csgi_detailreport_v
     *   }
     * })
     * 
    **/
    create<T extends csgi_detailreport_vCreateArgs>(
      args: SelectSubset<T, csgi_detailreport_vCreateArgs>
    ): CheckSelect<T, Prisma__csgi_detailreport_vClient<csgi_detailreport_v>, Prisma__csgi_detailreport_vClient<csgi_detailreport_vGetPayload<T>>>

    /**
     * Create many Csgi_detailreport_vs.
     *     @param {csgi_detailreport_vCreateManyArgs} args - Arguments to create many Csgi_detailreport_vs.
     *     @example
     *     // Create many Csgi_detailreport_vs
     *     const csgi_detailreport_v = await prisma.csgi_detailreport_v.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends csgi_detailreport_vCreateManyArgs>(
      args?: SelectSubset<T, csgi_detailreport_vCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Csgi_detailreport_v.
     * @param {csgi_detailreport_vDeleteArgs} args - Arguments to delete one Csgi_detailreport_v.
     * @example
     * // Delete one Csgi_detailreport_v
     * const Csgi_detailreport_v = await prisma.csgi_detailreport_v.delete({
     *   where: {
     *     // ... filter to delete one Csgi_detailreport_v
     *   }
     * })
     * 
    **/
    delete<T extends csgi_detailreport_vDeleteArgs>(
      args: SelectSubset<T, csgi_detailreport_vDeleteArgs>
    ): CheckSelect<T, Prisma__csgi_detailreport_vClient<csgi_detailreport_v>, Prisma__csgi_detailreport_vClient<csgi_detailreport_vGetPayload<T>>>

    /**
     * Update one Csgi_detailreport_v.
     * @param {csgi_detailreport_vUpdateArgs} args - Arguments to update one Csgi_detailreport_v.
     * @example
     * // Update one Csgi_detailreport_v
     * const csgi_detailreport_v = await prisma.csgi_detailreport_v.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends csgi_detailreport_vUpdateArgs>(
      args: SelectSubset<T, csgi_detailreport_vUpdateArgs>
    ): CheckSelect<T, Prisma__csgi_detailreport_vClient<csgi_detailreport_v>, Prisma__csgi_detailreport_vClient<csgi_detailreport_vGetPayload<T>>>

    /**
     * Delete zero or more Csgi_detailreport_vs.
     * @param {csgi_detailreport_vDeleteManyArgs} args - Arguments to filter Csgi_detailreport_vs to delete.
     * @example
     * // Delete a few Csgi_detailreport_vs
     * const { count } = await prisma.csgi_detailreport_v.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends csgi_detailreport_vDeleteManyArgs>(
      args?: SelectSubset<T, csgi_detailreport_vDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Csgi_detailreport_vs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_detailreport_vUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Csgi_detailreport_vs
     * const csgi_detailreport_v = await prisma.csgi_detailreport_v.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends csgi_detailreport_vUpdateManyArgs>(
      args: SelectSubset<T, csgi_detailreport_vUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Csgi_detailreport_v.
     * @param {csgi_detailreport_vUpsertArgs} args - Arguments to update or create a Csgi_detailreport_v.
     * @example
     * // Update or create a Csgi_detailreport_v
     * const csgi_detailreport_v = await prisma.csgi_detailreport_v.upsert({
     *   create: {
     *     // ... data to create a Csgi_detailreport_v
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Csgi_detailreport_v we want to update
     *   }
     * })
    **/
    upsert<T extends csgi_detailreport_vUpsertArgs>(
      args: SelectSubset<T, csgi_detailreport_vUpsertArgs>
    ): CheckSelect<T, Prisma__csgi_detailreport_vClient<csgi_detailreport_v>, Prisma__csgi_detailreport_vClient<csgi_detailreport_vGetPayload<T>>>

    /**
     * Count the number of Csgi_detailreport_vs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_detailreport_vCountArgs} args - Arguments to filter Csgi_detailreport_vs to count.
     * @example
     * // Count the number of Csgi_detailreport_vs
     * const count = await prisma.csgi_detailreport_v.count({
     *   where: {
     *     // ... the filter for the Csgi_detailreport_vs we want to count
     *   }
     * })
    **/
    count<T extends csgi_detailreport_vCountArgs>(
      args?: Subset<T, csgi_detailreport_vCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Csgi_detailreport_vCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Csgi_detailreport_v.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Csgi_detailreport_vAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Csgi_detailreport_vAggregateArgs>(args: Subset<T, Csgi_detailreport_vAggregateArgs>): PrismaPromise<GetCsgi_detailreport_vAggregateType<T>>

    /**
     * Group by Csgi_detailreport_v.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Csgi_detailreport_vGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Csgi_detailreport_vGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Csgi_detailreport_vGroupByArgs['orderBy'] }
        : { orderBy?: Csgi_detailreport_vGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Csgi_detailreport_vGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCsgi_detailreport_vGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for csgi_detailreport_v.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__csgi_detailreport_vClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * csgi_detailreport_v findUnique
   */
  export type csgi_detailreport_vFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the csgi_detailreport_v
    **/
    select?: csgi_detailreport_vSelect | null
    /**
     * Throw an Error if a csgi_detailreport_v can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which csgi_detailreport_v to fetch.
    **/
    where: csgi_detailreport_vWhereUniqueInput
  }


  /**
   * csgi_detailreport_v findFirst
   */
  export type csgi_detailreport_vFindFirstArgs = {
    /**
     * Select specific fields to fetch from the csgi_detailreport_v
    **/
    select?: csgi_detailreport_vSelect | null
    /**
     * Throw an Error if a csgi_detailreport_v can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which csgi_detailreport_v to fetch.
    **/
    where?: csgi_detailreport_vWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_detailreport_vs to fetch.
    **/
    orderBy?: Enumerable<csgi_detailreport_vOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for csgi_detailreport_vs.
    **/
    cursor?: csgi_detailreport_vWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_detailreport_vs from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_detailreport_vs.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of csgi_detailreport_vs.
    **/
    distinct?: Enumerable<Csgi_detailreport_vScalarFieldEnum>
  }


  /**
   * csgi_detailreport_v findMany
   */
  export type csgi_detailreport_vFindManyArgs = {
    /**
     * Select specific fields to fetch from the csgi_detailreport_v
    **/
    select?: csgi_detailreport_vSelect | null
    /**
     * Filter, which csgi_detailreport_vs to fetch.
    **/
    where?: csgi_detailreport_vWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_detailreport_vs to fetch.
    **/
    orderBy?: Enumerable<csgi_detailreport_vOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing csgi_detailreport_vs.
    **/
    cursor?: csgi_detailreport_vWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_detailreport_vs from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_detailreport_vs.
    **/
    skip?: number
    distinct?: Enumerable<Csgi_detailreport_vScalarFieldEnum>
  }


  /**
   * csgi_detailreport_v create
   */
  export type csgi_detailreport_vCreateArgs = {
    /**
     * Select specific fields to fetch from the csgi_detailreport_v
    **/
    select?: csgi_detailreport_vSelect | null
    /**
     * The data needed to create a csgi_detailreport_v.
    **/
    data: XOR<csgi_detailreport_vCreateInput, csgi_detailreport_vUncheckedCreateInput>
  }


  /**
   * csgi_detailreport_v createMany
   */
  export type csgi_detailreport_vCreateManyArgs = {
    data: Enumerable<csgi_detailreport_vCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * csgi_detailreport_v update
   */
  export type csgi_detailreport_vUpdateArgs = {
    /**
     * Select specific fields to fetch from the csgi_detailreport_v
    **/
    select?: csgi_detailreport_vSelect | null
    /**
     * The data needed to update a csgi_detailreport_v.
    **/
    data: XOR<csgi_detailreport_vUpdateInput, csgi_detailreport_vUncheckedUpdateInput>
    /**
     * Choose, which csgi_detailreport_v to update.
    **/
    where: csgi_detailreport_vWhereUniqueInput
  }


  /**
   * csgi_detailreport_v updateMany
   */
  export type csgi_detailreport_vUpdateManyArgs = {
    data: XOR<csgi_detailreport_vUpdateManyMutationInput, csgi_detailreport_vUncheckedUpdateManyInput>
    where?: csgi_detailreport_vWhereInput
  }


  /**
   * csgi_detailreport_v upsert
   */
  export type csgi_detailreport_vUpsertArgs = {
    /**
     * Select specific fields to fetch from the csgi_detailreport_v
    **/
    select?: csgi_detailreport_vSelect | null
    /**
     * The filter to search for the csgi_detailreport_v to update in case it exists.
    **/
    where: csgi_detailreport_vWhereUniqueInput
    /**
     * In case the csgi_detailreport_v found by the `where` argument doesn't exist, create a new csgi_detailreport_v with this data.
    **/
    create: XOR<csgi_detailreport_vCreateInput, csgi_detailreport_vUncheckedCreateInput>
    /**
     * In case the csgi_detailreport_v was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<csgi_detailreport_vUpdateInput, csgi_detailreport_vUncheckedUpdateInput>
  }


  /**
   * csgi_detailreport_v delete
   */
  export type csgi_detailreport_vDeleteArgs = {
    /**
     * Select specific fields to fetch from the csgi_detailreport_v
    **/
    select?: csgi_detailreport_vSelect | null
    /**
     * Filter which csgi_detailreport_v to delete.
    **/
    where: csgi_detailreport_vWhereUniqueInput
  }


  /**
   * csgi_detailreport_v deleteMany
   */
  export type csgi_detailreport_vDeleteManyArgs = {
    where?: csgi_detailreport_vWhereInput
  }


  /**
   * csgi_detailreport_v without action
   */
  export type csgi_detailreport_vArgs = {
    /**
     * Select specific fields to fetch from the csgi_detailreport_v
    **/
    select?: csgi_detailreport_vSelect | null
  }



  /**
   * Model csgi_summaryreport_v
   */


  export type AggregateCsgi_summaryreport_v = {
    count: Csgi_summaryreport_vCountAggregateOutputType | null
    avg: Csgi_summaryreport_vAvgAggregateOutputType | null
    sum: Csgi_summaryreport_vSumAggregateOutputType | null
    min: Csgi_summaryreport_vMinAggregateOutputType | null
    max: Csgi_summaryreport_vMaxAggregateOutputType | null
  }

  export type Csgi_summaryreport_vAvgAggregateOutputType = {
    gradeid: number | null
    teacherid: number | null
    no_attended: number | null
    no_missed: number | null
  }

  export type Csgi_summaryreport_vSumAggregateOutputType = {
    gradeid: number | null
    teacherid: number | null
    no_attended: number | null
    no_missed: number | null
  }

  export type Csgi_summaryreport_vMinAggregateOutputType = {
    classname: string | null
    gradeid: number | null
    gradecode: string | null
    teacherid: number | null
    teacheremail: string | null
    teachername: string | null
    student_name: string | null
    quarter: string | null
    no_attended: number | null
    no_missed: number | null
  }

  export type Csgi_summaryreport_vMaxAggregateOutputType = {
    classname: string | null
    gradeid: number | null
    gradecode: string | null
    teacherid: number | null
    teacheremail: string | null
    teachername: string | null
    student_name: string | null
    quarter: string | null
    no_attended: number | null
    no_missed: number | null
  }

  export type Csgi_summaryreport_vCountAggregateOutputType = {
    classname: number
    gradeid: number
    gradecode: number
    teacherid: number
    teacheremail: number
    teachername: number
    student_name: number
    quarter: number
    no_attended: number
    no_missed: number
    _all: number
  }


  export type Csgi_summaryreport_vAvgAggregateInputType = {
    gradeid?: true
    teacherid?: true
    no_attended?: true
    no_missed?: true
  }

  export type Csgi_summaryreport_vSumAggregateInputType = {
    gradeid?: true
    teacherid?: true
    no_attended?: true
    no_missed?: true
  }

  export type Csgi_summaryreport_vMinAggregateInputType = {
    classname?: true
    gradeid?: true
    gradecode?: true
    teacherid?: true
    teacheremail?: true
    teachername?: true
    student_name?: true
    quarter?: true
    no_attended?: true
    no_missed?: true
  }

  export type Csgi_summaryreport_vMaxAggregateInputType = {
    classname?: true
    gradeid?: true
    gradecode?: true
    teacherid?: true
    teacheremail?: true
    teachername?: true
    student_name?: true
    quarter?: true
    no_attended?: true
    no_missed?: true
  }

  export type Csgi_summaryreport_vCountAggregateInputType = {
    classname?: true
    gradeid?: true
    gradecode?: true
    teacherid?: true
    teacheremail?: true
    teachername?: true
    student_name?: true
    quarter?: true
    no_attended?: true
    no_missed?: true
    _all?: true
  }

  export type Csgi_summaryreport_vAggregateArgs = {
    /**
     * Filter which csgi_summaryreport_v to aggregate.
    **/
    where?: csgi_summaryreport_vWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_summaryreport_vs to fetch.
    **/
    orderBy?: Enumerable<csgi_summaryreport_vOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: csgi_summaryreport_vWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_summaryreport_vs from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_summaryreport_vs.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned csgi_summaryreport_vs
    **/
    count?: true | Csgi_summaryreport_vCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Csgi_summaryreport_vAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Csgi_summaryreport_vSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Csgi_summaryreport_vMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Csgi_summaryreport_vMaxAggregateInputType
  }

  export type GetCsgi_summaryreport_vAggregateType<T extends Csgi_summaryreport_vAggregateArgs> = {
    [P in keyof T & keyof AggregateCsgi_summaryreport_v]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCsgi_summaryreport_v[P]>
      : GetScalarType<T[P], AggregateCsgi_summaryreport_v[P]>
  }


    
    
  export type Csgi_summaryreport_vGroupByArgs = {
    where?: csgi_summaryreport_vWhereInput
    orderBy?: Enumerable<csgi_summaryreport_vOrderByInput>
    by: Array<Csgi_summaryreport_vScalarFieldEnum>
    having?: csgi_summaryreport_vScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: Csgi_summaryreport_vCountAggregateInputType | true
    avg?: Csgi_summaryreport_vAvgAggregateInputType
    sum?: Csgi_summaryreport_vSumAggregateInputType
    min?: Csgi_summaryreport_vMinAggregateInputType
    max?: Csgi_summaryreport_vMaxAggregateInputType
  }


  export type Csgi_summaryreport_vGroupByOutputType = {
    classname: string
    gradeid: number
    gradecode: string
    teacherid: number
    teacheremail: string
    teachername: string
    student_name: string
    quarter: string
    no_attended: number
    no_missed: number
    count: Csgi_summaryreport_vCountAggregateOutputType | null
    avg: Csgi_summaryreport_vAvgAggregateOutputType | null
    sum: Csgi_summaryreport_vSumAggregateOutputType | null
    min: Csgi_summaryreport_vMinAggregateOutputType | null
    max: Csgi_summaryreport_vMaxAggregateOutputType | null
  }

  type GetCsgi_summaryreport_vGroupByPayload<T extends Csgi_summaryreport_vGroupByArgs> = Promise<Array<
    PickArray<Csgi_summaryreport_vGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof Csgi_summaryreport_vGroupByOutputType))]: GetScalarType<T[P], Csgi_summaryreport_vGroupByOutputType[P]>
    }
  >>
    

  export type csgi_summaryreport_vSelect = {
    classname?: boolean
    gradeid?: boolean
    gradecode?: boolean
    teacherid?: boolean
    teacheremail?: boolean
    teachername?: boolean
    student_name?: boolean
    quarter?: boolean
    no_attended?: boolean
    no_missed?: boolean
  }

  export type csgi_summaryreport_vGetPayload<
    S extends boolean | null | undefined | csgi_summaryreport_vArgs,
    U = keyof S
      > = S extends true
        ? csgi_summaryreport_v
    : S extends undefined
    ? never
    : S extends csgi_summaryreport_vArgs | csgi_summaryreport_vFindManyArgs
    ?'include' extends U
    ? csgi_summaryreport_v 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof csgi_summaryreport_v ?csgi_summaryreport_v [P]
  : 
     never
  } 
    : csgi_summaryreport_v
  : csgi_summaryreport_v


  type csgi_summaryreport_vCountArgs = Merge<
    Omit<csgi_summaryreport_vFindManyArgs, 'select' | 'include'> & {
      select?: Csgi_summaryreport_vCountAggregateInputType | true
    }
  >

  export interface csgi_summaryreport_vDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Csgi_summaryreport_v that matches the filter.
     * @param {csgi_summaryreport_vFindUniqueArgs} args - Arguments to find a Csgi_summaryreport_v
     * @example
     * // Get one Csgi_summaryreport_v
     * const csgi_summaryreport_v = await prisma.csgi_summaryreport_v.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends csgi_summaryreport_vFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, csgi_summaryreport_vFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'csgi_summaryreport_v'> extends True ? CheckSelect<T, Prisma__csgi_summaryreport_vClient<csgi_summaryreport_v>, Prisma__csgi_summaryreport_vClient<csgi_summaryreport_vGetPayload<T>>> : CheckSelect<T, Prisma__csgi_summaryreport_vClient<csgi_summaryreport_v | null >, Prisma__csgi_summaryreport_vClient<csgi_summaryreport_vGetPayload<T> | null >>

    /**
     * Find the first Csgi_summaryreport_v that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_summaryreport_vFindFirstArgs} args - Arguments to find a Csgi_summaryreport_v
     * @example
     * // Get one Csgi_summaryreport_v
     * const csgi_summaryreport_v = await prisma.csgi_summaryreport_v.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends csgi_summaryreport_vFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, csgi_summaryreport_vFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'csgi_summaryreport_v'> extends True ? CheckSelect<T, Prisma__csgi_summaryreport_vClient<csgi_summaryreport_v>, Prisma__csgi_summaryreport_vClient<csgi_summaryreport_vGetPayload<T>>> : CheckSelect<T, Prisma__csgi_summaryreport_vClient<csgi_summaryreport_v | null >, Prisma__csgi_summaryreport_vClient<csgi_summaryreport_vGetPayload<T> | null >>

    /**
     * Find zero or more Csgi_summaryreport_vs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_summaryreport_vFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Csgi_summaryreport_vs
     * const csgi_summaryreport_vs = await prisma.csgi_summaryreport_v.findMany()
     * 
     * // Get first 10 Csgi_summaryreport_vs
     * const csgi_summaryreport_vs = await prisma.csgi_summaryreport_v.findMany({ take: 10 })
     * 
     * // Only select the `classname`
     * const csgi_summaryreport_vWithClassnameOnly = await prisma.csgi_summaryreport_v.findMany({ select: { classname: true } })
     * 
    **/
    findMany<T extends csgi_summaryreport_vFindManyArgs>(
      args?: SelectSubset<T, csgi_summaryreport_vFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<csgi_summaryreport_v>>, PrismaPromise<Array<csgi_summaryreport_vGetPayload<T>>>>

    /**
     * Create a Csgi_summaryreport_v.
     * @param {csgi_summaryreport_vCreateArgs} args - Arguments to create a Csgi_summaryreport_v.
     * @example
     * // Create one Csgi_summaryreport_v
     * const Csgi_summaryreport_v = await prisma.csgi_summaryreport_v.create({
     *   data: {
     *     // ... data to create a Csgi_summaryreport_v
     *   }
     * })
     * 
    **/
    create<T extends csgi_summaryreport_vCreateArgs>(
      args: SelectSubset<T, csgi_summaryreport_vCreateArgs>
    ): CheckSelect<T, Prisma__csgi_summaryreport_vClient<csgi_summaryreport_v>, Prisma__csgi_summaryreport_vClient<csgi_summaryreport_vGetPayload<T>>>

    /**
     * Create many Csgi_summaryreport_vs.
     *     @param {csgi_summaryreport_vCreateManyArgs} args - Arguments to create many Csgi_summaryreport_vs.
     *     @example
     *     // Create many Csgi_summaryreport_vs
     *     const csgi_summaryreport_v = await prisma.csgi_summaryreport_v.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends csgi_summaryreport_vCreateManyArgs>(
      args?: SelectSubset<T, csgi_summaryreport_vCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Csgi_summaryreport_v.
     * @param {csgi_summaryreport_vDeleteArgs} args - Arguments to delete one Csgi_summaryreport_v.
     * @example
     * // Delete one Csgi_summaryreport_v
     * const Csgi_summaryreport_v = await prisma.csgi_summaryreport_v.delete({
     *   where: {
     *     // ... filter to delete one Csgi_summaryreport_v
     *   }
     * })
     * 
    **/
    delete<T extends csgi_summaryreport_vDeleteArgs>(
      args: SelectSubset<T, csgi_summaryreport_vDeleteArgs>
    ): CheckSelect<T, Prisma__csgi_summaryreport_vClient<csgi_summaryreport_v>, Prisma__csgi_summaryreport_vClient<csgi_summaryreport_vGetPayload<T>>>

    /**
     * Update one Csgi_summaryreport_v.
     * @param {csgi_summaryreport_vUpdateArgs} args - Arguments to update one Csgi_summaryreport_v.
     * @example
     * // Update one Csgi_summaryreport_v
     * const csgi_summaryreport_v = await prisma.csgi_summaryreport_v.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends csgi_summaryreport_vUpdateArgs>(
      args: SelectSubset<T, csgi_summaryreport_vUpdateArgs>
    ): CheckSelect<T, Prisma__csgi_summaryreport_vClient<csgi_summaryreport_v>, Prisma__csgi_summaryreport_vClient<csgi_summaryreport_vGetPayload<T>>>

    /**
     * Delete zero or more Csgi_summaryreport_vs.
     * @param {csgi_summaryreport_vDeleteManyArgs} args - Arguments to filter Csgi_summaryreport_vs to delete.
     * @example
     * // Delete a few Csgi_summaryreport_vs
     * const { count } = await prisma.csgi_summaryreport_v.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends csgi_summaryreport_vDeleteManyArgs>(
      args?: SelectSubset<T, csgi_summaryreport_vDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Csgi_summaryreport_vs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_summaryreport_vUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Csgi_summaryreport_vs
     * const csgi_summaryreport_v = await prisma.csgi_summaryreport_v.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends csgi_summaryreport_vUpdateManyArgs>(
      args: SelectSubset<T, csgi_summaryreport_vUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Csgi_summaryreport_v.
     * @param {csgi_summaryreport_vUpsertArgs} args - Arguments to update or create a Csgi_summaryreport_v.
     * @example
     * // Update or create a Csgi_summaryreport_v
     * const csgi_summaryreport_v = await prisma.csgi_summaryreport_v.upsert({
     *   create: {
     *     // ... data to create a Csgi_summaryreport_v
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Csgi_summaryreport_v we want to update
     *   }
     * })
    **/
    upsert<T extends csgi_summaryreport_vUpsertArgs>(
      args: SelectSubset<T, csgi_summaryreport_vUpsertArgs>
    ): CheckSelect<T, Prisma__csgi_summaryreport_vClient<csgi_summaryreport_v>, Prisma__csgi_summaryreport_vClient<csgi_summaryreport_vGetPayload<T>>>

    /**
     * Count the number of Csgi_summaryreport_vs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_summaryreport_vCountArgs} args - Arguments to filter Csgi_summaryreport_vs to count.
     * @example
     * // Count the number of Csgi_summaryreport_vs
     * const count = await prisma.csgi_summaryreport_v.count({
     *   where: {
     *     // ... the filter for the Csgi_summaryreport_vs we want to count
     *   }
     * })
    **/
    count<T extends csgi_summaryreport_vCountArgs>(
      args?: Subset<T, csgi_summaryreport_vCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Csgi_summaryreport_vCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Csgi_summaryreport_v.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Csgi_summaryreport_vAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Csgi_summaryreport_vAggregateArgs>(args: Subset<T, Csgi_summaryreport_vAggregateArgs>): PrismaPromise<GetCsgi_summaryreport_vAggregateType<T>>

    /**
     * Group by Csgi_summaryreport_v.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Csgi_summaryreport_vGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Csgi_summaryreport_vGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Csgi_summaryreport_vGroupByArgs['orderBy'] }
        : { orderBy?: Csgi_summaryreport_vGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Csgi_summaryreport_vGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCsgi_summaryreport_vGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for csgi_summaryreport_v.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__csgi_summaryreport_vClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * csgi_summaryreport_v findUnique
   */
  export type csgi_summaryreport_vFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the csgi_summaryreport_v
    **/
    select?: csgi_summaryreport_vSelect | null
    /**
     * Throw an Error if a csgi_summaryreport_v can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which csgi_summaryreport_v to fetch.
    **/
    where: csgi_summaryreport_vWhereUniqueInput
  }


  /**
   * csgi_summaryreport_v findFirst
   */
  export type csgi_summaryreport_vFindFirstArgs = {
    /**
     * Select specific fields to fetch from the csgi_summaryreport_v
    **/
    select?: csgi_summaryreport_vSelect | null
    /**
     * Throw an Error if a csgi_summaryreport_v can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which csgi_summaryreport_v to fetch.
    **/
    where?: csgi_summaryreport_vWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_summaryreport_vs to fetch.
    **/
    orderBy?: Enumerable<csgi_summaryreport_vOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for csgi_summaryreport_vs.
    **/
    cursor?: csgi_summaryreport_vWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_summaryreport_vs from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_summaryreport_vs.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of csgi_summaryreport_vs.
    **/
    distinct?: Enumerable<Csgi_summaryreport_vScalarFieldEnum>
  }


  /**
   * csgi_summaryreport_v findMany
   */
  export type csgi_summaryreport_vFindManyArgs = {
    /**
     * Select specific fields to fetch from the csgi_summaryreport_v
    **/
    select?: csgi_summaryreport_vSelect | null
    /**
     * Filter, which csgi_summaryreport_vs to fetch.
    **/
    where?: csgi_summaryreport_vWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_summaryreport_vs to fetch.
    **/
    orderBy?: Enumerable<csgi_summaryreport_vOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing csgi_summaryreport_vs.
    **/
    cursor?: csgi_summaryreport_vWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_summaryreport_vs from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_summaryreport_vs.
    **/
    skip?: number
    distinct?: Enumerable<Csgi_summaryreport_vScalarFieldEnum>
  }


  /**
   * csgi_summaryreport_v create
   */
  export type csgi_summaryreport_vCreateArgs = {
    /**
     * Select specific fields to fetch from the csgi_summaryreport_v
    **/
    select?: csgi_summaryreport_vSelect | null
    /**
     * The data needed to create a csgi_summaryreport_v.
    **/
    data: XOR<csgi_summaryreport_vCreateInput, csgi_summaryreport_vUncheckedCreateInput>
  }


  /**
   * csgi_summaryreport_v createMany
   */
  export type csgi_summaryreport_vCreateManyArgs = {
    data: Enumerable<csgi_summaryreport_vCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * csgi_summaryreport_v update
   */
  export type csgi_summaryreport_vUpdateArgs = {
    /**
     * Select specific fields to fetch from the csgi_summaryreport_v
    **/
    select?: csgi_summaryreport_vSelect | null
    /**
     * The data needed to update a csgi_summaryreport_v.
    **/
    data: XOR<csgi_summaryreport_vUpdateInput, csgi_summaryreport_vUncheckedUpdateInput>
    /**
     * Choose, which csgi_summaryreport_v to update.
    **/
    where: csgi_summaryreport_vWhereUniqueInput
  }


  /**
   * csgi_summaryreport_v updateMany
   */
  export type csgi_summaryreport_vUpdateManyArgs = {
    data: XOR<csgi_summaryreport_vUpdateManyMutationInput, csgi_summaryreport_vUncheckedUpdateManyInput>
    where?: csgi_summaryreport_vWhereInput
  }


  /**
   * csgi_summaryreport_v upsert
   */
  export type csgi_summaryreport_vUpsertArgs = {
    /**
     * Select specific fields to fetch from the csgi_summaryreport_v
    **/
    select?: csgi_summaryreport_vSelect | null
    /**
     * The filter to search for the csgi_summaryreport_v to update in case it exists.
    **/
    where: csgi_summaryreport_vWhereUniqueInput
    /**
     * In case the csgi_summaryreport_v found by the `where` argument doesn't exist, create a new csgi_summaryreport_v with this data.
    **/
    create: XOR<csgi_summaryreport_vCreateInput, csgi_summaryreport_vUncheckedCreateInput>
    /**
     * In case the csgi_summaryreport_v was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<csgi_summaryreport_vUpdateInput, csgi_summaryreport_vUncheckedUpdateInput>
  }


  /**
   * csgi_summaryreport_v delete
   */
  export type csgi_summaryreport_vDeleteArgs = {
    /**
     * Select specific fields to fetch from the csgi_summaryreport_v
    **/
    select?: csgi_summaryreport_vSelect | null
    /**
     * Filter which csgi_summaryreport_v to delete.
    **/
    where: csgi_summaryreport_vWhereUniqueInput
  }


  /**
   * csgi_summaryreport_v deleteMany
   */
  export type csgi_summaryreport_vDeleteManyArgs = {
    where?: csgi_summaryreport_vWhereInput
  }


  /**
   * csgi_summaryreport_v without action
   */
  export type csgi_summaryreport_vArgs = {
    /**
     * Select specific fields to fetch from the csgi_summaryreport_v
    **/
    select?: csgi_summaryreport_vSelect | null
  }



  /**
   * Model csgi_teacher_v
   */


  export type AggregateCsgi_teacher_v = {
    count: Csgi_teacher_vCountAggregateOutputType | null
    avg: Csgi_teacher_vAvgAggregateOutputType | null
    sum: Csgi_teacher_vSumAggregateOutputType | null
    min: Csgi_teacher_vMinAggregateOutputType | null
    max: Csgi_teacher_vMaxAggregateOutputType | null
  }

  export type Csgi_teacher_vAvgAggregateOutputType = {
    teacherid: number | null
  }

  export type Csgi_teacher_vSumAggregateOutputType = {
    teacherid: number | null
  }

  export type Csgi_teacher_vMinAggregateOutputType = {
    teacherid: number | null
    teacher: string | null
    teacheremail: string | null
    teachername: string | null
    rolename: string | null
  }

  export type Csgi_teacher_vMaxAggregateOutputType = {
    teacherid: number | null
    teacher: string | null
    teacheremail: string | null
    teachername: string | null
    rolename: string | null
  }

  export type Csgi_teacher_vCountAggregateOutputType = {
    teacherid: number
    teacher: number
    teacheremail: number
    teachername: number
    rolename: number
    _all: number
  }


  export type Csgi_teacher_vAvgAggregateInputType = {
    teacherid?: true
  }

  export type Csgi_teacher_vSumAggregateInputType = {
    teacherid?: true
  }

  export type Csgi_teacher_vMinAggregateInputType = {
    teacherid?: true
    teacher?: true
    teacheremail?: true
    teachername?: true
    rolename?: true
  }

  export type Csgi_teacher_vMaxAggregateInputType = {
    teacherid?: true
    teacher?: true
    teacheremail?: true
    teachername?: true
    rolename?: true
  }

  export type Csgi_teacher_vCountAggregateInputType = {
    teacherid?: true
    teacher?: true
    teacheremail?: true
    teachername?: true
    rolename?: true
    _all?: true
  }

  export type Csgi_teacher_vAggregateArgs = {
    /**
     * Filter which csgi_teacher_v to aggregate.
    **/
    where?: csgi_teacher_vWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_teacher_vs to fetch.
    **/
    orderBy?: Enumerable<csgi_teacher_vOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: csgi_teacher_vWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_teacher_vs from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_teacher_vs.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned csgi_teacher_vs
    **/
    count?: true | Csgi_teacher_vCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Csgi_teacher_vAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Csgi_teacher_vSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Csgi_teacher_vMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Csgi_teacher_vMaxAggregateInputType
  }

  export type GetCsgi_teacher_vAggregateType<T extends Csgi_teacher_vAggregateArgs> = {
    [P in keyof T & keyof AggregateCsgi_teacher_v]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCsgi_teacher_v[P]>
      : GetScalarType<T[P], AggregateCsgi_teacher_v[P]>
  }


    
    
  export type Csgi_teacher_vGroupByArgs = {
    where?: csgi_teacher_vWhereInput
    orderBy?: Enumerable<csgi_teacher_vOrderByInput>
    by: Array<Csgi_teacher_vScalarFieldEnum>
    having?: csgi_teacher_vScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: Csgi_teacher_vCountAggregateInputType | true
    avg?: Csgi_teacher_vAvgAggregateInputType
    sum?: Csgi_teacher_vSumAggregateInputType
    min?: Csgi_teacher_vMinAggregateInputType
    max?: Csgi_teacher_vMaxAggregateInputType
  }


  export type Csgi_teacher_vGroupByOutputType = {
    teacherid: number
    teacher: string
    teacheremail: string
    teachername: string
    rolename: string
    count: Csgi_teacher_vCountAggregateOutputType | null
    avg: Csgi_teacher_vAvgAggregateOutputType | null
    sum: Csgi_teacher_vSumAggregateOutputType | null
    min: Csgi_teacher_vMinAggregateOutputType | null
    max: Csgi_teacher_vMaxAggregateOutputType | null
  }

  type GetCsgi_teacher_vGroupByPayload<T extends Csgi_teacher_vGroupByArgs> = Promise<Array<
    PickArray<Csgi_teacher_vGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof Csgi_teacher_vGroupByOutputType))]: GetScalarType<T[P], Csgi_teacher_vGroupByOutputType[P]>
    }
  >>
    

  export type csgi_teacher_vSelect = {
    teacherid?: boolean
    teacher?: boolean
    teacheremail?: boolean
    teachername?: boolean
    rolename?: boolean
  }

  export type csgi_teacher_vGetPayload<
    S extends boolean | null | undefined | csgi_teacher_vArgs,
    U = keyof S
      > = S extends true
        ? csgi_teacher_v
    : S extends undefined
    ? never
    : S extends csgi_teacher_vArgs | csgi_teacher_vFindManyArgs
    ?'include' extends U
    ? csgi_teacher_v 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof csgi_teacher_v ?csgi_teacher_v [P]
  : 
     never
  } 
    : csgi_teacher_v
  : csgi_teacher_v


  type csgi_teacher_vCountArgs = Merge<
    Omit<csgi_teacher_vFindManyArgs, 'select' | 'include'> & {
      select?: Csgi_teacher_vCountAggregateInputType | true
    }
  >

  export interface csgi_teacher_vDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Csgi_teacher_v that matches the filter.
     * @param {csgi_teacher_vFindUniqueArgs} args - Arguments to find a Csgi_teacher_v
     * @example
     * // Get one Csgi_teacher_v
     * const csgi_teacher_v = await prisma.csgi_teacher_v.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends csgi_teacher_vFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, csgi_teacher_vFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'csgi_teacher_v'> extends True ? CheckSelect<T, Prisma__csgi_teacher_vClient<csgi_teacher_v>, Prisma__csgi_teacher_vClient<csgi_teacher_vGetPayload<T>>> : CheckSelect<T, Prisma__csgi_teacher_vClient<csgi_teacher_v | null >, Prisma__csgi_teacher_vClient<csgi_teacher_vGetPayload<T> | null >>

    /**
     * Find the first Csgi_teacher_v that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_teacher_vFindFirstArgs} args - Arguments to find a Csgi_teacher_v
     * @example
     * // Get one Csgi_teacher_v
     * const csgi_teacher_v = await prisma.csgi_teacher_v.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends csgi_teacher_vFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, csgi_teacher_vFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'csgi_teacher_v'> extends True ? CheckSelect<T, Prisma__csgi_teacher_vClient<csgi_teacher_v>, Prisma__csgi_teacher_vClient<csgi_teacher_vGetPayload<T>>> : CheckSelect<T, Prisma__csgi_teacher_vClient<csgi_teacher_v | null >, Prisma__csgi_teacher_vClient<csgi_teacher_vGetPayload<T> | null >>

    /**
     * Find zero or more Csgi_teacher_vs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_teacher_vFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Csgi_teacher_vs
     * const csgi_teacher_vs = await prisma.csgi_teacher_v.findMany()
     * 
     * // Get first 10 Csgi_teacher_vs
     * const csgi_teacher_vs = await prisma.csgi_teacher_v.findMany({ take: 10 })
     * 
     * // Only select the `teacherid`
     * const csgi_teacher_vWithTeacheridOnly = await prisma.csgi_teacher_v.findMany({ select: { teacherid: true } })
     * 
    **/
    findMany<T extends csgi_teacher_vFindManyArgs>(
      args?: SelectSubset<T, csgi_teacher_vFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<csgi_teacher_v>>, PrismaPromise<Array<csgi_teacher_vGetPayload<T>>>>

    /**
     * Create a Csgi_teacher_v.
     * @param {csgi_teacher_vCreateArgs} args - Arguments to create a Csgi_teacher_v.
     * @example
     * // Create one Csgi_teacher_v
     * const Csgi_teacher_v = await prisma.csgi_teacher_v.create({
     *   data: {
     *     // ... data to create a Csgi_teacher_v
     *   }
     * })
     * 
    **/
    create<T extends csgi_teacher_vCreateArgs>(
      args: SelectSubset<T, csgi_teacher_vCreateArgs>
    ): CheckSelect<T, Prisma__csgi_teacher_vClient<csgi_teacher_v>, Prisma__csgi_teacher_vClient<csgi_teacher_vGetPayload<T>>>

    /**
     * Create many Csgi_teacher_vs.
     *     @param {csgi_teacher_vCreateManyArgs} args - Arguments to create many Csgi_teacher_vs.
     *     @example
     *     // Create many Csgi_teacher_vs
     *     const csgi_teacher_v = await prisma.csgi_teacher_v.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends csgi_teacher_vCreateManyArgs>(
      args?: SelectSubset<T, csgi_teacher_vCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Csgi_teacher_v.
     * @param {csgi_teacher_vDeleteArgs} args - Arguments to delete one Csgi_teacher_v.
     * @example
     * // Delete one Csgi_teacher_v
     * const Csgi_teacher_v = await prisma.csgi_teacher_v.delete({
     *   where: {
     *     // ... filter to delete one Csgi_teacher_v
     *   }
     * })
     * 
    **/
    delete<T extends csgi_teacher_vDeleteArgs>(
      args: SelectSubset<T, csgi_teacher_vDeleteArgs>
    ): CheckSelect<T, Prisma__csgi_teacher_vClient<csgi_teacher_v>, Prisma__csgi_teacher_vClient<csgi_teacher_vGetPayload<T>>>

    /**
     * Update one Csgi_teacher_v.
     * @param {csgi_teacher_vUpdateArgs} args - Arguments to update one Csgi_teacher_v.
     * @example
     * // Update one Csgi_teacher_v
     * const csgi_teacher_v = await prisma.csgi_teacher_v.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends csgi_teacher_vUpdateArgs>(
      args: SelectSubset<T, csgi_teacher_vUpdateArgs>
    ): CheckSelect<T, Prisma__csgi_teacher_vClient<csgi_teacher_v>, Prisma__csgi_teacher_vClient<csgi_teacher_vGetPayload<T>>>

    /**
     * Delete zero or more Csgi_teacher_vs.
     * @param {csgi_teacher_vDeleteManyArgs} args - Arguments to filter Csgi_teacher_vs to delete.
     * @example
     * // Delete a few Csgi_teacher_vs
     * const { count } = await prisma.csgi_teacher_v.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends csgi_teacher_vDeleteManyArgs>(
      args?: SelectSubset<T, csgi_teacher_vDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Csgi_teacher_vs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_teacher_vUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Csgi_teacher_vs
     * const csgi_teacher_v = await prisma.csgi_teacher_v.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends csgi_teacher_vUpdateManyArgs>(
      args: SelectSubset<T, csgi_teacher_vUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Csgi_teacher_v.
     * @param {csgi_teacher_vUpsertArgs} args - Arguments to update or create a Csgi_teacher_v.
     * @example
     * // Update or create a Csgi_teacher_v
     * const csgi_teacher_v = await prisma.csgi_teacher_v.upsert({
     *   create: {
     *     // ... data to create a Csgi_teacher_v
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Csgi_teacher_v we want to update
     *   }
     * })
    **/
    upsert<T extends csgi_teacher_vUpsertArgs>(
      args: SelectSubset<T, csgi_teacher_vUpsertArgs>
    ): CheckSelect<T, Prisma__csgi_teacher_vClient<csgi_teacher_v>, Prisma__csgi_teacher_vClient<csgi_teacher_vGetPayload<T>>>

    /**
     * Count the number of Csgi_teacher_vs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {csgi_teacher_vCountArgs} args - Arguments to filter Csgi_teacher_vs to count.
     * @example
     * // Count the number of Csgi_teacher_vs
     * const count = await prisma.csgi_teacher_v.count({
     *   where: {
     *     // ... the filter for the Csgi_teacher_vs we want to count
     *   }
     * })
    **/
    count<T extends csgi_teacher_vCountArgs>(
      args?: Subset<T, csgi_teacher_vCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Csgi_teacher_vCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Csgi_teacher_v.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Csgi_teacher_vAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Csgi_teacher_vAggregateArgs>(args: Subset<T, Csgi_teacher_vAggregateArgs>): PrismaPromise<GetCsgi_teacher_vAggregateType<T>>

    /**
     * Group by Csgi_teacher_v.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Csgi_teacher_vGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Csgi_teacher_vGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Csgi_teacher_vGroupByArgs['orderBy'] }
        : { orderBy?: Csgi_teacher_vGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Csgi_teacher_vGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCsgi_teacher_vGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for csgi_teacher_v.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__csgi_teacher_vClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * csgi_teacher_v findUnique
   */
  export type csgi_teacher_vFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the csgi_teacher_v
    **/
    select?: csgi_teacher_vSelect | null
    /**
     * Throw an Error if a csgi_teacher_v can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which csgi_teacher_v to fetch.
    **/
    where: csgi_teacher_vWhereUniqueInput
  }


  /**
   * csgi_teacher_v findFirst
   */
  export type csgi_teacher_vFindFirstArgs = {
    /**
     * Select specific fields to fetch from the csgi_teacher_v
    **/
    select?: csgi_teacher_vSelect | null
    /**
     * Throw an Error if a csgi_teacher_v can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which csgi_teacher_v to fetch.
    **/
    where?: csgi_teacher_vWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_teacher_vs to fetch.
    **/
    orderBy?: Enumerable<csgi_teacher_vOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for csgi_teacher_vs.
    **/
    cursor?: csgi_teacher_vWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_teacher_vs from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_teacher_vs.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of csgi_teacher_vs.
    **/
    distinct?: Enumerable<Csgi_teacher_vScalarFieldEnum>
  }


  /**
   * csgi_teacher_v findMany
   */
  export type csgi_teacher_vFindManyArgs = {
    /**
     * Select specific fields to fetch from the csgi_teacher_v
    **/
    select?: csgi_teacher_vSelect | null
    /**
     * Filter, which csgi_teacher_vs to fetch.
    **/
    where?: csgi_teacher_vWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of csgi_teacher_vs to fetch.
    **/
    orderBy?: Enumerable<csgi_teacher_vOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing csgi_teacher_vs.
    **/
    cursor?: csgi_teacher_vWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` csgi_teacher_vs from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` csgi_teacher_vs.
    **/
    skip?: number
    distinct?: Enumerable<Csgi_teacher_vScalarFieldEnum>
  }


  /**
   * csgi_teacher_v create
   */
  export type csgi_teacher_vCreateArgs = {
    /**
     * Select specific fields to fetch from the csgi_teacher_v
    **/
    select?: csgi_teacher_vSelect | null
    /**
     * The data needed to create a csgi_teacher_v.
    **/
    data: XOR<csgi_teacher_vCreateInput, csgi_teacher_vUncheckedCreateInput>
  }


  /**
   * csgi_teacher_v createMany
   */
  export type csgi_teacher_vCreateManyArgs = {
    data: Enumerable<csgi_teacher_vCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * csgi_teacher_v update
   */
  export type csgi_teacher_vUpdateArgs = {
    /**
     * Select specific fields to fetch from the csgi_teacher_v
    **/
    select?: csgi_teacher_vSelect | null
    /**
     * The data needed to update a csgi_teacher_v.
    **/
    data: XOR<csgi_teacher_vUpdateInput, csgi_teacher_vUncheckedUpdateInput>
    /**
     * Choose, which csgi_teacher_v to update.
    **/
    where: csgi_teacher_vWhereUniqueInput
  }


  /**
   * csgi_teacher_v updateMany
   */
  export type csgi_teacher_vUpdateManyArgs = {
    data: XOR<csgi_teacher_vUpdateManyMutationInput, csgi_teacher_vUncheckedUpdateManyInput>
    where?: csgi_teacher_vWhereInput
  }


  /**
   * csgi_teacher_v upsert
   */
  export type csgi_teacher_vUpsertArgs = {
    /**
     * Select specific fields to fetch from the csgi_teacher_v
    **/
    select?: csgi_teacher_vSelect | null
    /**
     * The filter to search for the csgi_teacher_v to update in case it exists.
    **/
    where: csgi_teacher_vWhereUniqueInput
    /**
     * In case the csgi_teacher_v found by the `where` argument doesn't exist, create a new csgi_teacher_v with this data.
    **/
    create: XOR<csgi_teacher_vCreateInput, csgi_teacher_vUncheckedCreateInput>
    /**
     * In case the csgi_teacher_v was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<csgi_teacher_vUpdateInput, csgi_teacher_vUncheckedUpdateInput>
  }


  /**
   * csgi_teacher_v delete
   */
  export type csgi_teacher_vDeleteArgs = {
    /**
     * Select specific fields to fetch from the csgi_teacher_v
    **/
    select?: csgi_teacher_vSelect | null
    /**
     * Filter which csgi_teacher_v to delete.
    **/
    where: csgi_teacher_vWhereUniqueInput
  }


  /**
   * csgi_teacher_v deleteMany
   */
  export type csgi_teacher_vDeleteManyArgs = {
    where?: csgi_teacher_vWhereInput
  }


  /**
   * csgi_teacher_v without action
   */
  export type csgi_teacher_vArgs = {
    /**
     * Select specific fields to fetch from the csgi_teacher_v
    **/
    select?: csgi_teacher_vSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const Csgi_classScalarFieldEnum: {
    classid: 'classid',
    classname: 'classname',
    class_desc: 'class_desc',
    userid: 'userid',
    gradeid: 'gradeid',
    roomid: 'roomid',
    created_date: 'created_date',
    created_by: 'created_by',
    updated_date: 'updated_date',
    updated_by: 'updated_by'
  };

  export type Csgi_classScalarFieldEnum = (typeof Csgi_classScalarFieldEnum)[keyof typeof Csgi_classScalarFieldEnum]


  export const Csgi_gradeScalarFieldEnum: {
    gradeid: 'gradeid',
    gradecode: 'gradecode',
    grade: 'grade',
    created_date: 'created_date',
    created_by: 'created_by',
    updated_date: 'updated_date',
    updated_by: 'updated_by'
  };

  export type Csgi_gradeScalarFieldEnum = (typeof Csgi_gradeScalarFieldEnum)[keyof typeof Csgi_gradeScalarFieldEnum]


  export const Csgi_menuScalarFieldEnum: {
    menuid: 'menuid',
    menuname: 'menuname',
    created_date: 'created_date',
    created_by: 'created_by',
    updated_date: 'updated_date',
    updated_by: 'updated_by'
  };

  export type Csgi_menuScalarFieldEnum = (typeof Csgi_menuScalarFieldEnum)[keyof typeof Csgi_menuScalarFieldEnum]


  export const Csgi_menu_itemScalarFieldEnum: {
    itemid: 'itemid',
    itemname: 'itemname',
    menuid: 'menuid',
    created_date: 'created_date',
    created_by: 'created_by',
    updated_date: 'updated_date',
    updated_by: 'updated_by'
  };

  export type Csgi_menu_itemScalarFieldEnum = (typeof Csgi_menu_itemScalarFieldEnum)[keyof typeof Csgi_menu_itemScalarFieldEnum]


  export const Csgi_menu_roleScalarFieldEnum: {
    menu_roleid: 'menu_roleid',
    roleid: 'roleid',
    itemid: 'itemid',
    created_date: 'created_date',
    created_by: 'created_by',
    updated_date: 'updated_date',
    updated_by: 'updated_by'
  };

  export type Csgi_menu_roleScalarFieldEnum = (typeof Csgi_menu_roleScalarFieldEnum)[keyof typeof Csgi_menu_roleScalarFieldEnum]


  export const Csgi_periodScalarFieldEnum: {
    periodid: 'periodid',
    periodname: 'periodname',
    period_desc: 'period_desc',
    period_start: 'period_start',
    period_end: 'period_end',
    created_date: 'created_date',
    created_by: 'created_by',
    updated_date: 'updated_date',
    updated_by: 'updated_by',
    period_date: 'period_date'
  };

  export type Csgi_periodScalarFieldEnum = (typeof Csgi_periodScalarFieldEnum)[keyof typeof Csgi_periodScalarFieldEnum]


  export const Csgi_roleScalarFieldEnum: {
    roleid: 'roleid',
    role: 'role',
    created_date: 'created_date',
    created_by: 'created_by',
    updated_date: 'updated_date',
    updated_by: 'updated_by'
  };

  export type Csgi_roleScalarFieldEnum = (typeof Csgi_roleScalarFieldEnum)[keyof typeof Csgi_roleScalarFieldEnum]


  export const Csgi_roomScalarFieldEnum: {
    roomid: 'roomid',
    roomcode: 'roomcode',
    room_desc: 'room_desc',
    location: 'location',
    created_date: 'created_date',
    created_by: 'created_by',
    updated_date: 'updated_date',
    updated_by: 'updated_by'
  };

  export type Csgi_roomScalarFieldEnum = (typeof Csgi_roomScalarFieldEnum)[keyof typeof Csgi_roomScalarFieldEnum]


  export const Csgi_rosterScalarFieldEnum: {
    rosterid: 'rosterid',
    classid: 'classid',
    periodid: 'periodid',
    studentid: 'studentid',
    attended_yn: 'attended_yn',
    created_date: 'created_date',
    created_by: 'created_by',
    updated_date: 'updated_date',
    updated_by: 'updated_by'
  };

  export type Csgi_rosterScalarFieldEnum = (typeof Csgi_rosterScalarFieldEnum)[keyof typeof Csgi_rosterScalarFieldEnum]


  export const Csgi_studentScalarFieldEnum: {
    studentid: 'studentid',
    student_name: 'student_name',
    last_name: 'last_name',
    date_of_birth: 'date_of_birth',
    gender: 'gender',
    created_date: 'created_date',
    created_by: 'created_by',
    updated_date: 'updated_date',
    updated_by: 'updated_by'
  };

  export type Csgi_studentScalarFieldEnum = (typeof Csgi_studentScalarFieldEnum)[keyof typeof Csgi_studentScalarFieldEnum]


  export const Csgi_userScalarFieldEnum: {
    userid: 'userid',
    username: 'username',
    email: 'email',
    first_name: 'first_name',
    last_name: 'last_name',
    password: 'password',
    created_date: 'created_date',
    created_by: 'created_by',
    updated_date: 'updated_date',
    updated_by: 'updated_by'
  };

  export type Csgi_userScalarFieldEnum = (typeof Csgi_userScalarFieldEnum)[keyof typeof Csgi_userScalarFieldEnum]


  export const Csgi_user_roleScalarFieldEnum: {
    user_roleid: 'user_roleid',
    userid: 'userid',
    roleid: 'roleid',
    created_date: 'created_date',
    created_by: 'created_by',
    updated_date: 'updated_date',
    updated_by: 'updated_by'
  };

  export type Csgi_user_roleScalarFieldEnum = (typeof Csgi_user_roleScalarFieldEnum)[keyof typeof Csgi_user_roleScalarFieldEnum]


  export const Csgi_alluser_vScalarFieldEnum: {
    userid: 'userid',
    email: 'email',
    role: 'role'
  };

  export type Csgi_alluser_vScalarFieldEnum = (typeof Csgi_alluser_vScalarFieldEnum)[keyof typeof Csgi_alluser_vScalarFieldEnum]


  export const Csgi_detailreport_vScalarFieldEnum: {
    classid: 'classid',
    classname: 'classname',
    gradeid: 'gradeid',
    gradecode: 'gradecode',
    teacherid: 'teacherid',
    teachername: 'teachername',
    teacheremail: 'teacheremail',
    periodid: 'periodid',
    periodname: 'periodname',
    period_date: 'period_date',
    quarter: 'quarter',
    studentid: 'studentid',
    student_name: 'student_name',
    attended: 'attended',
    notattended: 'notattended'
  };

  export type Csgi_detailreport_vScalarFieldEnum = (typeof Csgi_detailreport_vScalarFieldEnum)[keyof typeof Csgi_detailreport_vScalarFieldEnum]


  export const Csgi_summaryreport_vScalarFieldEnum: {
    classname: 'classname',
    gradeid: 'gradeid',
    gradecode: 'gradecode',
    teacherid: 'teacherid',
    teacheremail: 'teacheremail',
    teachername: 'teachername',
    student_name: 'student_name',
    quarter: 'quarter',
    no_attended: 'no_attended',
    no_missed: 'no_missed'
  };

  export type Csgi_summaryreport_vScalarFieldEnum = (typeof Csgi_summaryreport_vScalarFieldEnum)[keyof typeof Csgi_summaryreport_vScalarFieldEnum]


  export const Csgi_teacher_vScalarFieldEnum: {
    teacherid: 'teacherid',
    teacher: 'teacher',
    teacheremail: 'teacheremail',
    teachername: 'teachername',
    rolename: 'rolename'
  };

  export type Csgi_teacher_vScalarFieldEnum = (typeof Csgi_teacher_vScalarFieldEnum)[keyof typeof Csgi_teacher_vScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type csgi_classWhereInput = {
    AND?: Enumerable<csgi_classWhereInput>
    OR?: Enumerable<csgi_classWhereInput>
    NOT?: Enumerable<csgi_classWhereInput>
    classid?: IntFilter | number
    classname?: StringFilter | string
    class_desc?: StringFilter | string
    userid?: IntNullableFilter | number | null
    gradeid?: IntNullableFilter | number | null
    roomid?: IntNullableFilter | number | null
    created_date?: DateTimeFilter | Date | string
    created_by?: StringNullableFilter | string | null
    updated_date?: DateTimeNullableFilter | Date | string | null
    updated_by?: StringNullableFilter | string | null
    csgi_grade?: XOR<Csgi_gradeRelationFilter, csgi_gradeWhereInput> | null
    csgi_room?: XOR<Csgi_roomRelationFilter, csgi_roomWhereInput> | null
    csgi_user?: XOR<Csgi_userRelationFilter, csgi_userWhereInput> | null
    csgi_roster?: Csgi_rosterListRelationFilter
  }

  export type csgi_classOrderByInput = {
    classid?: SortOrder
    classname?: SortOrder
    class_desc?: SortOrder
    userid?: SortOrder
    gradeid?: SortOrder
    roomid?: SortOrder
    created_date?: SortOrder
    created_by?: SortOrder
    updated_date?: SortOrder
    updated_by?: SortOrder
  }

  export type csgi_classWhereUniqueInput = {
    classid?: number
  }

  export type csgi_classScalarWhereWithAggregatesInput = {
    AND?: Enumerable<csgi_classScalarWhereWithAggregatesInput>
    OR?: Enumerable<csgi_classScalarWhereWithAggregatesInput>
    NOT?: Enumerable<csgi_classScalarWhereWithAggregatesInput>
    classid?: IntWithAggregatesFilter | number
    classname?: StringWithAggregatesFilter | string
    class_desc?: StringWithAggregatesFilter | string
    userid?: IntNullableWithAggregatesFilter | number | null
    gradeid?: IntNullableWithAggregatesFilter | number | null
    roomid?: IntNullableWithAggregatesFilter | number | null
    created_date?: DateTimeWithAggregatesFilter | Date | string
    created_by?: StringNullableWithAggregatesFilter | string | null
    updated_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updated_by?: StringNullableWithAggregatesFilter | string | null
  }

  export type csgi_gradeWhereInput = {
    AND?: Enumerable<csgi_gradeWhereInput>
    OR?: Enumerable<csgi_gradeWhereInput>
    NOT?: Enumerable<csgi_gradeWhereInput>
    gradeid?: IntFilter | number
    gradecode?: StringFilter | string
    grade?: StringFilter | string
    created_date?: DateTimeFilter | Date | string
    created_by?: StringFilter | string
    updated_date?: DateTimeNullableFilter | Date | string | null
    updated_by?: StringNullableFilter | string | null
    csgi_class?: Csgi_classListRelationFilter
  }

  export type csgi_gradeOrderByInput = {
    gradeid?: SortOrder
    gradecode?: SortOrder
    grade?: SortOrder
    created_date?: SortOrder
    created_by?: SortOrder
    updated_date?: SortOrder
    updated_by?: SortOrder
  }

  export type csgi_gradeWhereUniqueInput = {
    gradeid?: number
  }

  export type csgi_gradeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<csgi_gradeScalarWhereWithAggregatesInput>
    OR?: Enumerable<csgi_gradeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<csgi_gradeScalarWhereWithAggregatesInput>
    gradeid?: IntWithAggregatesFilter | number
    gradecode?: StringWithAggregatesFilter | string
    grade?: StringWithAggregatesFilter | string
    created_date?: DateTimeWithAggregatesFilter | Date | string
    created_by?: StringWithAggregatesFilter | string
    updated_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updated_by?: StringNullableWithAggregatesFilter | string | null
  }

  export type csgi_menuWhereInput = {
    AND?: Enumerable<csgi_menuWhereInput>
    OR?: Enumerable<csgi_menuWhereInput>
    NOT?: Enumerable<csgi_menuWhereInput>
    menuid?: IntFilter | number
    menuname?: StringFilter | string
    created_date?: DateTimeFilter | Date | string
    created_by?: StringFilter | string
    updated_date?: DateTimeNullableFilter | Date | string | null
    updated_by?: StringNullableFilter | string | null
    csgi_menu_item?: Csgi_menu_itemListRelationFilter
  }

  export type csgi_menuOrderByInput = {
    menuid?: SortOrder
    menuname?: SortOrder
    created_date?: SortOrder
    created_by?: SortOrder
    updated_date?: SortOrder
    updated_by?: SortOrder
  }

  export type csgi_menuWhereUniqueInput = {
    menuid?: number
  }

  export type csgi_menuScalarWhereWithAggregatesInput = {
    AND?: Enumerable<csgi_menuScalarWhereWithAggregatesInput>
    OR?: Enumerable<csgi_menuScalarWhereWithAggregatesInput>
    NOT?: Enumerable<csgi_menuScalarWhereWithAggregatesInput>
    menuid?: IntWithAggregatesFilter | number
    menuname?: StringWithAggregatesFilter | string
    created_date?: DateTimeWithAggregatesFilter | Date | string
    created_by?: StringWithAggregatesFilter | string
    updated_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updated_by?: StringNullableWithAggregatesFilter | string | null
  }

  export type csgi_menu_itemWhereInput = {
    AND?: Enumerable<csgi_menu_itemWhereInput>
    OR?: Enumerable<csgi_menu_itemWhereInput>
    NOT?: Enumerable<csgi_menu_itemWhereInput>
    itemid?: IntFilter | number
    itemname?: StringFilter | string
    menuid?: IntNullableFilter | number | null
    created_date?: DateTimeFilter | Date | string
    created_by?: StringFilter | string
    updated_date?: DateTimeNullableFilter | Date | string | null
    updated_by?: StringNullableFilter | string | null
    csgi_menu?: XOR<Csgi_menuRelationFilter, csgi_menuWhereInput> | null
    csgi_menu_role?: Csgi_menu_roleListRelationFilter
  }

  export type csgi_menu_itemOrderByInput = {
    itemid?: SortOrder
    itemname?: SortOrder
    menuid?: SortOrder
    created_date?: SortOrder
    created_by?: SortOrder
    updated_date?: SortOrder
    updated_by?: SortOrder
  }

  export type csgi_menu_itemWhereUniqueInput = {
    itemid?: number
  }

  export type csgi_menu_itemScalarWhereWithAggregatesInput = {
    AND?: Enumerable<csgi_menu_itemScalarWhereWithAggregatesInput>
    OR?: Enumerable<csgi_menu_itemScalarWhereWithAggregatesInput>
    NOT?: Enumerable<csgi_menu_itemScalarWhereWithAggregatesInput>
    itemid?: IntWithAggregatesFilter | number
    itemname?: StringWithAggregatesFilter | string
    menuid?: IntNullableWithAggregatesFilter | number | null
    created_date?: DateTimeWithAggregatesFilter | Date | string
    created_by?: StringWithAggregatesFilter | string
    updated_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updated_by?: StringNullableWithAggregatesFilter | string | null
  }

  export type csgi_menu_roleWhereInput = {
    AND?: Enumerable<csgi_menu_roleWhereInput>
    OR?: Enumerable<csgi_menu_roleWhereInput>
    NOT?: Enumerable<csgi_menu_roleWhereInput>
    menu_roleid?: IntFilter | number
    roleid?: IntFilter | number
    itemid?: IntFilter | number
    created_date?: DateTimeFilter | Date | string
    created_by?: StringFilter | string
    updated_date?: DateTimeNullableFilter | Date | string | null
    updated_by?: StringNullableFilter | string | null
    csgi_menu_item?: XOR<Csgi_menu_itemRelationFilter, csgi_menu_itemWhereInput>
    csgi_role?: XOR<Csgi_roleRelationFilter, csgi_roleWhereInput>
  }

  export type csgi_menu_roleOrderByInput = {
    menu_roleid?: SortOrder
    roleid?: SortOrder
    itemid?: SortOrder
    created_date?: SortOrder
    created_by?: SortOrder
    updated_date?: SortOrder
    updated_by?: SortOrder
  }

  export type csgi_menu_roleWhereUniqueInput = {
    menu_roleid?: number
  }

  export type csgi_menu_roleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<csgi_menu_roleScalarWhereWithAggregatesInput>
    OR?: Enumerable<csgi_menu_roleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<csgi_menu_roleScalarWhereWithAggregatesInput>
    menu_roleid?: IntWithAggregatesFilter | number
    roleid?: IntWithAggregatesFilter | number
    itemid?: IntWithAggregatesFilter | number
    created_date?: DateTimeWithAggregatesFilter | Date | string
    created_by?: StringWithAggregatesFilter | string
    updated_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updated_by?: StringNullableWithAggregatesFilter | string | null
  }

  export type csgi_periodWhereInput = {
    AND?: Enumerable<csgi_periodWhereInput>
    OR?: Enumerable<csgi_periodWhereInput>
    NOT?: Enumerable<csgi_periodWhereInput>
    periodid?: IntFilter | number
    periodname?: StringFilter | string
    period_desc?: StringNullableFilter | string | null
    period_start?: DateTimeFilter | Date | string
    period_end?: DateTimeFilter | Date | string
    created_date?: DateTimeFilter | Date | string
    created_by?: StringFilter | string
    updated_date?: DateTimeNullableFilter | Date | string | null
    updated_by?: StringNullableFilter | string | null
    period_date?: DateTimeNullableFilter | Date | string | null
    csgi_roster?: Csgi_rosterListRelationFilter
  }

  export type csgi_periodOrderByInput = {
    periodid?: SortOrder
    periodname?: SortOrder
    period_desc?: SortOrder
    period_start?: SortOrder
    period_end?: SortOrder
    created_date?: SortOrder
    created_by?: SortOrder
    updated_date?: SortOrder
    updated_by?: SortOrder
    period_date?: SortOrder
  }

  export type csgi_periodWhereUniqueInput = {
    periodid?: number
  }

  export type csgi_periodScalarWhereWithAggregatesInput = {
    AND?: Enumerable<csgi_periodScalarWhereWithAggregatesInput>
    OR?: Enumerable<csgi_periodScalarWhereWithAggregatesInput>
    NOT?: Enumerable<csgi_periodScalarWhereWithAggregatesInput>
    periodid?: IntWithAggregatesFilter | number
    periodname?: StringWithAggregatesFilter | string
    period_desc?: StringNullableWithAggregatesFilter | string | null
    period_start?: DateTimeWithAggregatesFilter | Date | string
    period_end?: DateTimeWithAggregatesFilter | Date | string
    created_date?: DateTimeWithAggregatesFilter | Date | string
    created_by?: StringWithAggregatesFilter | string
    updated_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updated_by?: StringNullableWithAggregatesFilter | string | null
    period_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type csgi_roleWhereInput = {
    AND?: Enumerable<csgi_roleWhereInput>
    OR?: Enumerable<csgi_roleWhereInput>
    NOT?: Enumerable<csgi_roleWhereInput>
    roleid?: IntFilter | number
    role?: StringFilter | string
    created_date?: DateTimeFilter | Date | string
    created_by?: StringFilter | string
    updated_date?: DateTimeNullableFilter | Date | string | null
    updated_by?: StringNullableFilter | string | null
    csgi_menu_role?: Csgi_menu_roleListRelationFilter
    csgi_user_role?: Csgi_user_roleListRelationFilter
  }

  export type csgi_roleOrderByInput = {
    roleid?: SortOrder
    role?: SortOrder
    created_date?: SortOrder
    created_by?: SortOrder
    updated_date?: SortOrder
    updated_by?: SortOrder
  }

  export type csgi_roleWhereUniqueInput = {
    roleid?: number
    role?: string
  }

  export type csgi_roleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<csgi_roleScalarWhereWithAggregatesInput>
    OR?: Enumerable<csgi_roleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<csgi_roleScalarWhereWithAggregatesInput>
    roleid?: IntWithAggregatesFilter | number
    role?: StringWithAggregatesFilter | string
    created_date?: DateTimeWithAggregatesFilter | Date | string
    created_by?: StringWithAggregatesFilter | string
    updated_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updated_by?: StringNullableWithAggregatesFilter | string | null
  }

  export type csgi_roomWhereInput = {
    AND?: Enumerable<csgi_roomWhereInput>
    OR?: Enumerable<csgi_roomWhereInput>
    NOT?: Enumerable<csgi_roomWhereInput>
    roomid?: IntFilter | number
    roomcode?: StringFilter | string
    room_desc?: StringNullableFilter | string | null
    location?: StringNullableFilter | string | null
    created_date?: DateTimeFilter | Date | string
    created_by?: StringFilter | string
    updated_date?: DateTimeNullableFilter | Date | string | null
    updated_by?: StringNullableFilter | string | null
    csgi_class?: Csgi_classListRelationFilter
  }

  export type csgi_roomOrderByInput = {
    roomid?: SortOrder
    roomcode?: SortOrder
    room_desc?: SortOrder
    location?: SortOrder
    created_date?: SortOrder
    created_by?: SortOrder
    updated_date?: SortOrder
    updated_by?: SortOrder
  }

  export type csgi_roomWhereUniqueInput = {
    roomid?: number
  }

  export type csgi_roomScalarWhereWithAggregatesInput = {
    AND?: Enumerable<csgi_roomScalarWhereWithAggregatesInput>
    OR?: Enumerable<csgi_roomScalarWhereWithAggregatesInput>
    NOT?: Enumerable<csgi_roomScalarWhereWithAggregatesInput>
    roomid?: IntWithAggregatesFilter | number
    roomcode?: StringWithAggregatesFilter | string
    room_desc?: StringNullableWithAggregatesFilter | string | null
    location?: StringNullableWithAggregatesFilter | string | null
    created_date?: DateTimeWithAggregatesFilter | Date | string
    created_by?: StringWithAggregatesFilter | string
    updated_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updated_by?: StringNullableWithAggregatesFilter | string | null
  }

  export type csgi_rosterWhereInput = {
    AND?: Enumerable<csgi_rosterWhereInput>
    OR?: Enumerable<csgi_rosterWhereInput>
    NOT?: Enumerable<csgi_rosterWhereInput>
    rosterid?: IntFilter | number
    classid?: IntFilter | number
    periodid?: IntFilter | number
    studentid?: IntFilter | number
    attended_yn?: StringFilter | string
    created_date?: DateTimeFilter | Date | string
    created_by?: StringFilter | string
    updated_date?: DateTimeNullableFilter | Date | string | null
    updated_by?: StringNullableFilter | string | null
    csgi_class?: XOR<Csgi_classRelationFilter, csgi_classWhereInput>
    csgi_period?: XOR<Csgi_periodRelationFilter, csgi_periodWhereInput>
    csgi_student?: XOR<Csgi_studentRelationFilter, csgi_studentWhereInput>
  }

  export type csgi_rosterOrderByInput = {
    rosterid?: SortOrder
    classid?: SortOrder
    periodid?: SortOrder
    studentid?: SortOrder
    attended_yn?: SortOrder
    created_date?: SortOrder
    created_by?: SortOrder
    updated_date?: SortOrder
    updated_by?: SortOrder
  }

  export type csgi_rosterWhereUniqueInput = {
    rosterid?: number
  }

  export type csgi_rosterScalarWhereWithAggregatesInput = {
    AND?: Enumerable<csgi_rosterScalarWhereWithAggregatesInput>
    OR?: Enumerable<csgi_rosterScalarWhereWithAggregatesInput>
    NOT?: Enumerable<csgi_rosterScalarWhereWithAggregatesInput>
    rosterid?: IntWithAggregatesFilter | number
    classid?: IntWithAggregatesFilter | number
    periodid?: IntWithAggregatesFilter | number
    studentid?: IntWithAggregatesFilter | number
    attended_yn?: StringWithAggregatesFilter | string
    created_date?: DateTimeWithAggregatesFilter | Date | string
    created_by?: StringWithAggregatesFilter | string
    updated_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updated_by?: StringNullableWithAggregatesFilter | string | null
  }

  export type csgi_studentWhereInput = {
    AND?: Enumerable<csgi_studentWhereInput>
    OR?: Enumerable<csgi_studentWhereInput>
    NOT?: Enumerable<csgi_studentWhereInput>
    studentid?: IntFilter | number
    student_name?: StringNullableFilter | string | null
    last_name?: StringFilter | string
    date_of_birth?: DateTimeNullableFilter | Date | string | null
    gender?: StringNullableFilter | string | null
    created_date?: DateTimeFilter | Date | string
    created_by?: StringFilter | string
    updated_date?: DateTimeNullableFilter | Date | string | null
    updated_by?: StringNullableFilter | string | null
    csgi_roster?: Csgi_rosterListRelationFilter
  }

  export type csgi_studentOrderByInput = {
    studentid?: SortOrder
    student_name?: SortOrder
    last_name?: SortOrder
    date_of_birth?: SortOrder
    gender?: SortOrder
    created_date?: SortOrder
    created_by?: SortOrder
    updated_date?: SortOrder
    updated_by?: SortOrder
  }

  export type csgi_studentWhereUniqueInput = {
    studentid?: number
  }

  export type csgi_studentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<csgi_studentScalarWhereWithAggregatesInput>
    OR?: Enumerable<csgi_studentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<csgi_studentScalarWhereWithAggregatesInput>
    studentid?: IntWithAggregatesFilter | number
    student_name?: StringNullableWithAggregatesFilter | string | null
    last_name?: StringWithAggregatesFilter | string
    date_of_birth?: DateTimeNullableWithAggregatesFilter | Date | string | null
    gender?: StringNullableWithAggregatesFilter | string | null
    created_date?: DateTimeWithAggregatesFilter | Date | string
    created_by?: StringWithAggregatesFilter | string
    updated_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updated_by?: StringNullableWithAggregatesFilter | string | null
  }

  export type csgi_userWhereInput = {
    AND?: Enumerable<csgi_userWhereInput>
    OR?: Enumerable<csgi_userWhereInput>
    NOT?: Enumerable<csgi_userWhereInput>
    userid?: IntFilter | number
    username?: StringFilter | string
    email?: StringFilter | string
    first_name?: StringNullableFilter | string | null
    last_name?: StringFilter | string
    password?: StringFilter | string
    created_date?: DateTimeFilter | Date | string
    created_by?: StringNullableFilter | string | null
    updated_date?: DateTimeNullableFilter | Date | string | null
    updated_by?: StringNullableFilter | string | null
    csgi_class?: Csgi_classListRelationFilter
    csgi_user_role?: Csgi_user_roleListRelationFilter
  }

  export type csgi_userOrderByInput = {
    userid?: SortOrder
    username?: SortOrder
    email?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    password?: SortOrder
    created_date?: SortOrder
    created_by?: SortOrder
    updated_date?: SortOrder
    updated_by?: SortOrder
  }

  export type csgi_userWhereUniqueInput = {
    userid?: number
    email?: string
  }

  export type csgi_userScalarWhereWithAggregatesInput = {
    AND?: Enumerable<csgi_userScalarWhereWithAggregatesInput>
    OR?: Enumerable<csgi_userScalarWhereWithAggregatesInput>
    NOT?: Enumerable<csgi_userScalarWhereWithAggregatesInput>
    userid?: IntWithAggregatesFilter | number
    username?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    first_name?: StringNullableWithAggregatesFilter | string | null
    last_name?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    created_date?: DateTimeWithAggregatesFilter | Date | string
    created_by?: StringNullableWithAggregatesFilter | string | null
    updated_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updated_by?: StringNullableWithAggregatesFilter | string | null
  }

  export type csgi_user_roleWhereInput = {
    AND?: Enumerable<csgi_user_roleWhereInput>
    OR?: Enumerable<csgi_user_roleWhereInput>
    NOT?: Enumerable<csgi_user_roleWhereInput>
    user_roleid?: IntFilter | number
    userid?: IntFilter | number
    roleid?: IntFilter | number
    created_date?: DateTimeFilter | Date | string
    created_by?: StringFilter | string
    updated_date?: DateTimeNullableFilter | Date | string | null
    updated_by?: StringNullableFilter | string | null
    csgi_role?: XOR<Csgi_roleRelationFilter, csgi_roleWhereInput>
    csgi_user?: XOR<Csgi_userRelationFilter, csgi_userWhereInput>
  }

  export type csgi_user_roleOrderByInput = {
    user_roleid?: SortOrder
    userid?: SortOrder
    roleid?: SortOrder
    created_date?: SortOrder
    created_by?: SortOrder
    updated_date?: SortOrder
    updated_by?: SortOrder
  }

  export type csgi_user_roleWhereUniqueInput = {
    user_roleid?: number
  }

  export type csgi_user_roleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<csgi_user_roleScalarWhereWithAggregatesInput>
    OR?: Enumerable<csgi_user_roleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<csgi_user_roleScalarWhereWithAggregatesInput>
    user_roleid?: IntWithAggregatesFilter | number
    userid?: IntWithAggregatesFilter | number
    roleid?: IntWithAggregatesFilter | number
    created_date?: DateTimeWithAggregatesFilter | Date | string
    created_by?: StringWithAggregatesFilter | string
    updated_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updated_by?: StringNullableWithAggregatesFilter | string | null
  }

  export type csgi_alluser_vWhereInput = {
    AND?: Enumerable<csgi_alluser_vWhereInput>
    OR?: Enumerable<csgi_alluser_vWhereInput>
    NOT?: Enumerable<csgi_alluser_vWhereInput>
    userid?: IntFilter | number
    email?: StringFilter | string
    role?: StringFilter | string
  }

  export type csgi_alluser_vOrderByInput = {
    userid?: SortOrder
    email?: SortOrder
    role?: SortOrder
  }

  export type csgi_alluser_vWhereUniqueInput = {
    email?: string
  }

  export type csgi_alluser_vScalarWhereWithAggregatesInput = {
    AND?: Enumerable<csgi_alluser_vScalarWhereWithAggregatesInput>
    OR?: Enumerable<csgi_alluser_vScalarWhereWithAggregatesInput>
    NOT?: Enumerable<csgi_alluser_vScalarWhereWithAggregatesInput>
    userid?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    role?: StringWithAggregatesFilter | string
  }

  export type csgi_detailreport_vWhereInput = {
    AND?: Enumerable<csgi_detailreport_vWhereInput>
    OR?: Enumerable<csgi_detailreport_vWhereInput>
    NOT?: Enumerable<csgi_detailreport_vWhereInput>
    classid?: IntFilter | number
    classname?: StringFilter | string
    gradeid?: IntFilter | number
    gradecode?: StringFilter | string
    teacherid?: IntFilter | number
    teachername?: StringFilter | string
    teacheremail?: StringFilter | string
    periodid?: IntFilter | number
    periodname?: StringFilter | string
    period_date?: DateTimeFilter | Date | string
    quarter?: StringFilter | string
    studentid?: IntFilter | number
    student_name?: StringFilter | string
    attended?: IntFilter | number
    notattended?: IntFilter | number
  }

  export type csgi_detailreport_vOrderByInput = {
    classid?: SortOrder
    classname?: SortOrder
    gradeid?: SortOrder
    gradecode?: SortOrder
    teacherid?: SortOrder
    teachername?: SortOrder
    teacheremail?: SortOrder
    periodid?: SortOrder
    periodname?: SortOrder
    period_date?: SortOrder
    quarter?: SortOrder
    studentid?: SortOrder
    student_name?: SortOrder
    attended?: SortOrder
    notattended?: SortOrder
  }

  export type csgi_detailreport_vWhereUniqueInput = {
    teacherid?: number
  }

  export type csgi_detailreport_vScalarWhereWithAggregatesInput = {
    AND?: Enumerable<csgi_detailreport_vScalarWhereWithAggregatesInput>
    OR?: Enumerable<csgi_detailreport_vScalarWhereWithAggregatesInput>
    NOT?: Enumerable<csgi_detailreport_vScalarWhereWithAggregatesInput>
    classid?: IntWithAggregatesFilter | number
    classname?: StringWithAggregatesFilter | string
    gradeid?: IntWithAggregatesFilter | number
    gradecode?: StringWithAggregatesFilter | string
    teacherid?: IntWithAggregatesFilter | number
    teachername?: StringWithAggregatesFilter | string
    teacheremail?: StringWithAggregatesFilter | string
    periodid?: IntWithAggregatesFilter | number
    periodname?: StringWithAggregatesFilter | string
    period_date?: DateTimeWithAggregatesFilter | Date | string
    quarter?: StringWithAggregatesFilter | string
    studentid?: IntWithAggregatesFilter | number
    student_name?: StringWithAggregatesFilter | string
    attended?: IntWithAggregatesFilter | number
    notattended?: IntWithAggregatesFilter | number
  }

  export type csgi_summaryreport_vWhereInput = {
    AND?: Enumerable<csgi_summaryreport_vWhereInput>
    OR?: Enumerable<csgi_summaryreport_vWhereInput>
    NOT?: Enumerable<csgi_summaryreport_vWhereInput>
    classname?: StringFilter | string
    gradeid?: IntFilter | number
    gradecode?: StringFilter | string
    teacherid?: IntFilter | number
    teacheremail?: StringFilter | string
    teachername?: StringFilter | string
    student_name?: StringFilter | string
    quarter?: StringFilter | string
    no_attended?: IntFilter | number
    no_missed?: IntFilter | number
  }

  export type csgi_summaryreport_vOrderByInput = {
    classname?: SortOrder
    gradeid?: SortOrder
    gradecode?: SortOrder
    teacherid?: SortOrder
    teacheremail?: SortOrder
    teachername?: SortOrder
    student_name?: SortOrder
    quarter?: SortOrder
    no_attended?: SortOrder
    no_missed?: SortOrder
  }

  export type csgi_summaryreport_vWhereUniqueInput = {
    teacherid?: number
  }

  export type csgi_summaryreport_vScalarWhereWithAggregatesInput = {
    AND?: Enumerable<csgi_summaryreport_vScalarWhereWithAggregatesInput>
    OR?: Enumerable<csgi_summaryreport_vScalarWhereWithAggregatesInput>
    NOT?: Enumerable<csgi_summaryreport_vScalarWhereWithAggregatesInput>
    classname?: StringWithAggregatesFilter | string
    gradeid?: IntWithAggregatesFilter | number
    gradecode?: StringWithAggregatesFilter | string
    teacherid?: IntWithAggregatesFilter | number
    teacheremail?: StringWithAggregatesFilter | string
    teachername?: StringWithAggregatesFilter | string
    student_name?: StringWithAggregatesFilter | string
    quarter?: StringWithAggregatesFilter | string
    no_attended?: IntWithAggregatesFilter | number
    no_missed?: IntWithAggregatesFilter | number
  }

  export type csgi_teacher_vWhereInput = {
    AND?: Enumerable<csgi_teacher_vWhereInput>
    OR?: Enumerable<csgi_teacher_vWhereInput>
    NOT?: Enumerable<csgi_teacher_vWhereInput>
    teacherid?: IntFilter | number
    teacher?: StringFilter | string
    teacheremail?: StringFilter | string
    teachername?: StringFilter | string
    rolename?: StringFilter | string
  }

  export type csgi_teacher_vOrderByInput = {
    teacherid?: SortOrder
    teacher?: SortOrder
    teacheremail?: SortOrder
    teachername?: SortOrder
    rolename?: SortOrder
  }

  export type csgi_teacher_vWhereUniqueInput = {
    teacherid?: number
    teacheremail?: string
  }

  export type csgi_teacher_vScalarWhereWithAggregatesInput = {
    AND?: Enumerable<csgi_teacher_vScalarWhereWithAggregatesInput>
    OR?: Enumerable<csgi_teacher_vScalarWhereWithAggregatesInput>
    NOT?: Enumerable<csgi_teacher_vScalarWhereWithAggregatesInput>
    teacherid?: IntWithAggregatesFilter | number
    teacher?: StringWithAggregatesFilter | string
    teacheremail?: StringWithAggregatesFilter | string
    teachername?: StringWithAggregatesFilter | string
    rolename?: StringWithAggregatesFilter | string
  }

  export type csgi_classCreateInput = {
    classname: string
    class_desc: string
    created_date?: Date | string
    created_by?: string | null
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_grade?: csgi_gradeCreateNestedOneWithoutCsgi_classInput
    csgi_room?: csgi_roomCreateNestedOneWithoutCsgi_classInput
    csgi_user?: csgi_userCreateNestedOneWithoutCsgi_classInput
    csgi_roster?: csgi_rosterCreateNestedManyWithoutCsgi_classInput
  }

  export type csgi_classUncheckedCreateInput = {
    classid?: number
    classname: string
    class_desc: string
    userid?: number | null
    gradeid?: number | null
    roomid?: number | null
    created_date?: Date | string
    created_by?: string | null
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_roster?: csgi_rosterUncheckedCreateNestedManyWithoutCsgi_classInput
  }

  export type csgi_classUpdateInput = {
    classname?: StringFieldUpdateOperationsInput | string
    class_desc?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_grade?: csgi_gradeUpdateOneWithoutCsgi_classInput
    csgi_room?: csgi_roomUpdateOneWithoutCsgi_classInput
    csgi_user?: csgi_userUpdateOneWithoutCsgi_classInput
    csgi_roster?: csgi_rosterUpdateManyWithoutCsgi_classInput
  }

  export type csgi_classUncheckedUpdateInput = {
    classid?: IntFieldUpdateOperationsInput | number
    classname?: StringFieldUpdateOperationsInput | string
    class_desc?: StringFieldUpdateOperationsInput | string
    userid?: NullableIntFieldUpdateOperationsInput | number | null
    gradeid?: NullableIntFieldUpdateOperationsInput | number | null
    roomid?: NullableIntFieldUpdateOperationsInput | number | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_roster?: csgi_rosterUncheckedUpdateManyWithoutCsgi_classInput
  }

  export type csgi_classCreateManyInput = {
    classid?: number
    classname: string
    class_desc: string
    userid?: number | null
    gradeid?: number | null
    roomid?: number | null
    created_date?: Date | string
    created_by?: string | null
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_classUpdateManyMutationInput = {
    classname?: StringFieldUpdateOperationsInput | string
    class_desc?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_classUncheckedUpdateManyInput = {
    classid?: IntFieldUpdateOperationsInput | number
    classname?: StringFieldUpdateOperationsInput | string
    class_desc?: StringFieldUpdateOperationsInput | string
    userid?: NullableIntFieldUpdateOperationsInput | number | null
    gradeid?: NullableIntFieldUpdateOperationsInput | number | null
    roomid?: NullableIntFieldUpdateOperationsInput | number | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_gradeCreateInput = {
    gradecode: string
    grade: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_class?: csgi_classCreateNestedManyWithoutCsgi_gradeInput
  }

  export type csgi_gradeUncheckedCreateInput = {
    gradeid?: number
    gradecode: string
    grade: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_class?: csgi_classUncheckedCreateNestedManyWithoutCsgi_gradeInput
  }

  export type csgi_gradeUpdateInput = {
    gradecode?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_class?: csgi_classUpdateManyWithoutCsgi_gradeInput
  }

  export type csgi_gradeUncheckedUpdateInput = {
    gradeid?: IntFieldUpdateOperationsInput | number
    gradecode?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_class?: csgi_classUncheckedUpdateManyWithoutCsgi_gradeInput
  }

  export type csgi_gradeCreateManyInput = {
    gradeid?: number
    gradecode: string
    grade: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_gradeUpdateManyMutationInput = {
    gradecode?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_gradeUncheckedUpdateManyInput = {
    gradeid?: IntFieldUpdateOperationsInput | number
    gradecode?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_menuCreateInput = {
    menuname: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_menu_item?: csgi_menu_itemCreateNestedManyWithoutCsgi_menuInput
  }

  export type csgi_menuUncheckedCreateInput = {
    menuid?: number
    menuname: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_menu_item?: csgi_menu_itemUncheckedCreateNestedManyWithoutCsgi_menuInput
  }

  export type csgi_menuUpdateInput = {
    menuname?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_menu_item?: csgi_menu_itemUpdateManyWithoutCsgi_menuInput
  }

  export type csgi_menuUncheckedUpdateInput = {
    menuid?: IntFieldUpdateOperationsInput | number
    menuname?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_menu_item?: csgi_menu_itemUncheckedUpdateManyWithoutCsgi_menuInput
  }

  export type csgi_menuCreateManyInput = {
    menuid?: number
    menuname: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_menuUpdateManyMutationInput = {
    menuname?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_menuUncheckedUpdateManyInput = {
    menuid?: IntFieldUpdateOperationsInput | number
    menuname?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_menu_itemCreateInput = {
    itemname: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_menu?: csgi_menuCreateNestedOneWithoutCsgi_menu_itemInput
    csgi_menu_role?: csgi_menu_roleCreateNestedManyWithoutCsgi_menu_itemInput
  }

  export type csgi_menu_itemUncheckedCreateInput = {
    itemid?: number
    itemname: string
    menuid?: number | null
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_menu_role?: csgi_menu_roleUncheckedCreateNestedManyWithoutCsgi_menu_itemInput
  }

  export type csgi_menu_itemUpdateInput = {
    itemname?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_menu?: csgi_menuUpdateOneWithoutCsgi_menu_itemInput
    csgi_menu_role?: csgi_menu_roleUpdateManyWithoutCsgi_menu_itemInput
  }

  export type csgi_menu_itemUncheckedUpdateInput = {
    itemid?: IntFieldUpdateOperationsInput | number
    itemname?: StringFieldUpdateOperationsInput | string
    menuid?: NullableIntFieldUpdateOperationsInput | number | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_menu_role?: csgi_menu_roleUncheckedUpdateManyWithoutCsgi_menu_itemInput
  }

  export type csgi_menu_itemCreateManyInput = {
    itemid?: number
    itemname: string
    menuid?: number | null
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_menu_itemUpdateManyMutationInput = {
    itemname?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_menu_itemUncheckedUpdateManyInput = {
    itemid?: IntFieldUpdateOperationsInput | number
    itemname?: StringFieldUpdateOperationsInput | string
    menuid?: NullableIntFieldUpdateOperationsInput | number | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_menu_roleCreateInput = {
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_menu_item: csgi_menu_itemCreateNestedOneWithoutCsgi_menu_roleInput
    csgi_role: csgi_roleCreateNestedOneWithoutCsgi_menu_roleInput
  }

  export type csgi_menu_roleUncheckedCreateInput = {
    menu_roleid?: number
    roleid: number
    itemid: number
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_menu_roleUpdateInput = {
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_menu_item?: csgi_menu_itemUpdateOneRequiredWithoutCsgi_menu_roleInput
    csgi_role?: csgi_roleUpdateOneRequiredWithoutCsgi_menu_roleInput
  }

  export type csgi_menu_roleUncheckedUpdateInput = {
    menu_roleid?: IntFieldUpdateOperationsInput | number
    roleid?: IntFieldUpdateOperationsInput | number
    itemid?: IntFieldUpdateOperationsInput | number
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_menu_roleCreateManyInput = {
    menu_roleid?: number
    roleid: number
    itemid: number
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_menu_roleUpdateManyMutationInput = {
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_menu_roleUncheckedUpdateManyInput = {
    menu_roleid?: IntFieldUpdateOperationsInput | number
    roleid?: IntFieldUpdateOperationsInput | number
    itemid?: IntFieldUpdateOperationsInput | number
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_periodCreateInput = {
    periodname: string
    period_desc?: string | null
    period_start: Date | string
    period_end: Date | string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    period_date?: Date | string | null
    csgi_roster?: csgi_rosterCreateNestedManyWithoutCsgi_periodInput
  }

  export type csgi_periodUncheckedCreateInput = {
    periodid?: number
    periodname: string
    period_desc?: string | null
    period_start: Date | string
    period_end: Date | string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    period_date?: Date | string | null
    csgi_roster?: csgi_rosterUncheckedCreateNestedManyWithoutCsgi_periodInput
  }

  export type csgi_periodUpdateInput = {
    periodname?: StringFieldUpdateOperationsInput | string
    period_desc?: NullableStringFieldUpdateOperationsInput | string | null
    period_start?: DateTimeFieldUpdateOperationsInput | Date | string
    period_end?: DateTimeFieldUpdateOperationsInput | Date | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    period_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    csgi_roster?: csgi_rosterUpdateManyWithoutCsgi_periodInput
  }

  export type csgi_periodUncheckedUpdateInput = {
    periodid?: IntFieldUpdateOperationsInput | number
    periodname?: StringFieldUpdateOperationsInput | string
    period_desc?: NullableStringFieldUpdateOperationsInput | string | null
    period_start?: DateTimeFieldUpdateOperationsInput | Date | string
    period_end?: DateTimeFieldUpdateOperationsInput | Date | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    period_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    csgi_roster?: csgi_rosterUncheckedUpdateManyWithoutCsgi_periodInput
  }

  export type csgi_periodCreateManyInput = {
    periodid?: number
    periodname: string
    period_desc?: string | null
    period_start: Date | string
    period_end: Date | string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    period_date?: Date | string | null
  }

  export type csgi_periodUpdateManyMutationInput = {
    periodname?: StringFieldUpdateOperationsInput | string
    period_desc?: NullableStringFieldUpdateOperationsInput | string | null
    period_start?: DateTimeFieldUpdateOperationsInput | Date | string
    period_end?: DateTimeFieldUpdateOperationsInput | Date | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    period_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type csgi_periodUncheckedUpdateManyInput = {
    periodid?: IntFieldUpdateOperationsInput | number
    periodname?: StringFieldUpdateOperationsInput | string
    period_desc?: NullableStringFieldUpdateOperationsInput | string | null
    period_start?: DateTimeFieldUpdateOperationsInput | Date | string
    period_end?: DateTimeFieldUpdateOperationsInput | Date | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    period_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type csgi_roleCreateInput = {
    role: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_menu_role?: csgi_menu_roleCreateNestedManyWithoutCsgi_roleInput
    csgi_user_role?: csgi_user_roleCreateNestedManyWithoutCsgi_roleInput
  }

  export type csgi_roleUncheckedCreateInput = {
    roleid?: number
    role: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_menu_role?: csgi_menu_roleUncheckedCreateNestedManyWithoutCsgi_roleInput
    csgi_user_role?: csgi_user_roleUncheckedCreateNestedManyWithoutCsgi_roleInput
  }

  export type csgi_roleUpdateInput = {
    role?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_menu_role?: csgi_menu_roleUpdateManyWithoutCsgi_roleInput
    csgi_user_role?: csgi_user_roleUpdateManyWithoutCsgi_roleInput
  }

  export type csgi_roleUncheckedUpdateInput = {
    roleid?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_menu_role?: csgi_menu_roleUncheckedUpdateManyWithoutCsgi_roleInput
    csgi_user_role?: csgi_user_roleUncheckedUpdateManyWithoutCsgi_roleInput
  }

  export type csgi_roleCreateManyInput = {
    roleid?: number
    role: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_roleUpdateManyMutationInput = {
    role?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_roleUncheckedUpdateManyInput = {
    roleid?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_roomCreateInput = {
    roomcode: string
    room_desc?: string | null
    location?: string | null
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_class?: csgi_classCreateNestedManyWithoutCsgi_roomInput
  }

  export type csgi_roomUncheckedCreateInput = {
    roomid?: number
    roomcode: string
    room_desc?: string | null
    location?: string | null
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_class?: csgi_classUncheckedCreateNestedManyWithoutCsgi_roomInput
  }

  export type csgi_roomUpdateInput = {
    roomcode?: StringFieldUpdateOperationsInput | string
    room_desc?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_class?: csgi_classUpdateManyWithoutCsgi_roomInput
  }

  export type csgi_roomUncheckedUpdateInput = {
    roomid?: IntFieldUpdateOperationsInput | number
    roomcode?: StringFieldUpdateOperationsInput | string
    room_desc?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_class?: csgi_classUncheckedUpdateManyWithoutCsgi_roomInput
  }

  export type csgi_roomCreateManyInput = {
    roomid?: number
    roomcode: string
    room_desc?: string | null
    location?: string | null
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_roomUpdateManyMutationInput = {
    roomcode?: StringFieldUpdateOperationsInput | string
    room_desc?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_roomUncheckedUpdateManyInput = {
    roomid?: IntFieldUpdateOperationsInput | number
    roomcode?: StringFieldUpdateOperationsInput | string
    room_desc?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_rosterCreateInput = {
    attended_yn?: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_class: csgi_classCreateNestedOneWithoutCsgi_rosterInput
    csgi_period: csgi_periodCreateNestedOneWithoutCsgi_rosterInput
    csgi_student: csgi_studentCreateNestedOneWithoutCsgi_rosterInput
  }

  export type csgi_rosterUncheckedCreateInput = {
    rosterid?: number
    classid: number
    periodid: number
    studentid: number
    attended_yn?: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_rosterUpdateInput = {
    attended_yn?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_class?: csgi_classUpdateOneRequiredWithoutCsgi_rosterInput
    csgi_period?: csgi_periodUpdateOneRequiredWithoutCsgi_rosterInput
    csgi_student?: csgi_studentUpdateOneRequiredWithoutCsgi_rosterInput
  }

  export type csgi_rosterUncheckedUpdateInput = {
    rosterid?: IntFieldUpdateOperationsInput | number
    classid?: IntFieldUpdateOperationsInput | number
    periodid?: IntFieldUpdateOperationsInput | number
    studentid?: IntFieldUpdateOperationsInput | number
    attended_yn?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_rosterCreateManyInput = {
    rosterid?: number
    classid: number
    periodid: number
    studentid: number
    attended_yn?: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_rosterUpdateManyMutationInput = {
    attended_yn?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_rosterUncheckedUpdateManyInput = {
    rosterid?: IntFieldUpdateOperationsInput | number
    classid?: IntFieldUpdateOperationsInput | number
    periodid?: IntFieldUpdateOperationsInput | number
    studentid?: IntFieldUpdateOperationsInput | number
    attended_yn?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_studentCreateInput = {
    student_name?: string | null
    last_name: string
    date_of_birth?: Date | string | null
    gender?: string | null
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_roster?: csgi_rosterCreateNestedManyWithoutCsgi_studentInput
  }

  export type csgi_studentUncheckedCreateInput = {
    studentid?: number
    student_name?: string | null
    last_name: string
    date_of_birth?: Date | string | null
    gender?: string | null
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_roster?: csgi_rosterUncheckedCreateNestedManyWithoutCsgi_studentInput
  }

  export type csgi_studentUpdateInput = {
    student_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_roster?: csgi_rosterUpdateManyWithoutCsgi_studentInput
  }

  export type csgi_studentUncheckedUpdateInput = {
    studentid?: IntFieldUpdateOperationsInput | number
    student_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_roster?: csgi_rosterUncheckedUpdateManyWithoutCsgi_studentInput
  }

  export type csgi_studentCreateManyInput = {
    studentid?: number
    student_name?: string | null
    last_name: string
    date_of_birth?: Date | string | null
    gender?: string | null
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_studentUpdateManyMutationInput = {
    student_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_studentUncheckedUpdateManyInput = {
    studentid?: IntFieldUpdateOperationsInput | number
    student_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_userCreateInput = {
    username: string
    email: string
    first_name?: string | null
    last_name: string
    password: string
    created_date?: Date | string
    created_by?: string | null
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_class?: csgi_classCreateNestedManyWithoutCsgi_userInput
    csgi_user_role?: csgi_user_roleCreateNestedManyWithoutCsgi_userInput
  }

  export type csgi_userUncheckedCreateInput = {
    userid?: number
    username: string
    email: string
    first_name?: string | null
    last_name: string
    password: string
    created_date?: Date | string
    created_by?: string | null
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_class?: csgi_classUncheckedCreateNestedManyWithoutCsgi_userInput
    csgi_user_role?: csgi_user_roleUncheckedCreateNestedManyWithoutCsgi_userInput
  }

  export type csgi_userUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_class?: csgi_classUpdateManyWithoutCsgi_userInput
    csgi_user_role?: csgi_user_roleUpdateManyWithoutCsgi_userInput
  }

  export type csgi_userUncheckedUpdateInput = {
    userid?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_class?: csgi_classUncheckedUpdateManyWithoutCsgi_userInput
    csgi_user_role?: csgi_user_roleUncheckedUpdateManyWithoutCsgi_userInput
  }

  export type csgi_userCreateManyInput = {
    userid?: number
    username: string
    email: string
    first_name?: string | null
    last_name: string
    password: string
    created_date?: Date | string
    created_by?: string | null
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_userUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_userUncheckedUpdateManyInput = {
    userid?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_user_roleCreateInput = {
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_role: csgi_roleCreateNestedOneWithoutCsgi_user_roleInput
    csgi_user: csgi_userCreateNestedOneWithoutCsgi_user_roleInput
  }

  export type csgi_user_roleUncheckedCreateInput = {
    user_roleid?: number
    userid: number
    roleid: number
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_user_roleUpdateInput = {
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_role?: csgi_roleUpdateOneRequiredWithoutCsgi_user_roleInput
    csgi_user?: csgi_userUpdateOneRequiredWithoutCsgi_user_roleInput
  }

  export type csgi_user_roleUncheckedUpdateInput = {
    user_roleid?: IntFieldUpdateOperationsInput | number
    userid?: IntFieldUpdateOperationsInput | number
    roleid?: IntFieldUpdateOperationsInput | number
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_user_roleCreateManyInput = {
    user_roleid?: number
    userid: number
    roleid: number
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_user_roleUpdateManyMutationInput = {
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_user_roleUncheckedUpdateManyInput = {
    user_roleid?: IntFieldUpdateOperationsInput | number
    userid?: IntFieldUpdateOperationsInput | number
    roleid?: IntFieldUpdateOperationsInput | number
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_alluser_vCreateInput = {
    userid: number
    email: string
    role: string
  }

  export type csgi_alluser_vUncheckedCreateInput = {
    userid: number
    email: string
    role: string
  }

  export type csgi_alluser_vUpdateInput = {
    userid?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type csgi_alluser_vUncheckedUpdateInput = {
    userid?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type csgi_alluser_vCreateManyInput = {
    userid: number
    email: string
    role: string
  }

  export type csgi_alluser_vUpdateManyMutationInput = {
    userid?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type csgi_alluser_vUncheckedUpdateManyInput = {
    userid?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type csgi_detailreport_vCreateInput = {
    classid: number
    classname: string
    gradeid: number
    gradecode: string
    teacherid: number
    teachername: string
    teacheremail: string
    periodid: number
    periodname: string
    period_date: Date | string
    quarter: string
    studentid: number
    student_name: string
    attended: number
    notattended: number
  }

  export type csgi_detailreport_vUncheckedCreateInput = {
    classid: number
    classname: string
    gradeid: number
    gradecode: string
    teacherid: number
    teachername: string
    teacheremail: string
    periodid: number
    periodname: string
    period_date: Date | string
    quarter: string
    studentid: number
    student_name: string
    attended: number
    notattended: number
  }

  export type csgi_detailreport_vUpdateInput = {
    classid?: IntFieldUpdateOperationsInput | number
    classname?: StringFieldUpdateOperationsInput | string
    gradeid?: IntFieldUpdateOperationsInput | number
    gradecode?: StringFieldUpdateOperationsInput | string
    teacherid?: IntFieldUpdateOperationsInput | number
    teachername?: StringFieldUpdateOperationsInput | string
    teacheremail?: StringFieldUpdateOperationsInput | string
    periodid?: IntFieldUpdateOperationsInput | number
    periodname?: StringFieldUpdateOperationsInput | string
    period_date?: DateTimeFieldUpdateOperationsInput | Date | string
    quarter?: StringFieldUpdateOperationsInput | string
    studentid?: IntFieldUpdateOperationsInput | number
    student_name?: StringFieldUpdateOperationsInput | string
    attended?: IntFieldUpdateOperationsInput | number
    notattended?: IntFieldUpdateOperationsInput | number
  }

  export type csgi_detailreport_vUncheckedUpdateInput = {
    classid?: IntFieldUpdateOperationsInput | number
    classname?: StringFieldUpdateOperationsInput | string
    gradeid?: IntFieldUpdateOperationsInput | number
    gradecode?: StringFieldUpdateOperationsInput | string
    teacherid?: IntFieldUpdateOperationsInput | number
    teachername?: StringFieldUpdateOperationsInput | string
    teacheremail?: StringFieldUpdateOperationsInput | string
    periodid?: IntFieldUpdateOperationsInput | number
    periodname?: StringFieldUpdateOperationsInput | string
    period_date?: DateTimeFieldUpdateOperationsInput | Date | string
    quarter?: StringFieldUpdateOperationsInput | string
    studentid?: IntFieldUpdateOperationsInput | number
    student_name?: StringFieldUpdateOperationsInput | string
    attended?: IntFieldUpdateOperationsInput | number
    notattended?: IntFieldUpdateOperationsInput | number
  }

  export type csgi_detailreport_vCreateManyInput = {
    classid: number
    classname: string
    gradeid: number
    gradecode: string
    teacherid: number
    teachername: string
    teacheremail: string
    periodid: number
    periodname: string
    period_date: Date | string
    quarter: string
    studentid: number
    student_name: string
    attended: number
    notattended: number
  }

  export type csgi_detailreport_vUpdateManyMutationInput = {
    classid?: IntFieldUpdateOperationsInput | number
    classname?: StringFieldUpdateOperationsInput | string
    gradeid?: IntFieldUpdateOperationsInput | number
    gradecode?: StringFieldUpdateOperationsInput | string
    teacherid?: IntFieldUpdateOperationsInput | number
    teachername?: StringFieldUpdateOperationsInput | string
    teacheremail?: StringFieldUpdateOperationsInput | string
    periodid?: IntFieldUpdateOperationsInput | number
    periodname?: StringFieldUpdateOperationsInput | string
    period_date?: DateTimeFieldUpdateOperationsInput | Date | string
    quarter?: StringFieldUpdateOperationsInput | string
    studentid?: IntFieldUpdateOperationsInput | number
    student_name?: StringFieldUpdateOperationsInput | string
    attended?: IntFieldUpdateOperationsInput | number
    notattended?: IntFieldUpdateOperationsInput | number
  }

  export type csgi_detailreport_vUncheckedUpdateManyInput = {
    classid?: IntFieldUpdateOperationsInput | number
    classname?: StringFieldUpdateOperationsInput | string
    gradeid?: IntFieldUpdateOperationsInput | number
    gradecode?: StringFieldUpdateOperationsInput | string
    teacherid?: IntFieldUpdateOperationsInput | number
    teachername?: StringFieldUpdateOperationsInput | string
    teacheremail?: StringFieldUpdateOperationsInput | string
    periodid?: IntFieldUpdateOperationsInput | number
    periodname?: StringFieldUpdateOperationsInput | string
    period_date?: DateTimeFieldUpdateOperationsInput | Date | string
    quarter?: StringFieldUpdateOperationsInput | string
    studentid?: IntFieldUpdateOperationsInput | number
    student_name?: StringFieldUpdateOperationsInput | string
    attended?: IntFieldUpdateOperationsInput | number
    notattended?: IntFieldUpdateOperationsInput | number
  }

  export type csgi_summaryreport_vCreateInput = {
    classname: string
    gradeid: number
    gradecode: string
    teacherid: number
    teacheremail: string
    teachername: string
    student_name: string
    quarter: string
    no_attended: number
    no_missed: number
  }

  export type csgi_summaryreport_vUncheckedCreateInput = {
    classname: string
    gradeid: number
    gradecode: string
    teacherid: number
    teacheremail: string
    teachername: string
    student_name: string
    quarter: string
    no_attended: number
    no_missed: number
  }

  export type csgi_summaryreport_vUpdateInput = {
    classname?: StringFieldUpdateOperationsInput | string
    gradeid?: IntFieldUpdateOperationsInput | number
    gradecode?: StringFieldUpdateOperationsInput | string
    teacherid?: IntFieldUpdateOperationsInput | number
    teacheremail?: StringFieldUpdateOperationsInput | string
    teachername?: StringFieldUpdateOperationsInput | string
    student_name?: StringFieldUpdateOperationsInput | string
    quarter?: StringFieldUpdateOperationsInput | string
    no_attended?: IntFieldUpdateOperationsInput | number
    no_missed?: IntFieldUpdateOperationsInput | number
  }

  export type csgi_summaryreport_vUncheckedUpdateInput = {
    classname?: StringFieldUpdateOperationsInput | string
    gradeid?: IntFieldUpdateOperationsInput | number
    gradecode?: StringFieldUpdateOperationsInput | string
    teacherid?: IntFieldUpdateOperationsInput | number
    teacheremail?: StringFieldUpdateOperationsInput | string
    teachername?: StringFieldUpdateOperationsInput | string
    student_name?: StringFieldUpdateOperationsInput | string
    quarter?: StringFieldUpdateOperationsInput | string
    no_attended?: IntFieldUpdateOperationsInput | number
    no_missed?: IntFieldUpdateOperationsInput | number
  }

  export type csgi_summaryreport_vCreateManyInput = {
    classname: string
    gradeid: number
    gradecode: string
    teacherid: number
    teacheremail: string
    teachername: string
    student_name: string
    quarter: string
    no_attended: number
    no_missed: number
  }

  export type csgi_summaryreport_vUpdateManyMutationInput = {
    classname?: StringFieldUpdateOperationsInput | string
    gradeid?: IntFieldUpdateOperationsInput | number
    gradecode?: StringFieldUpdateOperationsInput | string
    teacherid?: IntFieldUpdateOperationsInput | number
    teacheremail?: StringFieldUpdateOperationsInput | string
    teachername?: StringFieldUpdateOperationsInput | string
    student_name?: StringFieldUpdateOperationsInput | string
    quarter?: StringFieldUpdateOperationsInput | string
    no_attended?: IntFieldUpdateOperationsInput | number
    no_missed?: IntFieldUpdateOperationsInput | number
  }

  export type csgi_summaryreport_vUncheckedUpdateManyInput = {
    classname?: StringFieldUpdateOperationsInput | string
    gradeid?: IntFieldUpdateOperationsInput | number
    gradecode?: StringFieldUpdateOperationsInput | string
    teacherid?: IntFieldUpdateOperationsInput | number
    teacheremail?: StringFieldUpdateOperationsInput | string
    teachername?: StringFieldUpdateOperationsInput | string
    student_name?: StringFieldUpdateOperationsInput | string
    quarter?: StringFieldUpdateOperationsInput | string
    no_attended?: IntFieldUpdateOperationsInput | number
    no_missed?: IntFieldUpdateOperationsInput | number
  }

  export type csgi_teacher_vCreateInput = {
    teacherid: number
    teacher: string
    teacheremail: string
    teachername: string
    rolename: string
  }

  export type csgi_teacher_vUncheckedCreateInput = {
    teacherid: number
    teacher: string
    teacheremail: string
    teachername: string
    rolename: string
  }

  export type csgi_teacher_vUpdateInput = {
    teacherid?: IntFieldUpdateOperationsInput | number
    teacher?: StringFieldUpdateOperationsInput | string
    teacheremail?: StringFieldUpdateOperationsInput | string
    teachername?: StringFieldUpdateOperationsInput | string
    rolename?: StringFieldUpdateOperationsInput | string
  }

  export type csgi_teacher_vUncheckedUpdateInput = {
    teacherid?: IntFieldUpdateOperationsInput | number
    teacher?: StringFieldUpdateOperationsInput | string
    teacheremail?: StringFieldUpdateOperationsInput | string
    teachername?: StringFieldUpdateOperationsInput | string
    rolename?: StringFieldUpdateOperationsInput | string
  }

  export type csgi_teacher_vCreateManyInput = {
    teacherid: number
    teacher: string
    teacheremail: string
    teachername: string
    rolename: string
  }

  export type csgi_teacher_vUpdateManyMutationInput = {
    teacherid?: IntFieldUpdateOperationsInput | number
    teacher?: StringFieldUpdateOperationsInput | string
    teacheremail?: StringFieldUpdateOperationsInput | string
    teachername?: StringFieldUpdateOperationsInput | string
    rolename?: StringFieldUpdateOperationsInput | string
  }

  export type csgi_teacher_vUncheckedUpdateManyInput = {
    teacherid?: IntFieldUpdateOperationsInput | number
    teacher?: StringFieldUpdateOperationsInput | string
    teacheremail?: StringFieldUpdateOperationsInput | string
    teachername?: StringFieldUpdateOperationsInput | string
    rolename?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type Csgi_gradeRelationFilter = {
    is?: csgi_gradeWhereInput | null
    isNot?: csgi_gradeWhereInput | null
  }

  export type Csgi_roomRelationFilter = {
    is?: csgi_roomWhereInput | null
    isNot?: csgi_roomWhereInput | null
  }

  export type Csgi_userRelationFilter = {
    is?: csgi_userWhereInput
    isNot?: csgi_userWhereInput
  }

  export type Csgi_rosterListRelationFilter = {
    every?: csgi_rosterWhereInput
    some?: csgi_rosterWhereInput
    none?: csgi_rosterWhereInput
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    count?: NestedIntFilter
    avg?: NestedFloatFilter
    sum?: NestedIntFilter
    min?: NestedIntFilter
    max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    count?: NestedIntFilter
    min?: NestedStringFilter
    max?: NestedStringFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    count?: NestedIntNullableFilter
    avg?: NestedFloatNullableFilter
    sum?: NestedIntNullableFilter
    min?: NestedIntNullableFilter
    max?: NestedIntNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    count?: NestedIntFilter
    min?: NestedDateTimeFilter
    max?: NestedDateTimeFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    count?: NestedIntNullableFilter
    min?: NestedStringNullableFilter
    max?: NestedStringNullableFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    count?: NestedIntNullableFilter
    min?: NestedDateTimeNullableFilter
    max?: NestedDateTimeNullableFilter
  }

  export type Csgi_classListRelationFilter = {
    every?: csgi_classWhereInput
    some?: csgi_classWhereInput
    none?: csgi_classWhereInput
  }

  export type Csgi_menu_itemListRelationFilter = {
    every?: csgi_menu_itemWhereInput
    some?: csgi_menu_itemWhereInput
    none?: csgi_menu_itemWhereInput
  }

  export type Csgi_menuRelationFilter = {
    is?: csgi_menuWhereInput | null
    isNot?: csgi_menuWhereInput | null
  }

  export type Csgi_menu_roleListRelationFilter = {
    every?: csgi_menu_roleWhereInput
    some?: csgi_menu_roleWhereInput
    none?: csgi_menu_roleWhereInput
  }

  export type Csgi_menu_itemRelationFilter = {
    is?: csgi_menu_itemWhereInput
    isNot?: csgi_menu_itemWhereInput
  }

  export type Csgi_roleRelationFilter = {
    is?: csgi_roleWhereInput
    isNot?: csgi_roleWhereInput
  }

  export type Csgi_user_roleListRelationFilter = {
    every?: csgi_user_roleWhereInput
    some?: csgi_user_roleWhereInput
    none?: csgi_user_roleWhereInput
  }

  export type Csgi_classRelationFilter = {
    is?: csgi_classWhereInput
    isNot?: csgi_classWhereInput
  }

  export type Csgi_periodRelationFilter = {
    is?: csgi_periodWhereInput
    isNot?: csgi_periodWhereInput
  }

  export type Csgi_studentRelationFilter = {
    is?: csgi_studentWhereInput
    isNot?: csgi_studentWhereInput
  }

  export type csgi_gradeCreateNestedOneWithoutCsgi_classInput = {
    create?: XOR<csgi_gradeCreateWithoutCsgi_classInput, csgi_gradeUncheckedCreateWithoutCsgi_classInput>
    connectOrCreate?: csgi_gradeCreateOrConnectWithoutCsgi_classInput
    connect?: csgi_gradeWhereUniqueInput
  }

  export type csgi_roomCreateNestedOneWithoutCsgi_classInput = {
    create?: XOR<csgi_roomCreateWithoutCsgi_classInput, csgi_roomUncheckedCreateWithoutCsgi_classInput>
    connectOrCreate?: csgi_roomCreateOrConnectWithoutCsgi_classInput
    connect?: csgi_roomWhereUniqueInput
  }

  export type csgi_userCreateNestedOneWithoutCsgi_classInput = {
    create?: XOR<csgi_userCreateWithoutCsgi_classInput, csgi_userUncheckedCreateWithoutCsgi_classInput>
    connectOrCreate?: csgi_userCreateOrConnectWithoutCsgi_classInput
    connect?: csgi_userWhereUniqueInput
  }

  export type csgi_rosterCreateNestedManyWithoutCsgi_classInput = {
    create?: XOR<Enumerable<csgi_rosterCreateWithoutCsgi_classInput>, Enumerable<csgi_rosterUncheckedCreateWithoutCsgi_classInput>>
    connectOrCreate?: Enumerable<csgi_rosterCreateOrConnectWithoutCsgi_classInput>
    createMany?: csgi_rosterCreateManyCsgi_classInputEnvelope
    connect?: Enumerable<csgi_rosterWhereUniqueInput>
  }

  export type csgi_rosterUncheckedCreateNestedManyWithoutCsgi_classInput = {
    create?: XOR<Enumerable<csgi_rosterCreateWithoutCsgi_classInput>, Enumerable<csgi_rosterUncheckedCreateWithoutCsgi_classInput>>
    connectOrCreate?: Enumerable<csgi_rosterCreateOrConnectWithoutCsgi_classInput>
    createMany?: csgi_rosterCreateManyCsgi_classInputEnvelope
    connect?: Enumerable<csgi_rosterWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type csgi_gradeUpdateOneWithoutCsgi_classInput = {
    create?: XOR<csgi_gradeCreateWithoutCsgi_classInput, csgi_gradeUncheckedCreateWithoutCsgi_classInput>
    connectOrCreate?: csgi_gradeCreateOrConnectWithoutCsgi_classInput
    upsert?: csgi_gradeUpsertWithoutCsgi_classInput
    connect?: csgi_gradeWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<csgi_gradeUpdateWithoutCsgi_classInput, csgi_gradeUncheckedUpdateWithoutCsgi_classInput>
  }

  export type csgi_roomUpdateOneWithoutCsgi_classInput = {
    create?: XOR<csgi_roomCreateWithoutCsgi_classInput, csgi_roomUncheckedCreateWithoutCsgi_classInput>
    connectOrCreate?: csgi_roomCreateOrConnectWithoutCsgi_classInput
    upsert?: csgi_roomUpsertWithoutCsgi_classInput
    connect?: csgi_roomWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<csgi_roomUpdateWithoutCsgi_classInput, csgi_roomUncheckedUpdateWithoutCsgi_classInput>
  }

  export type csgi_userUpdateOneWithoutCsgi_classInput = {
    create?: XOR<csgi_userCreateWithoutCsgi_classInput, csgi_userUncheckedCreateWithoutCsgi_classInput>
    connectOrCreate?: csgi_userCreateOrConnectWithoutCsgi_classInput
    upsert?: csgi_userUpsertWithoutCsgi_classInput
    connect?: csgi_userWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<csgi_userUpdateWithoutCsgi_classInput, csgi_userUncheckedUpdateWithoutCsgi_classInput>
  }

  export type csgi_rosterUpdateManyWithoutCsgi_classInput = {
    create?: XOR<Enumerable<csgi_rosterCreateWithoutCsgi_classInput>, Enumerable<csgi_rosterUncheckedCreateWithoutCsgi_classInput>>
    connectOrCreate?: Enumerable<csgi_rosterCreateOrConnectWithoutCsgi_classInput>
    upsert?: Enumerable<csgi_rosterUpsertWithWhereUniqueWithoutCsgi_classInput>
    createMany?: csgi_rosterCreateManyCsgi_classInputEnvelope
    connect?: Enumerable<csgi_rosterWhereUniqueInput>
    set?: Enumerable<csgi_rosterWhereUniqueInput>
    disconnect?: Enumerable<csgi_rosterWhereUniqueInput>
    delete?: Enumerable<csgi_rosterWhereUniqueInput>
    update?: Enumerable<csgi_rosterUpdateWithWhereUniqueWithoutCsgi_classInput>
    updateMany?: Enumerable<csgi_rosterUpdateManyWithWhereWithoutCsgi_classInput>
    deleteMany?: Enumerable<csgi_rosterScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type csgi_rosterUncheckedUpdateManyWithoutCsgi_classInput = {
    create?: XOR<Enumerable<csgi_rosterCreateWithoutCsgi_classInput>, Enumerable<csgi_rosterUncheckedCreateWithoutCsgi_classInput>>
    connectOrCreate?: Enumerable<csgi_rosterCreateOrConnectWithoutCsgi_classInput>
    upsert?: Enumerable<csgi_rosterUpsertWithWhereUniqueWithoutCsgi_classInput>
    createMany?: csgi_rosterCreateManyCsgi_classInputEnvelope
    connect?: Enumerable<csgi_rosterWhereUniqueInput>
    set?: Enumerable<csgi_rosterWhereUniqueInput>
    disconnect?: Enumerable<csgi_rosterWhereUniqueInput>
    delete?: Enumerable<csgi_rosterWhereUniqueInput>
    update?: Enumerable<csgi_rosterUpdateWithWhereUniqueWithoutCsgi_classInput>
    updateMany?: Enumerable<csgi_rosterUpdateManyWithWhereWithoutCsgi_classInput>
    deleteMany?: Enumerable<csgi_rosterScalarWhereInput>
  }

  export type csgi_classCreateNestedManyWithoutCsgi_gradeInput = {
    create?: XOR<Enumerable<csgi_classCreateWithoutCsgi_gradeInput>, Enumerable<csgi_classUncheckedCreateWithoutCsgi_gradeInput>>
    connectOrCreate?: Enumerable<csgi_classCreateOrConnectWithoutCsgi_gradeInput>
    createMany?: csgi_classCreateManyCsgi_gradeInputEnvelope
    connect?: Enumerable<csgi_classWhereUniqueInput>
  }

  export type csgi_classUncheckedCreateNestedManyWithoutCsgi_gradeInput = {
    create?: XOR<Enumerable<csgi_classCreateWithoutCsgi_gradeInput>, Enumerable<csgi_classUncheckedCreateWithoutCsgi_gradeInput>>
    connectOrCreate?: Enumerable<csgi_classCreateOrConnectWithoutCsgi_gradeInput>
    createMany?: csgi_classCreateManyCsgi_gradeInputEnvelope
    connect?: Enumerable<csgi_classWhereUniqueInput>
  }

  export type csgi_classUpdateManyWithoutCsgi_gradeInput = {
    create?: XOR<Enumerable<csgi_classCreateWithoutCsgi_gradeInput>, Enumerable<csgi_classUncheckedCreateWithoutCsgi_gradeInput>>
    connectOrCreate?: Enumerable<csgi_classCreateOrConnectWithoutCsgi_gradeInput>
    upsert?: Enumerable<csgi_classUpsertWithWhereUniqueWithoutCsgi_gradeInput>
    createMany?: csgi_classCreateManyCsgi_gradeInputEnvelope
    connect?: Enumerable<csgi_classWhereUniqueInput>
    set?: Enumerable<csgi_classWhereUniqueInput>
    disconnect?: Enumerable<csgi_classWhereUniqueInput>
    delete?: Enumerable<csgi_classWhereUniqueInput>
    update?: Enumerable<csgi_classUpdateWithWhereUniqueWithoutCsgi_gradeInput>
    updateMany?: Enumerable<csgi_classUpdateManyWithWhereWithoutCsgi_gradeInput>
    deleteMany?: Enumerable<csgi_classScalarWhereInput>
  }

  export type csgi_classUncheckedUpdateManyWithoutCsgi_gradeInput = {
    create?: XOR<Enumerable<csgi_classCreateWithoutCsgi_gradeInput>, Enumerable<csgi_classUncheckedCreateWithoutCsgi_gradeInput>>
    connectOrCreate?: Enumerable<csgi_classCreateOrConnectWithoutCsgi_gradeInput>
    upsert?: Enumerable<csgi_classUpsertWithWhereUniqueWithoutCsgi_gradeInput>
    createMany?: csgi_classCreateManyCsgi_gradeInputEnvelope
    connect?: Enumerable<csgi_classWhereUniqueInput>
    set?: Enumerable<csgi_classWhereUniqueInput>
    disconnect?: Enumerable<csgi_classWhereUniqueInput>
    delete?: Enumerable<csgi_classWhereUniqueInput>
    update?: Enumerable<csgi_classUpdateWithWhereUniqueWithoutCsgi_gradeInput>
    updateMany?: Enumerable<csgi_classUpdateManyWithWhereWithoutCsgi_gradeInput>
    deleteMany?: Enumerable<csgi_classScalarWhereInput>
  }

  export type csgi_menu_itemCreateNestedManyWithoutCsgi_menuInput = {
    create?: XOR<Enumerable<csgi_menu_itemCreateWithoutCsgi_menuInput>, Enumerable<csgi_menu_itemUncheckedCreateWithoutCsgi_menuInput>>
    connectOrCreate?: Enumerable<csgi_menu_itemCreateOrConnectWithoutCsgi_menuInput>
    createMany?: csgi_menu_itemCreateManyCsgi_menuInputEnvelope
    connect?: Enumerable<csgi_menu_itemWhereUniqueInput>
  }

  export type csgi_menu_itemUncheckedCreateNestedManyWithoutCsgi_menuInput = {
    create?: XOR<Enumerable<csgi_menu_itemCreateWithoutCsgi_menuInput>, Enumerable<csgi_menu_itemUncheckedCreateWithoutCsgi_menuInput>>
    connectOrCreate?: Enumerable<csgi_menu_itemCreateOrConnectWithoutCsgi_menuInput>
    createMany?: csgi_menu_itemCreateManyCsgi_menuInputEnvelope
    connect?: Enumerable<csgi_menu_itemWhereUniqueInput>
  }

  export type csgi_menu_itemUpdateManyWithoutCsgi_menuInput = {
    create?: XOR<Enumerable<csgi_menu_itemCreateWithoutCsgi_menuInput>, Enumerable<csgi_menu_itemUncheckedCreateWithoutCsgi_menuInput>>
    connectOrCreate?: Enumerable<csgi_menu_itemCreateOrConnectWithoutCsgi_menuInput>
    upsert?: Enumerable<csgi_menu_itemUpsertWithWhereUniqueWithoutCsgi_menuInput>
    createMany?: csgi_menu_itemCreateManyCsgi_menuInputEnvelope
    connect?: Enumerable<csgi_menu_itemWhereUniqueInput>
    set?: Enumerable<csgi_menu_itemWhereUniqueInput>
    disconnect?: Enumerable<csgi_menu_itemWhereUniqueInput>
    delete?: Enumerable<csgi_menu_itemWhereUniqueInput>
    update?: Enumerable<csgi_menu_itemUpdateWithWhereUniqueWithoutCsgi_menuInput>
    updateMany?: Enumerable<csgi_menu_itemUpdateManyWithWhereWithoutCsgi_menuInput>
    deleteMany?: Enumerable<csgi_menu_itemScalarWhereInput>
  }

  export type csgi_menu_itemUncheckedUpdateManyWithoutCsgi_menuInput = {
    create?: XOR<Enumerable<csgi_menu_itemCreateWithoutCsgi_menuInput>, Enumerable<csgi_menu_itemUncheckedCreateWithoutCsgi_menuInput>>
    connectOrCreate?: Enumerable<csgi_menu_itemCreateOrConnectWithoutCsgi_menuInput>
    upsert?: Enumerable<csgi_menu_itemUpsertWithWhereUniqueWithoutCsgi_menuInput>
    createMany?: csgi_menu_itemCreateManyCsgi_menuInputEnvelope
    connect?: Enumerable<csgi_menu_itemWhereUniqueInput>
    set?: Enumerable<csgi_menu_itemWhereUniqueInput>
    disconnect?: Enumerable<csgi_menu_itemWhereUniqueInput>
    delete?: Enumerable<csgi_menu_itemWhereUniqueInput>
    update?: Enumerable<csgi_menu_itemUpdateWithWhereUniqueWithoutCsgi_menuInput>
    updateMany?: Enumerable<csgi_menu_itemUpdateManyWithWhereWithoutCsgi_menuInput>
    deleteMany?: Enumerable<csgi_menu_itemScalarWhereInput>
  }

  export type csgi_menuCreateNestedOneWithoutCsgi_menu_itemInput = {
    create?: XOR<csgi_menuCreateWithoutCsgi_menu_itemInput, csgi_menuUncheckedCreateWithoutCsgi_menu_itemInput>
    connectOrCreate?: csgi_menuCreateOrConnectWithoutCsgi_menu_itemInput
    connect?: csgi_menuWhereUniqueInput
  }

  export type csgi_menu_roleCreateNestedManyWithoutCsgi_menu_itemInput = {
    create?: XOR<Enumerable<csgi_menu_roleCreateWithoutCsgi_menu_itemInput>, Enumerable<csgi_menu_roleUncheckedCreateWithoutCsgi_menu_itemInput>>
    connectOrCreate?: Enumerable<csgi_menu_roleCreateOrConnectWithoutCsgi_menu_itemInput>
    createMany?: csgi_menu_roleCreateManyCsgi_menu_itemInputEnvelope
    connect?: Enumerable<csgi_menu_roleWhereUniqueInput>
  }

  export type csgi_menu_roleUncheckedCreateNestedManyWithoutCsgi_menu_itemInput = {
    create?: XOR<Enumerable<csgi_menu_roleCreateWithoutCsgi_menu_itemInput>, Enumerable<csgi_menu_roleUncheckedCreateWithoutCsgi_menu_itemInput>>
    connectOrCreate?: Enumerable<csgi_menu_roleCreateOrConnectWithoutCsgi_menu_itemInput>
    createMany?: csgi_menu_roleCreateManyCsgi_menu_itemInputEnvelope
    connect?: Enumerable<csgi_menu_roleWhereUniqueInput>
  }

  export type csgi_menuUpdateOneWithoutCsgi_menu_itemInput = {
    create?: XOR<csgi_menuCreateWithoutCsgi_menu_itemInput, csgi_menuUncheckedCreateWithoutCsgi_menu_itemInput>
    connectOrCreate?: csgi_menuCreateOrConnectWithoutCsgi_menu_itemInput
    upsert?: csgi_menuUpsertWithoutCsgi_menu_itemInput
    connect?: csgi_menuWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<csgi_menuUpdateWithoutCsgi_menu_itemInput, csgi_menuUncheckedUpdateWithoutCsgi_menu_itemInput>
  }

  export type csgi_menu_roleUpdateManyWithoutCsgi_menu_itemInput = {
    create?: XOR<Enumerable<csgi_menu_roleCreateWithoutCsgi_menu_itemInput>, Enumerable<csgi_menu_roleUncheckedCreateWithoutCsgi_menu_itemInput>>
    connectOrCreate?: Enumerable<csgi_menu_roleCreateOrConnectWithoutCsgi_menu_itemInput>
    upsert?: Enumerable<csgi_menu_roleUpsertWithWhereUniqueWithoutCsgi_menu_itemInput>
    createMany?: csgi_menu_roleCreateManyCsgi_menu_itemInputEnvelope
    connect?: Enumerable<csgi_menu_roleWhereUniqueInput>
    set?: Enumerable<csgi_menu_roleWhereUniqueInput>
    disconnect?: Enumerable<csgi_menu_roleWhereUniqueInput>
    delete?: Enumerable<csgi_menu_roleWhereUniqueInput>
    update?: Enumerable<csgi_menu_roleUpdateWithWhereUniqueWithoutCsgi_menu_itemInput>
    updateMany?: Enumerable<csgi_menu_roleUpdateManyWithWhereWithoutCsgi_menu_itemInput>
    deleteMany?: Enumerable<csgi_menu_roleScalarWhereInput>
  }

  export type csgi_menu_roleUncheckedUpdateManyWithoutCsgi_menu_itemInput = {
    create?: XOR<Enumerable<csgi_menu_roleCreateWithoutCsgi_menu_itemInput>, Enumerable<csgi_menu_roleUncheckedCreateWithoutCsgi_menu_itemInput>>
    connectOrCreate?: Enumerable<csgi_menu_roleCreateOrConnectWithoutCsgi_menu_itemInput>
    upsert?: Enumerable<csgi_menu_roleUpsertWithWhereUniqueWithoutCsgi_menu_itemInput>
    createMany?: csgi_menu_roleCreateManyCsgi_menu_itemInputEnvelope
    connect?: Enumerable<csgi_menu_roleWhereUniqueInput>
    set?: Enumerable<csgi_menu_roleWhereUniqueInput>
    disconnect?: Enumerable<csgi_menu_roleWhereUniqueInput>
    delete?: Enumerable<csgi_menu_roleWhereUniqueInput>
    update?: Enumerable<csgi_menu_roleUpdateWithWhereUniqueWithoutCsgi_menu_itemInput>
    updateMany?: Enumerable<csgi_menu_roleUpdateManyWithWhereWithoutCsgi_menu_itemInput>
    deleteMany?: Enumerable<csgi_menu_roleScalarWhereInput>
  }

  export type csgi_menu_itemCreateNestedOneWithoutCsgi_menu_roleInput = {
    create?: XOR<csgi_menu_itemCreateWithoutCsgi_menu_roleInput, csgi_menu_itemUncheckedCreateWithoutCsgi_menu_roleInput>
    connectOrCreate?: csgi_menu_itemCreateOrConnectWithoutCsgi_menu_roleInput
    connect?: csgi_menu_itemWhereUniqueInput
  }

  export type csgi_roleCreateNestedOneWithoutCsgi_menu_roleInput = {
    create?: XOR<csgi_roleCreateWithoutCsgi_menu_roleInput, csgi_roleUncheckedCreateWithoutCsgi_menu_roleInput>
    connectOrCreate?: csgi_roleCreateOrConnectWithoutCsgi_menu_roleInput
    connect?: csgi_roleWhereUniqueInput
  }

  export type csgi_menu_itemUpdateOneRequiredWithoutCsgi_menu_roleInput = {
    create?: XOR<csgi_menu_itemCreateWithoutCsgi_menu_roleInput, csgi_menu_itemUncheckedCreateWithoutCsgi_menu_roleInput>
    connectOrCreate?: csgi_menu_itemCreateOrConnectWithoutCsgi_menu_roleInput
    upsert?: csgi_menu_itemUpsertWithoutCsgi_menu_roleInput
    connect?: csgi_menu_itemWhereUniqueInput
    update?: XOR<csgi_menu_itemUpdateWithoutCsgi_menu_roleInput, csgi_menu_itemUncheckedUpdateWithoutCsgi_menu_roleInput>
  }

  export type csgi_roleUpdateOneRequiredWithoutCsgi_menu_roleInput = {
    create?: XOR<csgi_roleCreateWithoutCsgi_menu_roleInput, csgi_roleUncheckedCreateWithoutCsgi_menu_roleInput>
    connectOrCreate?: csgi_roleCreateOrConnectWithoutCsgi_menu_roleInput
    upsert?: csgi_roleUpsertWithoutCsgi_menu_roleInput
    connect?: csgi_roleWhereUniqueInput
    update?: XOR<csgi_roleUpdateWithoutCsgi_menu_roleInput, csgi_roleUncheckedUpdateWithoutCsgi_menu_roleInput>
  }

  export type csgi_rosterCreateNestedManyWithoutCsgi_periodInput = {
    create?: XOR<Enumerable<csgi_rosterCreateWithoutCsgi_periodInput>, Enumerable<csgi_rosterUncheckedCreateWithoutCsgi_periodInput>>
    connectOrCreate?: Enumerable<csgi_rosterCreateOrConnectWithoutCsgi_periodInput>
    createMany?: csgi_rosterCreateManyCsgi_periodInputEnvelope
    connect?: Enumerable<csgi_rosterWhereUniqueInput>
  }

  export type csgi_rosterUncheckedCreateNestedManyWithoutCsgi_periodInput = {
    create?: XOR<Enumerable<csgi_rosterCreateWithoutCsgi_periodInput>, Enumerable<csgi_rosterUncheckedCreateWithoutCsgi_periodInput>>
    connectOrCreate?: Enumerable<csgi_rosterCreateOrConnectWithoutCsgi_periodInput>
    createMany?: csgi_rosterCreateManyCsgi_periodInputEnvelope
    connect?: Enumerable<csgi_rosterWhereUniqueInput>
  }

  export type csgi_rosterUpdateManyWithoutCsgi_periodInput = {
    create?: XOR<Enumerable<csgi_rosterCreateWithoutCsgi_periodInput>, Enumerable<csgi_rosterUncheckedCreateWithoutCsgi_periodInput>>
    connectOrCreate?: Enumerable<csgi_rosterCreateOrConnectWithoutCsgi_periodInput>
    upsert?: Enumerable<csgi_rosterUpsertWithWhereUniqueWithoutCsgi_periodInput>
    createMany?: csgi_rosterCreateManyCsgi_periodInputEnvelope
    connect?: Enumerable<csgi_rosterWhereUniqueInput>
    set?: Enumerable<csgi_rosterWhereUniqueInput>
    disconnect?: Enumerable<csgi_rosterWhereUniqueInput>
    delete?: Enumerable<csgi_rosterWhereUniqueInput>
    update?: Enumerable<csgi_rosterUpdateWithWhereUniqueWithoutCsgi_periodInput>
    updateMany?: Enumerable<csgi_rosterUpdateManyWithWhereWithoutCsgi_periodInput>
    deleteMany?: Enumerable<csgi_rosterScalarWhereInput>
  }

  export type csgi_rosterUncheckedUpdateManyWithoutCsgi_periodInput = {
    create?: XOR<Enumerable<csgi_rosterCreateWithoutCsgi_periodInput>, Enumerable<csgi_rosterUncheckedCreateWithoutCsgi_periodInput>>
    connectOrCreate?: Enumerable<csgi_rosterCreateOrConnectWithoutCsgi_periodInput>
    upsert?: Enumerable<csgi_rosterUpsertWithWhereUniqueWithoutCsgi_periodInput>
    createMany?: csgi_rosterCreateManyCsgi_periodInputEnvelope
    connect?: Enumerable<csgi_rosterWhereUniqueInput>
    set?: Enumerable<csgi_rosterWhereUniqueInput>
    disconnect?: Enumerable<csgi_rosterWhereUniqueInput>
    delete?: Enumerable<csgi_rosterWhereUniqueInput>
    update?: Enumerable<csgi_rosterUpdateWithWhereUniqueWithoutCsgi_periodInput>
    updateMany?: Enumerable<csgi_rosterUpdateManyWithWhereWithoutCsgi_periodInput>
    deleteMany?: Enumerable<csgi_rosterScalarWhereInput>
  }

  export type csgi_menu_roleCreateNestedManyWithoutCsgi_roleInput = {
    create?: XOR<Enumerable<csgi_menu_roleCreateWithoutCsgi_roleInput>, Enumerable<csgi_menu_roleUncheckedCreateWithoutCsgi_roleInput>>
    connectOrCreate?: Enumerable<csgi_menu_roleCreateOrConnectWithoutCsgi_roleInput>
    createMany?: csgi_menu_roleCreateManyCsgi_roleInputEnvelope
    connect?: Enumerable<csgi_menu_roleWhereUniqueInput>
  }

  export type csgi_user_roleCreateNestedManyWithoutCsgi_roleInput = {
    create?: XOR<Enumerable<csgi_user_roleCreateWithoutCsgi_roleInput>, Enumerable<csgi_user_roleUncheckedCreateWithoutCsgi_roleInput>>
    connectOrCreate?: Enumerable<csgi_user_roleCreateOrConnectWithoutCsgi_roleInput>
    createMany?: csgi_user_roleCreateManyCsgi_roleInputEnvelope
    connect?: Enumerable<csgi_user_roleWhereUniqueInput>
  }

  export type csgi_menu_roleUncheckedCreateNestedManyWithoutCsgi_roleInput = {
    create?: XOR<Enumerable<csgi_menu_roleCreateWithoutCsgi_roleInput>, Enumerable<csgi_menu_roleUncheckedCreateWithoutCsgi_roleInput>>
    connectOrCreate?: Enumerable<csgi_menu_roleCreateOrConnectWithoutCsgi_roleInput>
    createMany?: csgi_menu_roleCreateManyCsgi_roleInputEnvelope
    connect?: Enumerable<csgi_menu_roleWhereUniqueInput>
  }

  export type csgi_user_roleUncheckedCreateNestedManyWithoutCsgi_roleInput = {
    create?: XOR<Enumerable<csgi_user_roleCreateWithoutCsgi_roleInput>, Enumerable<csgi_user_roleUncheckedCreateWithoutCsgi_roleInput>>
    connectOrCreate?: Enumerable<csgi_user_roleCreateOrConnectWithoutCsgi_roleInput>
    createMany?: csgi_user_roleCreateManyCsgi_roleInputEnvelope
    connect?: Enumerable<csgi_user_roleWhereUniqueInput>
  }

  export type csgi_menu_roleUpdateManyWithoutCsgi_roleInput = {
    create?: XOR<Enumerable<csgi_menu_roleCreateWithoutCsgi_roleInput>, Enumerable<csgi_menu_roleUncheckedCreateWithoutCsgi_roleInput>>
    connectOrCreate?: Enumerable<csgi_menu_roleCreateOrConnectWithoutCsgi_roleInput>
    upsert?: Enumerable<csgi_menu_roleUpsertWithWhereUniqueWithoutCsgi_roleInput>
    createMany?: csgi_menu_roleCreateManyCsgi_roleInputEnvelope
    connect?: Enumerable<csgi_menu_roleWhereUniqueInput>
    set?: Enumerable<csgi_menu_roleWhereUniqueInput>
    disconnect?: Enumerable<csgi_menu_roleWhereUniqueInput>
    delete?: Enumerable<csgi_menu_roleWhereUniqueInput>
    update?: Enumerable<csgi_menu_roleUpdateWithWhereUniqueWithoutCsgi_roleInput>
    updateMany?: Enumerable<csgi_menu_roleUpdateManyWithWhereWithoutCsgi_roleInput>
    deleteMany?: Enumerable<csgi_menu_roleScalarWhereInput>
  }

  export type csgi_user_roleUpdateManyWithoutCsgi_roleInput = {
    create?: XOR<Enumerable<csgi_user_roleCreateWithoutCsgi_roleInput>, Enumerable<csgi_user_roleUncheckedCreateWithoutCsgi_roleInput>>
    connectOrCreate?: Enumerable<csgi_user_roleCreateOrConnectWithoutCsgi_roleInput>
    upsert?: Enumerable<csgi_user_roleUpsertWithWhereUniqueWithoutCsgi_roleInput>
    createMany?: csgi_user_roleCreateManyCsgi_roleInputEnvelope
    connect?: Enumerable<csgi_user_roleWhereUniqueInput>
    set?: Enumerable<csgi_user_roleWhereUniqueInput>
    disconnect?: Enumerable<csgi_user_roleWhereUniqueInput>
    delete?: Enumerable<csgi_user_roleWhereUniqueInput>
    update?: Enumerable<csgi_user_roleUpdateWithWhereUniqueWithoutCsgi_roleInput>
    updateMany?: Enumerable<csgi_user_roleUpdateManyWithWhereWithoutCsgi_roleInput>
    deleteMany?: Enumerable<csgi_user_roleScalarWhereInput>
  }

  export type csgi_menu_roleUncheckedUpdateManyWithoutCsgi_roleInput = {
    create?: XOR<Enumerable<csgi_menu_roleCreateWithoutCsgi_roleInput>, Enumerable<csgi_menu_roleUncheckedCreateWithoutCsgi_roleInput>>
    connectOrCreate?: Enumerable<csgi_menu_roleCreateOrConnectWithoutCsgi_roleInput>
    upsert?: Enumerable<csgi_menu_roleUpsertWithWhereUniqueWithoutCsgi_roleInput>
    createMany?: csgi_menu_roleCreateManyCsgi_roleInputEnvelope
    connect?: Enumerable<csgi_menu_roleWhereUniqueInput>
    set?: Enumerable<csgi_menu_roleWhereUniqueInput>
    disconnect?: Enumerable<csgi_menu_roleWhereUniqueInput>
    delete?: Enumerable<csgi_menu_roleWhereUniqueInput>
    update?: Enumerable<csgi_menu_roleUpdateWithWhereUniqueWithoutCsgi_roleInput>
    updateMany?: Enumerable<csgi_menu_roleUpdateManyWithWhereWithoutCsgi_roleInput>
    deleteMany?: Enumerable<csgi_menu_roleScalarWhereInput>
  }

  export type csgi_user_roleUncheckedUpdateManyWithoutCsgi_roleInput = {
    create?: XOR<Enumerable<csgi_user_roleCreateWithoutCsgi_roleInput>, Enumerable<csgi_user_roleUncheckedCreateWithoutCsgi_roleInput>>
    connectOrCreate?: Enumerable<csgi_user_roleCreateOrConnectWithoutCsgi_roleInput>
    upsert?: Enumerable<csgi_user_roleUpsertWithWhereUniqueWithoutCsgi_roleInput>
    createMany?: csgi_user_roleCreateManyCsgi_roleInputEnvelope
    connect?: Enumerable<csgi_user_roleWhereUniqueInput>
    set?: Enumerable<csgi_user_roleWhereUniqueInput>
    disconnect?: Enumerable<csgi_user_roleWhereUniqueInput>
    delete?: Enumerable<csgi_user_roleWhereUniqueInput>
    update?: Enumerable<csgi_user_roleUpdateWithWhereUniqueWithoutCsgi_roleInput>
    updateMany?: Enumerable<csgi_user_roleUpdateManyWithWhereWithoutCsgi_roleInput>
    deleteMany?: Enumerable<csgi_user_roleScalarWhereInput>
  }

  export type csgi_classCreateNestedManyWithoutCsgi_roomInput = {
    create?: XOR<Enumerable<csgi_classCreateWithoutCsgi_roomInput>, Enumerable<csgi_classUncheckedCreateWithoutCsgi_roomInput>>
    connectOrCreate?: Enumerable<csgi_classCreateOrConnectWithoutCsgi_roomInput>
    createMany?: csgi_classCreateManyCsgi_roomInputEnvelope
    connect?: Enumerable<csgi_classWhereUniqueInput>
  }

  export type csgi_classUncheckedCreateNestedManyWithoutCsgi_roomInput = {
    create?: XOR<Enumerable<csgi_classCreateWithoutCsgi_roomInput>, Enumerable<csgi_classUncheckedCreateWithoutCsgi_roomInput>>
    connectOrCreate?: Enumerable<csgi_classCreateOrConnectWithoutCsgi_roomInput>
    createMany?: csgi_classCreateManyCsgi_roomInputEnvelope
    connect?: Enumerable<csgi_classWhereUniqueInput>
  }

  export type csgi_classUpdateManyWithoutCsgi_roomInput = {
    create?: XOR<Enumerable<csgi_classCreateWithoutCsgi_roomInput>, Enumerable<csgi_classUncheckedCreateWithoutCsgi_roomInput>>
    connectOrCreate?: Enumerable<csgi_classCreateOrConnectWithoutCsgi_roomInput>
    upsert?: Enumerable<csgi_classUpsertWithWhereUniqueWithoutCsgi_roomInput>
    createMany?: csgi_classCreateManyCsgi_roomInputEnvelope
    connect?: Enumerable<csgi_classWhereUniqueInput>
    set?: Enumerable<csgi_classWhereUniqueInput>
    disconnect?: Enumerable<csgi_classWhereUniqueInput>
    delete?: Enumerable<csgi_classWhereUniqueInput>
    update?: Enumerable<csgi_classUpdateWithWhereUniqueWithoutCsgi_roomInput>
    updateMany?: Enumerable<csgi_classUpdateManyWithWhereWithoutCsgi_roomInput>
    deleteMany?: Enumerable<csgi_classScalarWhereInput>
  }

  export type csgi_classUncheckedUpdateManyWithoutCsgi_roomInput = {
    create?: XOR<Enumerable<csgi_classCreateWithoutCsgi_roomInput>, Enumerable<csgi_classUncheckedCreateWithoutCsgi_roomInput>>
    connectOrCreate?: Enumerable<csgi_classCreateOrConnectWithoutCsgi_roomInput>
    upsert?: Enumerable<csgi_classUpsertWithWhereUniqueWithoutCsgi_roomInput>
    createMany?: csgi_classCreateManyCsgi_roomInputEnvelope
    connect?: Enumerable<csgi_classWhereUniqueInput>
    set?: Enumerable<csgi_classWhereUniqueInput>
    disconnect?: Enumerable<csgi_classWhereUniqueInput>
    delete?: Enumerable<csgi_classWhereUniqueInput>
    update?: Enumerable<csgi_classUpdateWithWhereUniqueWithoutCsgi_roomInput>
    updateMany?: Enumerable<csgi_classUpdateManyWithWhereWithoutCsgi_roomInput>
    deleteMany?: Enumerable<csgi_classScalarWhereInput>
  }

  export type csgi_classCreateNestedOneWithoutCsgi_rosterInput = {
    create?: XOR<csgi_classCreateWithoutCsgi_rosterInput, csgi_classUncheckedCreateWithoutCsgi_rosterInput>
    connectOrCreate?: csgi_classCreateOrConnectWithoutCsgi_rosterInput
    connect?: csgi_classWhereUniqueInput
  }

  export type csgi_periodCreateNestedOneWithoutCsgi_rosterInput = {
    create?: XOR<csgi_periodCreateWithoutCsgi_rosterInput, csgi_periodUncheckedCreateWithoutCsgi_rosterInput>
    connectOrCreate?: csgi_periodCreateOrConnectWithoutCsgi_rosterInput
    connect?: csgi_periodWhereUniqueInput
  }

  export type csgi_studentCreateNestedOneWithoutCsgi_rosterInput = {
    create?: XOR<csgi_studentCreateWithoutCsgi_rosterInput, csgi_studentUncheckedCreateWithoutCsgi_rosterInput>
    connectOrCreate?: csgi_studentCreateOrConnectWithoutCsgi_rosterInput
    connect?: csgi_studentWhereUniqueInput
  }

  export type csgi_classUpdateOneRequiredWithoutCsgi_rosterInput = {
    create?: XOR<csgi_classCreateWithoutCsgi_rosterInput, csgi_classUncheckedCreateWithoutCsgi_rosterInput>
    connectOrCreate?: csgi_classCreateOrConnectWithoutCsgi_rosterInput
    upsert?: csgi_classUpsertWithoutCsgi_rosterInput
    connect?: csgi_classWhereUniqueInput
    update?: XOR<csgi_classUpdateWithoutCsgi_rosterInput, csgi_classUncheckedUpdateWithoutCsgi_rosterInput>
  }

  export type csgi_periodUpdateOneRequiredWithoutCsgi_rosterInput = {
    create?: XOR<csgi_periodCreateWithoutCsgi_rosterInput, csgi_periodUncheckedCreateWithoutCsgi_rosterInput>
    connectOrCreate?: csgi_periodCreateOrConnectWithoutCsgi_rosterInput
    upsert?: csgi_periodUpsertWithoutCsgi_rosterInput
    connect?: csgi_periodWhereUniqueInput
    update?: XOR<csgi_periodUpdateWithoutCsgi_rosterInput, csgi_periodUncheckedUpdateWithoutCsgi_rosterInput>
  }

  export type csgi_studentUpdateOneRequiredWithoutCsgi_rosterInput = {
    create?: XOR<csgi_studentCreateWithoutCsgi_rosterInput, csgi_studentUncheckedCreateWithoutCsgi_rosterInput>
    connectOrCreate?: csgi_studentCreateOrConnectWithoutCsgi_rosterInput
    upsert?: csgi_studentUpsertWithoutCsgi_rosterInput
    connect?: csgi_studentWhereUniqueInput
    update?: XOR<csgi_studentUpdateWithoutCsgi_rosterInput, csgi_studentUncheckedUpdateWithoutCsgi_rosterInput>
  }

  export type csgi_rosterCreateNestedManyWithoutCsgi_studentInput = {
    create?: XOR<Enumerable<csgi_rosterCreateWithoutCsgi_studentInput>, Enumerable<csgi_rosterUncheckedCreateWithoutCsgi_studentInput>>
    connectOrCreate?: Enumerable<csgi_rosterCreateOrConnectWithoutCsgi_studentInput>
    createMany?: csgi_rosterCreateManyCsgi_studentInputEnvelope
    connect?: Enumerable<csgi_rosterWhereUniqueInput>
  }

  export type csgi_rosterUncheckedCreateNestedManyWithoutCsgi_studentInput = {
    create?: XOR<Enumerable<csgi_rosterCreateWithoutCsgi_studentInput>, Enumerable<csgi_rosterUncheckedCreateWithoutCsgi_studentInput>>
    connectOrCreate?: Enumerable<csgi_rosterCreateOrConnectWithoutCsgi_studentInput>
    createMany?: csgi_rosterCreateManyCsgi_studentInputEnvelope
    connect?: Enumerable<csgi_rosterWhereUniqueInput>
  }

  export type csgi_rosterUpdateManyWithoutCsgi_studentInput = {
    create?: XOR<Enumerable<csgi_rosterCreateWithoutCsgi_studentInput>, Enumerable<csgi_rosterUncheckedCreateWithoutCsgi_studentInput>>
    connectOrCreate?: Enumerable<csgi_rosterCreateOrConnectWithoutCsgi_studentInput>
    upsert?: Enumerable<csgi_rosterUpsertWithWhereUniqueWithoutCsgi_studentInput>
    createMany?: csgi_rosterCreateManyCsgi_studentInputEnvelope
    connect?: Enumerable<csgi_rosterWhereUniqueInput>
    set?: Enumerable<csgi_rosterWhereUniqueInput>
    disconnect?: Enumerable<csgi_rosterWhereUniqueInput>
    delete?: Enumerable<csgi_rosterWhereUniqueInput>
    update?: Enumerable<csgi_rosterUpdateWithWhereUniqueWithoutCsgi_studentInput>
    updateMany?: Enumerable<csgi_rosterUpdateManyWithWhereWithoutCsgi_studentInput>
    deleteMany?: Enumerable<csgi_rosterScalarWhereInput>
  }

  export type csgi_rosterUncheckedUpdateManyWithoutCsgi_studentInput = {
    create?: XOR<Enumerable<csgi_rosterCreateWithoutCsgi_studentInput>, Enumerable<csgi_rosterUncheckedCreateWithoutCsgi_studentInput>>
    connectOrCreate?: Enumerable<csgi_rosterCreateOrConnectWithoutCsgi_studentInput>
    upsert?: Enumerable<csgi_rosterUpsertWithWhereUniqueWithoutCsgi_studentInput>
    createMany?: csgi_rosterCreateManyCsgi_studentInputEnvelope
    connect?: Enumerable<csgi_rosterWhereUniqueInput>
    set?: Enumerable<csgi_rosterWhereUniqueInput>
    disconnect?: Enumerable<csgi_rosterWhereUniqueInput>
    delete?: Enumerable<csgi_rosterWhereUniqueInput>
    update?: Enumerable<csgi_rosterUpdateWithWhereUniqueWithoutCsgi_studentInput>
    updateMany?: Enumerable<csgi_rosterUpdateManyWithWhereWithoutCsgi_studentInput>
    deleteMany?: Enumerable<csgi_rosterScalarWhereInput>
  }

  export type csgi_classCreateNestedManyWithoutCsgi_userInput = {
    create?: XOR<Enumerable<csgi_classCreateWithoutCsgi_userInput>, Enumerable<csgi_classUncheckedCreateWithoutCsgi_userInput>>
    connectOrCreate?: Enumerable<csgi_classCreateOrConnectWithoutCsgi_userInput>
    createMany?: csgi_classCreateManyCsgi_userInputEnvelope
    connect?: Enumerable<csgi_classWhereUniqueInput>
  }

  export type csgi_user_roleCreateNestedManyWithoutCsgi_userInput = {
    create?: XOR<Enumerable<csgi_user_roleCreateWithoutCsgi_userInput>, Enumerable<csgi_user_roleUncheckedCreateWithoutCsgi_userInput>>
    connectOrCreate?: Enumerable<csgi_user_roleCreateOrConnectWithoutCsgi_userInput>
    createMany?: csgi_user_roleCreateManyCsgi_userInputEnvelope
    connect?: Enumerable<csgi_user_roleWhereUniqueInput>
  }

  export type csgi_classUncheckedCreateNestedManyWithoutCsgi_userInput = {
    create?: XOR<Enumerable<csgi_classCreateWithoutCsgi_userInput>, Enumerable<csgi_classUncheckedCreateWithoutCsgi_userInput>>
    connectOrCreate?: Enumerable<csgi_classCreateOrConnectWithoutCsgi_userInput>
    createMany?: csgi_classCreateManyCsgi_userInputEnvelope
    connect?: Enumerable<csgi_classWhereUniqueInput>
  }

  export type csgi_user_roleUncheckedCreateNestedManyWithoutCsgi_userInput = {
    create?: XOR<Enumerable<csgi_user_roleCreateWithoutCsgi_userInput>, Enumerable<csgi_user_roleUncheckedCreateWithoutCsgi_userInput>>
    connectOrCreate?: Enumerable<csgi_user_roleCreateOrConnectWithoutCsgi_userInput>
    createMany?: csgi_user_roleCreateManyCsgi_userInputEnvelope
    connect?: Enumerable<csgi_user_roleWhereUniqueInput>
  }

  export type csgi_classUpdateManyWithoutCsgi_userInput = {
    create?: XOR<Enumerable<csgi_classCreateWithoutCsgi_userInput>, Enumerable<csgi_classUncheckedCreateWithoutCsgi_userInput>>
    connectOrCreate?: Enumerable<csgi_classCreateOrConnectWithoutCsgi_userInput>
    upsert?: Enumerable<csgi_classUpsertWithWhereUniqueWithoutCsgi_userInput>
    createMany?: csgi_classCreateManyCsgi_userInputEnvelope
    connect?: Enumerable<csgi_classWhereUniqueInput>
    set?: Enumerable<csgi_classWhereUniqueInput>
    disconnect?: Enumerable<csgi_classWhereUniqueInput>
    delete?: Enumerable<csgi_classWhereUniqueInput>
    update?: Enumerable<csgi_classUpdateWithWhereUniqueWithoutCsgi_userInput>
    updateMany?: Enumerable<csgi_classUpdateManyWithWhereWithoutCsgi_userInput>
    deleteMany?: Enumerable<csgi_classScalarWhereInput>
  }

  export type csgi_user_roleUpdateManyWithoutCsgi_userInput = {
    create?: XOR<Enumerable<csgi_user_roleCreateWithoutCsgi_userInput>, Enumerable<csgi_user_roleUncheckedCreateWithoutCsgi_userInput>>
    connectOrCreate?: Enumerable<csgi_user_roleCreateOrConnectWithoutCsgi_userInput>
    upsert?: Enumerable<csgi_user_roleUpsertWithWhereUniqueWithoutCsgi_userInput>
    createMany?: csgi_user_roleCreateManyCsgi_userInputEnvelope
    connect?: Enumerable<csgi_user_roleWhereUniqueInput>
    set?: Enumerable<csgi_user_roleWhereUniqueInput>
    disconnect?: Enumerable<csgi_user_roleWhereUniqueInput>
    delete?: Enumerable<csgi_user_roleWhereUniqueInput>
    update?: Enumerable<csgi_user_roleUpdateWithWhereUniqueWithoutCsgi_userInput>
    updateMany?: Enumerable<csgi_user_roleUpdateManyWithWhereWithoutCsgi_userInput>
    deleteMany?: Enumerable<csgi_user_roleScalarWhereInput>
  }

  export type csgi_classUncheckedUpdateManyWithoutCsgi_userInput = {
    create?: XOR<Enumerable<csgi_classCreateWithoutCsgi_userInput>, Enumerable<csgi_classUncheckedCreateWithoutCsgi_userInput>>
    connectOrCreate?: Enumerable<csgi_classCreateOrConnectWithoutCsgi_userInput>
    upsert?: Enumerable<csgi_classUpsertWithWhereUniqueWithoutCsgi_userInput>
    createMany?: csgi_classCreateManyCsgi_userInputEnvelope
    connect?: Enumerable<csgi_classWhereUniqueInput>
    set?: Enumerable<csgi_classWhereUniqueInput>
    disconnect?: Enumerable<csgi_classWhereUniqueInput>
    delete?: Enumerable<csgi_classWhereUniqueInput>
    update?: Enumerable<csgi_classUpdateWithWhereUniqueWithoutCsgi_userInput>
    updateMany?: Enumerable<csgi_classUpdateManyWithWhereWithoutCsgi_userInput>
    deleteMany?: Enumerable<csgi_classScalarWhereInput>
  }

  export type csgi_user_roleUncheckedUpdateManyWithoutCsgi_userInput = {
    create?: XOR<Enumerable<csgi_user_roleCreateWithoutCsgi_userInput>, Enumerable<csgi_user_roleUncheckedCreateWithoutCsgi_userInput>>
    connectOrCreate?: Enumerable<csgi_user_roleCreateOrConnectWithoutCsgi_userInput>
    upsert?: Enumerable<csgi_user_roleUpsertWithWhereUniqueWithoutCsgi_userInput>
    createMany?: csgi_user_roleCreateManyCsgi_userInputEnvelope
    connect?: Enumerable<csgi_user_roleWhereUniqueInput>
    set?: Enumerable<csgi_user_roleWhereUniqueInput>
    disconnect?: Enumerable<csgi_user_roleWhereUniqueInput>
    delete?: Enumerable<csgi_user_roleWhereUniqueInput>
    update?: Enumerable<csgi_user_roleUpdateWithWhereUniqueWithoutCsgi_userInput>
    updateMany?: Enumerable<csgi_user_roleUpdateManyWithWhereWithoutCsgi_userInput>
    deleteMany?: Enumerable<csgi_user_roleScalarWhereInput>
  }

  export type csgi_roleCreateNestedOneWithoutCsgi_user_roleInput = {
    create?: XOR<csgi_roleCreateWithoutCsgi_user_roleInput, csgi_roleUncheckedCreateWithoutCsgi_user_roleInput>
    connectOrCreate?: csgi_roleCreateOrConnectWithoutCsgi_user_roleInput
    connect?: csgi_roleWhereUniqueInput
  }

  export type csgi_userCreateNestedOneWithoutCsgi_user_roleInput = {
    create?: XOR<csgi_userCreateWithoutCsgi_user_roleInput, csgi_userUncheckedCreateWithoutCsgi_user_roleInput>
    connectOrCreate?: csgi_userCreateOrConnectWithoutCsgi_user_roleInput
    connect?: csgi_userWhereUniqueInput
  }

  export type csgi_roleUpdateOneRequiredWithoutCsgi_user_roleInput = {
    create?: XOR<csgi_roleCreateWithoutCsgi_user_roleInput, csgi_roleUncheckedCreateWithoutCsgi_user_roleInput>
    connectOrCreate?: csgi_roleCreateOrConnectWithoutCsgi_user_roleInput
    upsert?: csgi_roleUpsertWithoutCsgi_user_roleInput
    connect?: csgi_roleWhereUniqueInput
    update?: XOR<csgi_roleUpdateWithoutCsgi_user_roleInput, csgi_roleUncheckedUpdateWithoutCsgi_user_roleInput>
  }

  export type csgi_userUpdateOneRequiredWithoutCsgi_user_roleInput = {
    create?: XOR<csgi_userCreateWithoutCsgi_user_roleInput, csgi_userUncheckedCreateWithoutCsgi_user_roleInput>
    connectOrCreate?: csgi_userCreateOrConnectWithoutCsgi_user_roleInput
    upsert?: csgi_userUpsertWithoutCsgi_user_roleInput
    connect?: csgi_userWhereUniqueInput
    update?: XOR<csgi_userUpdateWithoutCsgi_user_roleInput, csgi_userUncheckedUpdateWithoutCsgi_user_roleInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    count?: NestedIntFilter
    avg?: NestedFloatFilter
    sum?: NestedIntFilter
    min?: NestedIntFilter
    max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    count?: NestedIntFilter
    min?: NestedStringFilter
    max?: NestedStringFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    count?: NestedIntNullableFilter
    avg?: NestedFloatNullableFilter
    sum?: NestedIntNullableFilter
    min?: NestedIntNullableFilter
    max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    count?: NestedIntFilter
    min?: NestedDateTimeFilter
    max?: NestedDateTimeFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    count?: NestedIntNullableFilter
    min?: NestedStringNullableFilter
    max?: NestedStringNullableFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    count?: NestedIntNullableFilter
    min?: NestedDateTimeNullableFilter
    max?: NestedDateTimeNullableFilter
  }

  export type csgi_gradeCreateWithoutCsgi_classInput = {
    gradecode: string
    grade: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_gradeUncheckedCreateWithoutCsgi_classInput = {
    gradeid?: number
    gradecode: string
    grade: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_gradeCreateOrConnectWithoutCsgi_classInput = {
    where: csgi_gradeWhereUniqueInput
    create: XOR<csgi_gradeCreateWithoutCsgi_classInput, csgi_gradeUncheckedCreateWithoutCsgi_classInput>
  }

  export type csgi_roomCreateWithoutCsgi_classInput = {
    roomcode: string
    room_desc?: string | null
    location?: string | null
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_roomUncheckedCreateWithoutCsgi_classInput = {
    roomid?: number
    roomcode: string
    room_desc?: string | null
    location?: string | null
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_roomCreateOrConnectWithoutCsgi_classInput = {
    where: csgi_roomWhereUniqueInput
    create: XOR<csgi_roomCreateWithoutCsgi_classInput, csgi_roomUncheckedCreateWithoutCsgi_classInput>
  }

  export type csgi_userCreateWithoutCsgi_classInput = {
    username: string
    email: string
    first_name?: string | null
    last_name: string
    password: string
    created_date?: Date | string
    created_by?: string | null
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_user_role?: csgi_user_roleCreateNestedManyWithoutCsgi_userInput
  }

  export type csgi_userUncheckedCreateWithoutCsgi_classInput = {
    userid?: number
    username: string
    email: string
    first_name?: string | null
    last_name: string
    password: string
    created_date?: Date | string
    created_by?: string | null
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_user_role?: csgi_user_roleUncheckedCreateNestedManyWithoutCsgi_userInput
  }

  export type csgi_userCreateOrConnectWithoutCsgi_classInput = {
    where: csgi_userWhereUniqueInput
    create: XOR<csgi_userCreateWithoutCsgi_classInput, csgi_userUncheckedCreateWithoutCsgi_classInput>
  }

  export type csgi_rosterCreateWithoutCsgi_classInput = {
    attended_yn?: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_period: csgi_periodCreateNestedOneWithoutCsgi_rosterInput
    csgi_student: csgi_studentCreateNestedOneWithoutCsgi_rosterInput
  }

  export type csgi_rosterUncheckedCreateWithoutCsgi_classInput = {
    rosterid?: number
    periodid: number
    studentid: number
    attended_yn?: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_rosterCreateOrConnectWithoutCsgi_classInput = {
    where: csgi_rosterWhereUniqueInput
    create: XOR<csgi_rosterCreateWithoutCsgi_classInput, csgi_rosterUncheckedCreateWithoutCsgi_classInput>
  }

  export type csgi_rosterCreateManyCsgi_classInputEnvelope = {
    data: Enumerable<csgi_rosterCreateManyCsgi_classInput>
    skipDuplicates?: boolean
  }

  export type csgi_gradeUpsertWithoutCsgi_classInput = {
    update: XOR<csgi_gradeUpdateWithoutCsgi_classInput, csgi_gradeUncheckedUpdateWithoutCsgi_classInput>
    create: XOR<csgi_gradeCreateWithoutCsgi_classInput, csgi_gradeUncheckedCreateWithoutCsgi_classInput>
  }

  export type csgi_gradeUpdateWithoutCsgi_classInput = {
    gradecode?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_gradeUncheckedUpdateWithoutCsgi_classInput = {
    gradeid?: IntFieldUpdateOperationsInput | number
    gradecode?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_roomUpsertWithoutCsgi_classInput = {
    update: XOR<csgi_roomUpdateWithoutCsgi_classInput, csgi_roomUncheckedUpdateWithoutCsgi_classInput>
    create: XOR<csgi_roomCreateWithoutCsgi_classInput, csgi_roomUncheckedCreateWithoutCsgi_classInput>
  }

  export type csgi_roomUpdateWithoutCsgi_classInput = {
    roomcode?: StringFieldUpdateOperationsInput | string
    room_desc?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_roomUncheckedUpdateWithoutCsgi_classInput = {
    roomid?: IntFieldUpdateOperationsInput | number
    roomcode?: StringFieldUpdateOperationsInput | string
    room_desc?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_userUpsertWithoutCsgi_classInput = {
    update: XOR<csgi_userUpdateWithoutCsgi_classInput, csgi_userUncheckedUpdateWithoutCsgi_classInput>
    create: XOR<csgi_userCreateWithoutCsgi_classInput, csgi_userUncheckedCreateWithoutCsgi_classInput>
  }

  export type csgi_userUpdateWithoutCsgi_classInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_user_role?: csgi_user_roleUpdateManyWithoutCsgi_userInput
  }

  export type csgi_userUncheckedUpdateWithoutCsgi_classInput = {
    userid?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_user_role?: csgi_user_roleUncheckedUpdateManyWithoutCsgi_userInput
  }

  export type csgi_rosterUpsertWithWhereUniqueWithoutCsgi_classInput = {
    where: csgi_rosterWhereUniqueInput
    update: XOR<csgi_rosterUpdateWithoutCsgi_classInput, csgi_rosterUncheckedUpdateWithoutCsgi_classInput>
    create: XOR<csgi_rosterCreateWithoutCsgi_classInput, csgi_rosterUncheckedCreateWithoutCsgi_classInput>
  }

  export type csgi_rosterUpdateWithWhereUniqueWithoutCsgi_classInput = {
    where: csgi_rosterWhereUniqueInput
    data: XOR<csgi_rosterUpdateWithoutCsgi_classInput, csgi_rosterUncheckedUpdateWithoutCsgi_classInput>
  }

  export type csgi_rosterUpdateManyWithWhereWithoutCsgi_classInput = {
    where: csgi_rosterScalarWhereInput
    data: XOR<csgi_rosterUpdateManyMutationInput, csgi_rosterUncheckedUpdateManyWithoutCsgi_rosterInput>
  }

  export type csgi_rosterScalarWhereInput = {
    AND?: Enumerable<csgi_rosterScalarWhereInput>
    OR?: Enumerable<csgi_rosterScalarWhereInput>
    NOT?: Enumerable<csgi_rosterScalarWhereInput>
    rosterid?: IntFilter | number
    classid?: IntFilter | number
    periodid?: IntFilter | number
    studentid?: IntFilter | number
    attended_yn?: StringFilter | string
    created_date?: DateTimeFilter | Date | string
    created_by?: StringFilter | string
    updated_date?: DateTimeNullableFilter | Date | string | null
    updated_by?: StringNullableFilter | string | null
  }

  export type csgi_classCreateWithoutCsgi_gradeInput = {
    classname: string
    class_desc: string
    created_date?: Date | string
    created_by?: string | null
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_room?: csgi_roomCreateNestedOneWithoutCsgi_classInput
    csgi_user?: csgi_userCreateNestedOneWithoutCsgi_classInput
    csgi_roster?: csgi_rosterCreateNestedManyWithoutCsgi_classInput
  }

  export type csgi_classUncheckedCreateWithoutCsgi_gradeInput = {
    classid?: number
    classname: string
    class_desc: string
    userid?: number | null
    roomid?: number | null
    created_date?: Date | string
    created_by?: string | null
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_roster?: csgi_rosterUncheckedCreateNestedManyWithoutCsgi_classInput
  }

  export type csgi_classCreateOrConnectWithoutCsgi_gradeInput = {
    where: csgi_classWhereUniqueInput
    create: XOR<csgi_classCreateWithoutCsgi_gradeInput, csgi_classUncheckedCreateWithoutCsgi_gradeInput>
  }

  export type csgi_classCreateManyCsgi_gradeInputEnvelope = {
    data: Enumerable<csgi_classCreateManyCsgi_gradeInput>
    skipDuplicates?: boolean
  }

  export type csgi_classUpsertWithWhereUniqueWithoutCsgi_gradeInput = {
    where: csgi_classWhereUniqueInput
    update: XOR<csgi_classUpdateWithoutCsgi_gradeInput, csgi_classUncheckedUpdateWithoutCsgi_gradeInput>
    create: XOR<csgi_classCreateWithoutCsgi_gradeInput, csgi_classUncheckedCreateWithoutCsgi_gradeInput>
  }

  export type csgi_classUpdateWithWhereUniqueWithoutCsgi_gradeInput = {
    where: csgi_classWhereUniqueInput
    data: XOR<csgi_classUpdateWithoutCsgi_gradeInput, csgi_classUncheckedUpdateWithoutCsgi_gradeInput>
  }

  export type csgi_classUpdateManyWithWhereWithoutCsgi_gradeInput = {
    where: csgi_classScalarWhereInput
    data: XOR<csgi_classUpdateManyMutationInput, csgi_classUncheckedUpdateManyWithoutCsgi_classInput>
  }

  export type csgi_classScalarWhereInput = {
    AND?: Enumerable<csgi_classScalarWhereInput>
    OR?: Enumerable<csgi_classScalarWhereInput>
    NOT?: Enumerable<csgi_classScalarWhereInput>
    classid?: IntFilter | number
    classname?: StringFilter | string
    class_desc?: StringFilter | string
    userid?: IntNullableFilter | number | null
    gradeid?: IntNullableFilter | number | null
    roomid?: IntNullableFilter | number | null
    created_date?: DateTimeFilter | Date | string
    created_by?: StringNullableFilter | string | null
    updated_date?: DateTimeNullableFilter | Date | string | null
    updated_by?: StringNullableFilter | string | null
  }

  export type csgi_menu_itemCreateWithoutCsgi_menuInput = {
    itemname: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_menu_role?: csgi_menu_roleCreateNestedManyWithoutCsgi_menu_itemInput
  }

  export type csgi_menu_itemUncheckedCreateWithoutCsgi_menuInput = {
    itemid?: number
    itemname: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_menu_role?: csgi_menu_roleUncheckedCreateNestedManyWithoutCsgi_menu_itemInput
  }

  export type csgi_menu_itemCreateOrConnectWithoutCsgi_menuInput = {
    where: csgi_menu_itemWhereUniqueInput
    create: XOR<csgi_menu_itemCreateWithoutCsgi_menuInput, csgi_menu_itemUncheckedCreateWithoutCsgi_menuInput>
  }

  export type csgi_menu_itemCreateManyCsgi_menuInputEnvelope = {
    data: Enumerable<csgi_menu_itemCreateManyCsgi_menuInput>
    skipDuplicates?: boolean
  }

  export type csgi_menu_itemUpsertWithWhereUniqueWithoutCsgi_menuInput = {
    where: csgi_menu_itemWhereUniqueInput
    update: XOR<csgi_menu_itemUpdateWithoutCsgi_menuInput, csgi_menu_itemUncheckedUpdateWithoutCsgi_menuInput>
    create: XOR<csgi_menu_itemCreateWithoutCsgi_menuInput, csgi_menu_itemUncheckedCreateWithoutCsgi_menuInput>
  }

  export type csgi_menu_itemUpdateWithWhereUniqueWithoutCsgi_menuInput = {
    where: csgi_menu_itemWhereUniqueInput
    data: XOR<csgi_menu_itemUpdateWithoutCsgi_menuInput, csgi_menu_itemUncheckedUpdateWithoutCsgi_menuInput>
  }

  export type csgi_menu_itemUpdateManyWithWhereWithoutCsgi_menuInput = {
    where: csgi_menu_itemScalarWhereInput
    data: XOR<csgi_menu_itemUpdateManyMutationInput, csgi_menu_itemUncheckedUpdateManyWithoutCsgi_menu_itemInput>
  }

  export type csgi_menu_itemScalarWhereInput = {
    AND?: Enumerable<csgi_menu_itemScalarWhereInput>
    OR?: Enumerable<csgi_menu_itemScalarWhereInput>
    NOT?: Enumerable<csgi_menu_itemScalarWhereInput>
    itemid?: IntFilter | number
    itemname?: StringFilter | string
    menuid?: IntNullableFilter | number | null
    created_date?: DateTimeFilter | Date | string
    created_by?: StringFilter | string
    updated_date?: DateTimeNullableFilter | Date | string | null
    updated_by?: StringNullableFilter | string | null
  }

  export type csgi_menuCreateWithoutCsgi_menu_itemInput = {
    menuname: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_menuUncheckedCreateWithoutCsgi_menu_itemInput = {
    menuid?: number
    menuname: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_menuCreateOrConnectWithoutCsgi_menu_itemInput = {
    where: csgi_menuWhereUniqueInput
    create: XOR<csgi_menuCreateWithoutCsgi_menu_itemInput, csgi_menuUncheckedCreateWithoutCsgi_menu_itemInput>
  }

  export type csgi_menu_roleCreateWithoutCsgi_menu_itemInput = {
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_role: csgi_roleCreateNestedOneWithoutCsgi_menu_roleInput
  }

  export type csgi_menu_roleUncheckedCreateWithoutCsgi_menu_itemInput = {
    menu_roleid?: number
    roleid: number
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_menu_roleCreateOrConnectWithoutCsgi_menu_itemInput = {
    where: csgi_menu_roleWhereUniqueInput
    create: XOR<csgi_menu_roleCreateWithoutCsgi_menu_itemInput, csgi_menu_roleUncheckedCreateWithoutCsgi_menu_itemInput>
  }

  export type csgi_menu_roleCreateManyCsgi_menu_itemInputEnvelope = {
    data: Enumerable<csgi_menu_roleCreateManyCsgi_menu_itemInput>
    skipDuplicates?: boolean
  }

  export type csgi_menuUpsertWithoutCsgi_menu_itemInput = {
    update: XOR<csgi_menuUpdateWithoutCsgi_menu_itemInput, csgi_menuUncheckedUpdateWithoutCsgi_menu_itemInput>
    create: XOR<csgi_menuCreateWithoutCsgi_menu_itemInput, csgi_menuUncheckedCreateWithoutCsgi_menu_itemInput>
  }

  export type csgi_menuUpdateWithoutCsgi_menu_itemInput = {
    menuname?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_menuUncheckedUpdateWithoutCsgi_menu_itemInput = {
    menuid?: IntFieldUpdateOperationsInput | number
    menuname?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_menu_roleUpsertWithWhereUniqueWithoutCsgi_menu_itemInput = {
    where: csgi_menu_roleWhereUniqueInput
    update: XOR<csgi_menu_roleUpdateWithoutCsgi_menu_itemInput, csgi_menu_roleUncheckedUpdateWithoutCsgi_menu_itemInput>
    create: XOR<csgi_menu_roleCreateWithoutCsgi_menu_itemInput, csgi_menu_roleUncheckedCreateWithoutCsgi_menu_itemInput>
  }

  export type csgi_menu_roleUpdateWithWhereUniqueWithoutCsgi_menu_itemInput = {
    where: csgi_menu_roleWhereUniqueInput
    data: XOR<csgi_menu_roleUpdateWithoutCsgi_menu_itemInput, csgi_menu_roleUncheckedUpdateWithoutCsgi_menu_itemInput>
  }

  export type csgi_menu_roleUpdateManyWithWhereWithoutCsgi_menu_itemInput = {
    where: csgi_menu_roleScalarWhereInput
    data: XOR<csgi_menu_roleUpdateManyMutationInput, csgi_menu_roleUncheckedUpdateManyWithoutCsgi_menu_roleInput>
  }

  export type csgi_menu_roleScalarWhereInput = {
    AND?: Enumerable<csgi_menu_roleScalarWhereInput>
    OR?: Enumerable<csgi_menu_roleScalarWhereInput>
    NOT?: Enumerable<csgi_menu_roleScalarWhereInput>
    menu_roleid?: IntFilter | number
    roleid?: IntFilter | number
    itemid?: IntFilter | number
    created_date?: DateTimeFilter | Date | string
    created_by?: StringFilter | string
    updated_date?: DateTimeNullableFilter | Date | string | null
    updated_by?: StringNullableFilter | string | null
  }

  export type csgi_menu_itemCreateWithoutCsgi_menu_roleInput = {
    itemname: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_menu?: csgi_menuCreateNestedOneWithoutCsgi_menu_itemInput
  }

  export type csgi_menu_itemUncheckedCreateWithoutCsgi_menu_roleInput = {
    itemid?: number
    itemname: string
    menuid?: number | null
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_menu_itemCreateOrConnectWithoutCsgi_menu_roleInput = {
    where: csgi_menu_itemWhereUniqueInput
    create: XOR<csgi_menu_itemCreateWithoutCsgi_menu_roleInput, csgi_menu_itemUncheckedCreateWithoutCsgi_menu_roleInput>
  }

  export type csgi_roleCreateWithoutCsgi_menu_roleInput = {
    role: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_user_role?: csgi_user_roleCreateNestedManyWithoutCsgi_roleInput
  }

  export type csgi_roleUncheckedCreateWithoutCsgi_menu_roleInput = {
    roleid?: number
    role: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_user_role?: csgi_user_roleUncheckedCreateNestedManyWithoutCsgi_roleInput
  }

  export type csgi_roleCreateOrConnectWithoutCsgi_menu_roleInput = {
    where: csgi_roleWhereUniqueInput
    create: XOR<csgi_roleCreateWithoutCsgi_menu_roleInput, csgi_roleUncheckedCreateWithoutCsgi_menu_roleInput>
  }

  export type csgi_menu_itemUpsertWithoutCsgi_menu_roleInput = {
    update: XOR<csgi_menu_itemUpdateWithoutCsgi_menu_roleInput, csgi_menu_itemUncheckedUpdateWithoutCsgi_menu_roleInput>
    create: XOR<csgi_menu_itemCreateWithoutCsgi_menu_roleInput, csgi_menu_itemUncheckedCreateWithoutCsgi_menu_roleInput>
  }

  export type csgi_menu_itemUpdateWithoutCsgi_menu_roleInput = {
    itemname?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_menu?: csgi_menuUpdateOneWithoutCsgi_menu_itemInput
  }

  export type csgi_menu_itemUncheckedUpdateWithoutCsgi_menu_roleInput = {
    itemid?: IntFieldUpdateOperationsInput | number
    itemname?: StringFieldUpdateOperationsInput | string
    menuid?: NullableIntFieldUpdateOperationsInput | number | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_roleUpsertWithoutCsgi_menu_roleInput = {
    update: XOR<csgi_roleUpdateWithoutCsgi_menu_roleInput, csgi_roleUncheckedUpdateWithoutCsgi_menu_roleInput>
    create: XOR<csgi_roleCreateWithoutCsgi_menu_roleInput, csgi_roleUncheckedCreateWithoutCsgi_menu_roleInput>
  }

  export type csgi_roleUpdateWithoutCsgi_menu_roleInput = {
    role?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_user_role?: csgi_user_roleUpdateManyWithoutCsgi_roleInput
  }

  export type csgi_roleUncheckedUpdateWithoutCsgi_menu_roleInput = {
    roleid?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_user_role?: csgi_user_roleUncheckedUpdateManyWithoutCsgi_roleInput
  }

  export type csgi_rosterCreateWithoutCsgi_periodInput = {
    attended_yn?: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_class: csgi_classCreateNestedOneWithoutCsgi_rosterInput
    csgi_student: csgi_studentCreateNestedOneWithoutCsgi_rosterInput
  }

  export type csgi_rosterUncheckedCreateWithoutCsgi_periodInput = {
    rosterid?: number
    classid: number
    studentid: number
    attended_yn?: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_rosterCreateOrConnectWithoutCsgi_periodInput = {
    where: csgi_rosterWhereUniqueInput
    create: XOR<csgi_rosterCreateWithoutCsgi_periodInput, csgi_rosterUncheckedCreateWithoutCsgi_periodInput>
  }

  export type csgi_rosterCreateManyCsgi_periodInputEnvelope = {
    data: Enumerable<csgi_rosterCreateManyCsgi_periodInput>
    skipDuplicates?: boolean
  }

  export type csgi_rosterUpsertWithWhereUniqueWithoutCsgi_periodInput = {
    where: csgi_rosterWhereUniqueInput
    update: XOR<csgi_rosterUpdateWithoutCsgi_periodInput, csgi_rosterUncheckedUpdateWithoutCsgi_periodInput>
    create: XOR<csgi_rosterCreateWithoutCsgi_periodInput, csgi_rosterUncheckedCreateWithoutCsgi_periodInput>
  }

  export type csgi_rosterUpdateWithWhereUniqueWithoutCsgi_periodInput = {
    where: csgi_rosterWhereUniqueInput
    data: XOR<csgi_rosterUpdateWithoutCsgi_periodInput, csgi_rosterUncheckedUpdateWithoutCsgi_periodInput>
  }

  export type csgi_rosterUpdateManyWithWhereWithoutCsgi_periodInput = {
    where: csgi_rosterScalarWhereInput
    data: XOR<csgi_rosterUpdateManyMutationInput, csgi_rosterUncheckedUpdateManyWithoutCsgi_rosterInput>
  }

  export type csgi_menu_roleCreateWithoutCsgi_roleInput = {
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_menu_item: csgi_menu_itemCreateNestedOneWithoutCsgi_menu_roleInput
  }

  export type csgi_menu_roleUncheckedCreateWithoutCsgi_roleInput = {
    menu_roleid?: number
    itemid: number
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_menu_roleCreateOrConnectWithoutCsgi_roleInput = {
    where: csgi_menu_roleWhereUniqueInput
    create: XOR<csgi_menu_roleCreateWithoutCsgi_roleInput, csgi_menu_roleUncheckedCreateWithoutCsgi_roleInput>
  }

  export type csgi_menu_roleCreateManyCsgi_roleInputEnvelope = {
    data: Enumerable<csgi_menu_roleCreateManyCsgi_roleInput>
    skipDuplicates?: boolean
  }

  export type csgi_user_roleCreateWithoutCsgi_roleInput = {
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_user: csgi_userCreateNestedOneWithoutCsgi_user_roleInput
  }

  export type csgi_user_roleUncheckedCreateWithoutCsgi_roleInput = {
    user_roleid?: number
    userid: number
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_user_roleCreateOrConnectWithoutCsgi_roleInput = {
    where: csgi_user_roleWhereUniqueInput
    create: XOR<csgi_user_roleCreateWithoutCsgi_roleInput, csgi_user_roleUncheckedCreateWithoutCsgi_roleInput>
  }

  export type csgi_user_roleCreateManyCsgi_roleInputEnvelope = {
    data: Enumerable<csgi_user_roleCreateManyCsgi_roleInput>
    skipDuplicates?: boolean
  }

  export type csgi_menu_roleUpsertWithWhereUniqueWithoutCsgi_roleInput = {
    where: csgi_menu_roleWhereUniqueInput
    update: XOR<csgi_menu_roleUpdateWithoutCsgi_roleInput, csgi_menu_roleUncheckedUpdateWithoutCsgi_roleInput>
    create: XOR<csgi_menu_roleCreateWithoutCsgi_roleInput, csgi_menu_roleUncheckedCreateWithoutCsgi_roleInput>
  }

  export type csgi_menu_roleUpdateWithWhereUniqueWithoutCsgi_roleInput = {
    where: csgi_menu_roleWhereUniqueInput
    data: XOR<csgi_menu_roleUpdateWithoutCsgi_roleInput, csgi_menu_roleUncheckedUpdateWithoutCsgi_roleInput>
  }

  export type csgi_menu_roleUpdateManyWithWhereWithoutCsgi_roleInput = {
    where: csgi_menu_roleScalarWhereInput
    data: XOR<csgi_menu_roleUpdateManyMutationInput, csgi_menu_roleUncheckedUpdateManyWithoutCsgi_menu_roleInput>
  }

  export type csgi_user_roleUpsertWithWhereUniqueWithoutCsgi_roleInput = {
    where: csgi_user_roleWhereUniqueInput
    update: XOR<csgi_user_roleUpdateWithoutCsgi_roleInput, csgi_user_roleUncheckedUpdateWithoutCsgi_roleInput>
    create: XOR<csgi_user_roleCreateWithoutCsgi_roleInput, csgi_user_roleUncheckedCreateWithoutCsgi_roleInput>
  }

  export type csgi_user_roleUpdateWithWhereUniqueWithoutCsgi_roleInput = {
    where: csgi_user_roleWhereUniqueInput
    data: XOR<csgi_user_roleUpdateWithoutCsgi_roleInput, csgi_user_roleUncheckedUpdateWithoutCsgi_roleInput>
  }

  export type csgi_user_roleUpdateManyWithWhereWithoutCsgi_roleInput = {
    where: csgi_user_roleScalarWhereInput
    data: XOR<csgi_user_roleUpdateManyMutationInput, csgi_user_roleUncheckedUpdateManyWithoutCsgi_user_roleInput>
  }

  export type csgi_user_roleScalarWhereInput = {
    AND?: Enumerable<csgi_user_roleScalarWhereInput>
    OR?: Enumerable<csgi_user_roleScalarWhereInput>
    NOT?: Enumerable<csgi_user_roleScalarWhereInput>
    user_roleid?: IntFilter | number
    userid?: IntFilter | number
    roleid?: IntFilter | number
    created_date?: DateTimeFilter | Date | string
    created_by?: StringFilter | string
    updated_date?: DateTimeNullableFilter | Date | string | null
    updated_by?: StringNullableFilter | string | null
  }

  export type csgi_classCreateWithoutCsgi_roomInput = {
    classname: string
    class_desc: string
    created_date?: Date | string
    created_by?: string | null
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_grade?: csgi_gradeCreateNestedOneWithoutCsgi_classInput
    csgi_user?: csgi_userCreateNestedOneWithoutCsgi_classInput
    csgi_roster?: csgi_rosterCreateNestedManyWithoutCsgi_classInput
  }

  export type csgi_classUncheckedCreateWithoutCsgi_roomInput = {
    classid?: number
    classname: string
    class_desc: string
    userid?: number | null
    gradeid?: number | null
    created_date?: Date | string
    created_by?: string | null
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_roster?: csgi_rosterUncheckedCreateNestedManyWithoutCsgi_classInput
  }

  export type csgi_classCreateOrConnectWithoutCsgi_roomInput = {
    where: csgi_classWhereUniqueInput
    create: XOR<csgi_classCreateWithoutCsgi_roomInput, csgi_classUncheckedCreateWithoutCsgi_roomInput>
  }

  export type csgi_classCreateManyCsgi_roomInputEnvelope = {
    data: Enumerable<csgi_classCreateManyCsgi_roomInput>
    skipDuplicates?: boolean
  }

  export type csgi_classUpsertWithWhereUniqueWithoutCsgi_roomInput = {
    where: csgi_classWhereUniqueInput
    update: XOR<csgi_classUpdateWithoutCsgi_roomInput, csgi_classUncheckedUpdateWithoutCsgi_roomInput>
    create: XOR<csgi_classCreateWithoutCsgi_roomInput, csgi_classUncheckedCreateWithoutCsgi_roomInput>
  }

  export type csgi_classUpdateWithWhereUniqueWithoutCsgi_roomInput = {
    where: csgi_classWhereUniqueInput
    data: XOR<csgi_classUpdateWithoutCsgi_roomInput, csgi_classUncheckedUpdateWithoutCsgi_roomInput>
  }

  export type csgi_classUpdateManyWithWhereWithoutCsgi_roomInput = {
    where: csgi_classScalarWhereInput
    data: XOR<csgi_classUpdateManyMutationInput, csgi_classUncheckedUpdateManyWithoutCsgi_classInput>
  }

  export type csgi_classCreateWithoutCsgi_rosterInput = {
    classname: string
    class_desc: string
    created_date?: Date | string
    created_by?: string | null
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_grade?: csgi_gradeCreateNestedOneWithoutCsgi_classInput
    csgi_room?: csgi_roomCreateNestedOneWithoutCsgi_classInput
    csgi_user?: csgi_userCreateNestedOneWithoutCsgi_classInput
  }

  export type csgi_classUncheckedCreateWithoutCsgi_rosterInput = {
    classid?: number
    classname: string
    class_desc: string
    userid?: number | null
    gradeid?: number | null
    roomid?: number | null
    created_date?: Date | string
    created_by?: string | null
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_classCreateOrConnectWithoutCsgi_rosterInput = {
    where: csgi_classWhereUniqueInput
    create: XOR<csgi_classCreateWithoutCsgi_rosterInput, csgi_classUncheckedCreateWithoutCsgi_rosterInput>
  }

  export type csgi_periodCreateWithoutCsgi_rosterInput = {
    periodname: string
    period_desc?: string | null
    period_start: Date | string
    period_end: Date | string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    period_date?: Date | string | null
  }

  export type csgi_periodUncheckedCreateWithoutCsgi_rosterInput = {
    periodid?: number
    periodname: string
    period_desc?: string | null
    period_start: Date | string
    period_end: Date | string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    period_date?: Date | string | null
  }

  export type csgi_periodCreateOrConnectWithoutCsgi_rosterInput = {
    where: csgi_periodWhereUniqueInput
    create: XOR<csgi_periodCreateWithoutCsgi_rosterInput, csgi_periodUncheckedCreateWithoutCsgi_rosterInput>
  }

  export type csgi_studentCreateWithoutCsgi_rosterInput = {
    student_name?: string | null
    last_name: string
    date_of_birth?: Date | string | null
    gender?: string | null
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_studentUncheckedCreateWithoutCsgi_rosterInput = {
    studentid?: number
    student_name?: string | null
    last_name: string
    date_of_birth?: Date | string | null
    gender?: string | null
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_studentCreateOrConnectWithoutCsgi_rosterInput = {
    where: csgi_studentWhereUniqueInput
    create: XOR<csgi_studentCreateWithoutCsgi_rosterInput, csgi_studentUncheckedCreateWithoutCsgi_rosterInput>
  }

  export type csgi_classUpsertWithoutCsgi_rosterInput = {
    update: XOR<csgi_classUpdateWithoutCsgi_rosterInput, csgi_classUncheckedUpdateWithoutCsgi_rosterInput>
    create: XOR<csgi_classCreateWithoutCsgi_rosterInput, csgi_classUncheckedCreateWithoutCsgi_rosterInput>
  }

  export type csgi_classUpdateWithoutCsgi_rosterInput = {
    classname?: StringFieldUpdateOperationsInput | string
    class_desc?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_grade?: csgi_gradeUpdateOneWithoutCsgi_classInput
    csgi_room?: csgi_roomUpdateOneWithoutCsgi_classInput
    csgi_user?: csgi_userUpdateOneWithoutCsgi_classInput
  }

  export type csgi_classUncheckedUpdateWithoutCsgi_rosterInput = {
    classid?: IntFieldUpdateOperationsInput | number
    classname?: StringFieldUpdateOperationsInput | string
    class_desc?: StringFieldUpdateOperationsInput | string
    userid?: NullableIntFieldUpdateOperationsInput | number | null
    gradeid?: NullableIntFieldUpdateOperationsInput | number | null
    roomid?: NullableIntFieldUpdateOperationsInput | number | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_periodUpsertWithoutCsgi_rosterInput = {
    update: XOR<csgi_periodUpdateWithoutCsgi_rosterInput, csgi_periodUncheckedUpdateWithoutCsgi_rosterInput>
    create: XOR<csgi_periodCreateWithoutCsgi_rosterInput, csgi_periodUncheckedCreateWithoutCsgi_rosterInput>
  }

  export type csgi_periodUpdateWithoutCsgi_rosterInput = {
    periodname?: StringFieldUpdateOperationsInput | string
    period_desc?: NullableStringFieldUpdateOperationsInput | string | null
    period_start?: DateTimeFieldUpdateOperationsInput | Date | string
    period_end?: DateTimeFieldUpdateOperationsInput | Date | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    period_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type csgi_periodUncheckedUpdateWithoutCsgi_rosterInput = {
    periodid?: IntFieldUpdateOperationsInput | number
    periodname?: StringFieldUpdateOperationsInput | string
    period_desc?: NullableStringFieldUpdateOperationsInput | string | null
    period_start?: DateTimeFieldUpdateOperationsInput | Date | string
    period_end?: DateTimeFieldUpdateOperationsInput | Date | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    period_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type csgi_studentUpsertWithoutCsgi_rosterInput = {
    update: XOR<csgi_studentUpdateWithoutCsgi_rosterInput, csgi_studentUncheckedUpdateWithoutCsgi_rosterInput>
    create: XOR<csgi_studentCreateWithoutCsgi_rosterInput, csgi_studentUncheckedCreateWithoutCsgi_rosterInput>
  }

  export type csgi_studentUpdateWithoutCsgi_rosterInput = {
    student_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_studentUncheckedUpdateWithoutCsgi_rosterInput = {
    studentid?: IntFieldUpdateOperationsInput | number
    student_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_rosterCreateWithoutCsgi_studentInput = {
    attended_yn?: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_class: csgi_classCreateNestedOneWithoutCsgi_rosterInput
    csgi_period: csgi_periodCreateNestedOneWithoutCsgi_rosterInput
  }

  export type csgi_rosterUncheckedCreateWithoutCsgi_studentInput = {
    rosterid?: number
    classid: number
    periodid: number
    attended_yn?: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_rosterCreateOrConnectWithoutCsgi_studentInput = {
    where: csgi_rosterWhereUniqueInput
    create: XOR<csgi_rosterCreateWithoutCsgi_studentInput, csgi_rosterUncheckedCreateWithoutCsgi_studentInput>
  }

  export type csgi_rosterCreateManyCsgi_studentInputEnvelope = {
    data: Enumerable<csgi_rosterCreateManyCsgi_studentInput>
    skipDuplicates?: boolean
  }

  export type csgi_rosterUpsertWithWhereUniqueWithoutCsgi_studentInput = {
    where: csgi_rosterWhereUniqueInput
    update: XOR<csgi_rosterUpdateWithoutCsgi_studentInput, csgi_rosterUncheckedUpdateWithoutCsgi_studentInput>
    create: XOR<csgi_rosterCreateWithoutCsgi_studentInput, csgi_rosterUncheckedCreateWithoutCsgi_studentInput>
  }

  export type csgi_rosterUpdateWithWhereUniqueWithoutCsgi_studentInput = {
    where: csgi_rosterWhereUniqueInput
    data: XOR<csgi_rosterUpdateWithoutCsgi_studentInput, csgi_rosterUncheckedUpdateWithoutCsgi_studentInput>
  }

  export type csgi_rosterUpdateManyWithWhereWithoutCsgi_studentInput = {
    where: csgi_rosterScalarWhereInput
    data: XOR<csgi_rosterUpdateManyMutationInput, csgi_rosterUncheckedUpdateManyWithoutCsgi_rosterInput>
  }

  export type csgi_classCreateWithoutCsgi_userInput = {
    classname: string
    class_desc: string
    created_date?: Date | string
    created_by?: string | null
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_grade?: csgi_gradeCreateNestedOneWithoutCsgi_classInput
    csgi_room?: csgi_roomCreateNestedOneWithoutCsgi_classInput
    csgi_roster?: csgi_rosterCreateNestedManyWithoutCsgi_classInput
  }

  export type csgi_classUncheckedCreateWithoutCsgi_userInput = {
    classid?: number
    classname: string
    class_desc: string
    gradeid?: number | null
    roomid?: number | null
    created_date?: Date | string
    created_by?: string | null
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_roster?: csgi_rosterUncheckedCreateNestedManyWithoutCsgi_classInput
  }

  export type csgi_classCreateOrConnectWithoutCsgi_userInput = {
    where: csgi_classWhereUniqueInput
    create: XOR<csgi_classCreateWithoutCsgi_userInput, csgi_classUncheckedCreateWithoutCsgi_userInput>
  }

  export type csgi_classCreateManyCsgi_userInputEnvelope = {
    data: Enumerable<csgi_classCreateManyCsgi_userInput>
    skipDuplicates?: boolean
  }

  export type csgi_user_roleCreateWithoutCsgi_userInput = {
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_role: csgi_roleCreateNestedOneWithoutCsgi_user_roleInput
  }

  export type csgi_user_roleUncheckedCreateWithoutCsgi_userInput = {
    user_roleid?: number
    roleid: number
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_user_roleCreateOrConnectWithoutCsgi_userInput = {
    where: csgi_user_roleWhereUniqueInput
    create: XOR<csgi_user_roleCreateWithoutCsgi_userInput, csgi_user_roleUncheckedCreateWithoutCsgi_userInput>
  }

  export type csgi_user_roleCreateManyCsgi_userInputEnvelope = {
    data: Enumerable<csgi_user_roleCreateManyCsgi_userInput>
    skipDuplicates?: boolean
  }

  export type csgi_classUpsertWithWhereUniqueWithoutCsgi_userInput = {
    where: csgi_classWhereUniqueInput
    update: XOR<csgi_classUpdateWithoutCsgi_userInput, csgi_classUncheckedUpdateWithoutCsgi_userInput>
    create: XOR<csgi_classCreateWithoutCsgi_userInput, csgi_classUncheckedCreateWithoutCsgi_userInput>
  }

  export type csgi_classUpdateWithWhereUniqueWithoutCsgi_userInput = {
    where: csgi_classWhereUniqueInput
    data: XOR<csgi_classUpdateWithoutCsgi_userInput, csgi_classUncheckedUpdateWithoutCsgi_userInput>
  }

  export type csgi_classUpdateManyWithWhereWithoutCsgi_userInput = {
    where: csgi_classScalarWhereInput
    data: XOR<csgi_classUpdateManyMutationInput, csgi_classUncheckedUpdateManyWithoutCsgi_classInput>
  }

  export type csgi_user_roleUpsertWithWhereUniqueWithoutCsgi_userInput = {
    where: csgi_user_roleWhereUniqueInput
    update: XOR<csgi_user_roleUpdateWithoutCsgi_userInput, csgi_user_roleUncheckedUpdateWithoutCsgi_userInput>
    create: XOR<csgi_user_roleCreateWithoutCsgi_userInput, csgi_user_roleUncheckedCreateWithoutCsgi_userInput>
  }

  export type csgi_user_roleUpdateWithWhereUniqueWithoutCsgi_userInput = {
    where: csgi_user_roleWhereUniqueInput
    data: XOR<csgi_user_roleUpdateWithoutCsgi_userInput, csgi_user_roleUncheckedUpdateWithoutCsgi_userInput>
  }

  export type csgi_user_roleUpdateManyWithWhereWithoutCsgi_userInput = {
    where: csgi_user_roleScalarWhereInput
    data: XOR<csgi_user_roleUpdateManyMutationInput, csgi_user_roleUncheckedUpdateManyWithoutCsgi_user_roleInput>
  }

  export type csgi_roleCreateWithoutCsgi_user_roleInput = {
    role: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_menu_role?: csgi_menu_roleCreateNestedManyWithoutCsgi_roleInput
  }

  export type csgi_roleUncheckedCreateWithoutCsgi_user_roleInput = {
    roleid?: number
    role: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_menu_role?: csgi_menu_roleUncheckedCreateNestedManyWithoutCsgi_roleInput
  }

  export type csgi_roleCreateOrConnectWithoutCsgi_user_roleInput = {
    where: csgi_roleWhereUniqueInput
    create: XOR<csgi_roleCreateWithoutCsgi_user_roleInput, csgi_roleUncheckedCreateWithoutCsgi_user_roleInput>
  }

  export type csgi_userCreateWithoutCsgi_user_roleInput = {
    username: string
    email: string
    first_name?: string | null
    last_name: string
    password: string
    created_date?: Date | string
    created_by?: string | null
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_class?: csgi_classCreateNestedManyWithoutCsgi_userInput
  }

  export type csgi_userUncheckedCreateWithoutCsgi_user_roleInput = {
    userid?: number
    username: string
    email: string
    first_name?: string | null
    last_name: string
    password: string
    created_date?: Date | string
    created_by?: string | null
    updated_date?: Date | string | null
    updated_by?: string | null
    csgi_class?: csgi_classUncheckedCreateNestedManyWithoutCsgi_userInput
  }

  export type csgi_userCreateOrConnectWithoutCsgi_user_roleInput = {
    where: csgi_userWhereUniqueInput
    create: XOR<csgi_userCreateWithoutCsgi_user_roleInput, csgi_userUncheckedCreateWithoutCsgi_user_roleInput>
  }

  export type csgi_roleUpsertWithoutCsgi_user_roleInput = {
    update: XOR<csgi_roleUpdateWithoutCsgi_user_roleInput, csgi_roleUncheckedUpdateWithoutCsgi_user_roleInput>
    create: XOR<csgi_roleCreateWithoutCsgi_user_roleInput, csgi_roleUncheckedCreateWithoutCsgi_user_roleInput>
  }

  export type csgi_roleUpdateWithoutCsgi_user_roleInput = {
    role?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_menu_role?: csgi_menu_roleUpdateManyWithoutCsgi_roleInput
  }

  export type csgi_roleUncheckedUpdateWithoutCsgi_user_roleInput = {
    roleid?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_menu_role?: csgi_menu_roleUncheckedUpdateManyWithoutCsgi_roleInput
  }

  export type csgi_userUpsertWithoutCsgi_user_roleInput = {
    update: XOR<csgi_userUpdateWithoutCsgi_user_roleInput, csgi_userUncheckedUpdateWithoutCsgi_user_roleInput>
    create: XOR<csgi_userCreateWithoutCsgi_user_roleInput, csgi_userUncheckedCreateWithoutCsgi_user_roleInput>
  }

  export type csgi_userUpdateWithoutCsgi_user_roleInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_class?: csgi_classUpdateManyWithoutCsgi_userInput
  }

  export type csgi_userUncheckedUpdateWithoutCsgi_user_roleInput = {
    userid?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_class?: csgi_classUncheckedUpdateManyWithoutCsgi_userInput
  }

  export type csgi_rosterCreateManyCsgi_classInput = {
    rosterid?: number
    periodid: number
    studentid: number
    attended_yn?: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_rosterUpdateWithoutCsgi_classInput = {
    attended_yn?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_period?: csgi_periodUpdateOneRequiredWithoutCsgi_rosterInput
    csgi_student?: csgi_studentUpdateOneRequiredWithoutCsgi_rosterInput
  }

  export type csgi_rosterUncheckedUpdateWithoutCsgi_classInput = {
    rosterid?: IntFieldUpdateOperationsInput | number
    periodid?: IntFieldUpdateOperationsInput | number
    studentid?: IntFieldUpdateOperationsInput | number
    attended_yn?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_rosterUncheckedUpdateManyWithoutCsgi_rosterInput = {
    rosterid?: IntFieldUpdateOperationsInput | number
    periodid?: IntFieldUpdateOperationsInput | number
    studentid?: IntFieldUpdateOperationsInput | number
    attended_yn?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_classCreateManyCsgi_gradeInput = {
    classid?: number
    classname: string
    class_desc: string
    userid?: number | null
    roomid?: number | null
    created_date?: Date | string
    created_by?: string | null
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_classUpdateWithoutCsgi_gradeInput = {
    classname?: StringFieldUpdateOperationsInput | string
    class_desc?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_room?: csgi_roomUpdateOneWithoutCsgi_classInput
    csgi_user?: csgi_userUpdateOneWithoutCsgi_classInput
    csgi_roster?: csgi_rosterUpdateManyWithoutCsgi_classInput
  }

  export type csgi_classUncheckedUpdateWithoutCsgi_gradeInput = {
    classid?: IntFieldUpdateOperationsInput | number
    classname?: StringFieldUpdateOperationsInput | string
    class_desc?: StringFieldUpdateOperationsInput | string
    userid?: NullableIntFieldUpdateOperationsInput | number | null
    roomid?: NullableIntFieldUpdateOperationsInput | number | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_roster?: csgi_rosterUncheckedUpdateManyWithoutCsgi_classInput
  }

  export type csgi_classUncheckedUpdateManyWithoutCsgi_classInput = {
    classid?: IntFieldUpdateOperationsInput | number
    classname?: StringFieldUpdateOperationsInput | string
    class_desc?: StringFieldUpdateOperationsInput | string
    userid?: NullableIntFieldUpdateOperationsInput | number | null
    roomid?: NullableIntFieldUpdateOperationsInput | number | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_menu_itemCreateManyCsgi_menuInput = {
    itemid?: number
    itemname: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_menu_itemUpdateWithoutCsgi_menuInput = {
    itemname?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_menu_role?: csgi_menu_roleUpdateManyWithoutCsgi_menu_itemInput
  }

  export type csgi_menu_itemUncheckedUpdateWithoutCsgi_menuInput = {
    itemid?: IntFieldUpdateOperationsInput | number
    itemname?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_menu_role?: csgi_menu_roleUncheckedUpdateManyWithoutCsgi_menu_itemInput
  }

  export type csgi_menu_itemUncheckedUpdateManyWithoutCsgi_menu_itemInput = {
    itemid?: IntFieldUpdateOperationsInput | number
    itemname?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_menu_roleCreateManyCsgi_menu_itemInput = {
    menu_roleid?: number
    roleid: number
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_menu_roleUpdateWithoutCsgi_menu_itemInput = {
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_role?: csgi_roleUpdateOneRequiredWithoutCsgi_menu_roleInput
  }

  export type csgi_menu_roleUncheckedUpdateWithoutCsgi_menu_itemInput = {
    menu_roleid?: IntFieldUpdateOperationsInput | number
    roleid?: IntFieldUpdateOperationsInput | number
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_menu_roleUncheckedUpdateManyWithoutCsgi_menu_roleInput = {
    menu_roleid?: IntFieldUpdateOperationsInput | number
    roleid?: IntFieldUpdateOperationsInput | number
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_rosterCreateManyCsgi_periodInput = {
    rosterid?: number
    classid: number
    studentid: number
    attended_yn?: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_rosterUpdateWithoutCsgi_periodInput = {
    attended_yn?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_class?: csgi_classUpdateOneRequiredWithoutCsgi_rosterInput
    csgi_student?: csgi_studentUpdateOneRequiredWithoutCsgi_rosterInput
  }

  export type csgi_rosterUncheckedUpdateWithoutCsgi_periodInput = {
    rosterid?: IntFieldUpdateOperationsInput | number
    classid?: IntFieldUpdateOperationsInput | number
    studentid?: IntFieldUpdateOperationsInput | number
    attended_yn?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_menu_roleCreateManyCsgi_roleInput = {
    menu_roleid?: number
    itemid: number
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_user_roleCreateManyCsgi_roleInput = {
    user_roleid?: number
    userid: number
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_menu_roleUpdateWithoutCsgi_roleInput = {
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_menu_item?: csgi_menu_itemUpdateOneRequiredWithoutCsgi_menu_roleInput
  }

  export type csgi_menu_roleUncheckedUpdateWithoutCsgi_roleInput = {
    menu_roleid?: IntFieldUpdateOperationsInput | number
    itemid?: IntFieldUpdateOperationsInput | number
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_user_roleUpdateWithoutCsgi_roleInput = {
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_user?: csgi_userUpdateOneRequiredWithoutCsgi_user_roleInput
  }

  export type csgi_user_roleUncheckedUpdateWithoutCsgi_roleInput = {
    user_roleid?: IntFieldUpdateOperationsInput | number
    userid?: IntFieldUpdateOperationsInput | number
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_user_roleUncheckedUpdateManyWithoutCsgi_user_roleInput = {
    user_roleid?: IntFieldUpdateOperationsInput | number
    userid?: IntFieldUpdateOperationsInput | number
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_classCreateManyCsgi_roomInput = {
    classid?: number
    classname: string
    class_desc: string
    userid?: number | null
    gradeid?: number | null
    created_date?: Date | string
    created_by?: string | null
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_classUpdateWithoutCsgi_roomInput = {
    classname?: StringFieldUpdateOperationsInput | string
    class_desc?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_grade?: csgi_gradeUpdateOneWithoutCsgi_classInput
    csgi_user?: csgi_userUpdateOneWithoutCsgi_classInput
    csgi_roster?: csgi_rosterUpdateManyWithoutCsgi_classInput
  }

  export type csgi_classUncheckedUpdateWithoutCsgi_roomInput = {
    classid?: IntFieldUpdateOperationsInput | number
    classname?: StringFieldUpdateOperationsInput | string
    class_desc?: StringFieldUpdateOperationsInput | string
    userid?: NullableIntFieldUpdateOperationsInput | number | null
    gradeid?: NullableIntFieldUpdateOperationsInput | number | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_roster?: csgi_rosterUncheckedUpdateManyWithoutCsgi_classInput
  }

  export type csgi_rosterCreateManyCsgi_studentInput = {
    rosterid?: number
    classid: number
    periodid: number
    attended_yn?: string
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_rosterUpdateWithoutCsgi_studentInput = {
    attended_yn?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_class?: csgi_classUpdateOneRequiredWithoutCsgi_rosterInput
    csgi_period?: csgi_periodUpdateOneRequiredWithoutCsgi_rosterInput
  }

  export type csgi_rosterUncheckedUpdateWithoutCsgi_studentInput = {
    rosterid?: IntFieldUpdateOperationsInput | number
    classid?: IntFieldUpdateOperationsInput | number
    periodid?: IntFieldUpdateOperationsInput | number
    attended_yn?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type csgi_classCreateManyCsgi_userInput = {
    classid?: number
    classname: string
    class_desc: string
    gradeid?: number | null
    roomid?: number | null
    created_date?: Date | string
    created_by?: string | null
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_user_roleCreateManyCsgi_userInput = {
    user_roleid?: number
    roleid: number
    created_date?: Date | string
    created_by?: string
    updated_date?: Date | string | null
    updated_by?: string | null
  }

  export type csgi_classUpdateWithoutCsgi_userInput = {
    classname?: StringFieldUpdateOperationsInput | string
    class_desc?: StringFieldUpdateOperationsInput | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_grade?: csgi_gradeUpdateOneWithoutCsgi_classInput
    csgi_room?: csgi_roomUpdateOneWithoutCsgi_classInput
    csgi_roster?: csgi_rosterUpdateManyWithoutCsgi_classInput
  }

  export type csgi_classUncheckedUpdateWithoutCsgi_userInput = {
    classid?: IntFieldUpdateOperationsInput | number
    classname?: StringFieldUpdateOperationsInput | string
    class_desc?: StringFieldUpdateOperationsInput | string
    gradeid?: NullableIntFieldUpdateOperationsInput | number | null
    roomid?: NullableIntFieldUpdateOperationsInput | number | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_roster?: csgi_rosterUncheckedUpdateManyWithoutCsgi_classInput
  }

  export type csgi_user_roleUpdateWithoutCsgi_userInput = {
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    csgi_role?: csgi_roleUpdateOneRequiredWithoutCsgi_user_roleInput
  }

  export type csgi_user_roleUncheckedUpdateWithoutCsgi_userInput = {
    user_roleid?: IntFieldUpdateOperationsInput | number
    roleid?: IntFieldUpdateOperationsInput | number
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}