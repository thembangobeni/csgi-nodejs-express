
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.21.2
 * Query Engine version: e421996c87d5f3c8f7eeadd502d4ad402c89464d
 */
Prisma.prismaVersion = {
  client: "2.21.2",
  engine: "e421996c87d5f3c8f7eeadd502d4ad402c89464d"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.Csgi_classScalarFieldEnum = makeEnum({
  classid: 'classid',
  classname: 'classname',
  class_desc: 'class_desc',
  userid: 'userid',
  gradeid: 'gradeid',
  roomid: 'roomid',
  created_date: 'created_date',
  created_by: 'created_by',
  updated_date: 'updated_date',
  updated_by: 'updated_by'
});

exports.Prisma.Csgi_gradeScalarFieldEnum = makeEnum({
  gradeid: 'gradeid',
  gradecode: 'gradecode',
  grade: 'grade',
  created_date: 'created_date',
  created_by: 'created_by',
  updated_date: 'updated_date',
  updated_by: 'updated_by'
});

exports.Prisma.Csgi_menuScalarFieldEnum = makeEnum({
  menuid: 'menuid',
  menuname: 'menuname',
  created_date: 'created_date',
  created_by: 'created_by',
  updated_date: 'updated_date',
  updated_by: 'updated_by'
});

exports.Prisma.Csgi_menu_itemScalarFieldEnum = makeEnum({
  itemid: 'itemid',
  itemname: 'itemname',
  menuid: 'menuid',
  created_date: 'created_date',
  created_by: 'created_by',
  updated_date: 'updated_date',
  updated_by: 'updated_by'
});

exports.Prisma.Csgi_menu_roleScalarFieldEnum = makeEnum({
  menu_roleid: 'menu_roleid',
  roleid: 'roleid',
  itemid: 'itemid',
  created_date: 'created_date',
  created_by: 'created_by',
  updated_date: 'updated_date',
  updated_by: 'updated_by'
});

exports.Prisma.Csgi_periodScalarFieldEnum = makeEnum({
  periodid: 'periodid',
  periodname: 'periodname',
  period_desc: 'period_desc',
  period_start: 'period_start',
  period_end: 'period_end',
  created_date: 'created_date',
  created_by: 'created_by',
  updated_date: 'updated_date',
  updated_by: 'updated_by',
  period_date: 'period_date'
});

exports.Prisma.Csgi_roleScalarFieldEnum = makeEnum({
  roleid: 'roleid',
  role: 'role',
  created_date: 'created_date',
  created_by: 'created_by',
  updated_date: 'updated_date',
  updated_by: 'updated_by'
});

exports.Prisma.Csgi_roomScalarFieldEnum = makeEnum({
  roomid: 'roomid',
  roomcode: 'roomcode',
  room_desc: 'room_desc',
  location: 'location',
  created_date: 'created_date',
  created_by: 'created_by',
  updated_date: 'updated_date',
  updated_by: 'updated_by'
});

exports.Prisma.Csgi_rosterScalarFieldEnum = makeEnum({
  rosterid: 'rosterid',
  classid: 'classid',
  periodid: 'periodid',
  studentid: 'studentid',
  attended_yn: 'attended_yn',
  created_date: 'created_date',
  created_by: 'created_by',
  updated_date: 'updated_date',
  updated_by: 'updated_by'
});

exports.Prisma.Csgi_studentScalarFieldEnum = makeEnum({
  studentid: 'studentid',
  student_name: 'student_name',
  last_name: 'last_name',
  date_of_birth: 'date_of_birth',
  gender: 'gender',
  created_date: 'created_date',
  created_by: 'created_by',
  updated_date: 'updated_date',
  updated_by: 'updated_by'
});

exports.Prisma.Csgi_userScalarFieldEnum = makeEnum({
  userid: 'userid',
  username: 'username',
  email: 'email',
  first_name: 'first_name',
  last_name: 'last_name',
  password: 'password',
  created_date: 'created_date',
  created_by: 'created_by',
  updated_date: 'updated_date',
  updated_by: 'updated_by'
});

exports.Prisma.Csgi_user_roleScalarFieldEnum = makeEnum({
  user_roleid: 'user_roleid',
  userid: 'userid',
  roleid: 'roleid',
  created_date: 'created_date',
  created_by: 'created_by',
  updated_date: 'updated_date',
  updated_by: 'updated_by'
});

exports.Prisma.Csgi_alluser_vScalarFieldEnum = makeEnum({
  userid: 'userid',
  email: 'email',
  role: 'role'
});

exports.Prisma.Csgi_detailreport_vScalarFieldEnum = makeEnum({
  classid: 'classid',
  classname: 'classname',
  gradeid: 'gradeid',
  gradecode: 'gradecode',
  teacherid: 'teacherid',
  teachername: 'teachername',
  teacheremail: 'teacheremail',
  periodid: 'periodid',
  periodname: 'periodname',
  period_date: 'period_date',
  quarter: 'quarter',
  studentid: 'studentid',
  student_name: 'student_name',
  attended: 'attended',
  notattended: 'notattended'
});

exports.Prisma.Csgi_summaryreport_vScalarFieldEnum = makeEnum({
  classname: 'classname',
  gradeid: 'gradeid',
  gradecode: 'gradecode',
  teacherid: 'teacherid',
  teacheremail: 'teacheremail',
  teachername: 'teachername',
  student_name: 'student_name',
  quarter: 'quarter',
  no_attended: 'no_attended',
  no_missed: 'no_missed'
});

exports.Prisma.Csgi_teacher_vScalarFieldEnum = makeEnum({
  teacherid: 'teacherid',
  teacher: 'teacher',
  teacheremail: 'teacheremail',
  teachername: 'teachername',
  rolename: 'rolename'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});


exports.Prisma.ModelName = makeEnum({
  csgi_class: 'csgi_class',
  csgi_grade: 'csgi_grade',
  csgi_menu: 'csgi_menu',
  csgi_menu_item: 'csgi_menu_item',
  csgi_menu_role: 'csgi_menu_role',
  csgi_period: 'csgi_period',
  csgi_role: 'csgi_role',
  csgi_room: 'csgi_room',
  csgi_roster: 'csgi_roster',
  csgi_student: 'csgi_student',
  csgi_user: 'csgi_user',
  csgi_user_role: 'csgi_user_role',
  csgi_alluser_v: 'csgi_alluser_v',
  csgi_detailreport_v: 'csgi_detailreport_v',
  csgi_summaryreport_v: 'csgi_summaryreport_v',
  csgi_teacher_v: 'csgi_teacher_v'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
